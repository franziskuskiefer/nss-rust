/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: ::std::os::raw::c_double,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRUint8 = ::std::os::raw::c_uchar;
pub type PRInt8 = ::std::os::raw::c_char;
pub type PRUint16 = ::std::os::raw::c_ushort;
pub type PRInt16 = ::std::os::raw::c_short;
pub type PRUint32 = ::std::os::raw::c_uint;
pub type PRInt32 = ::std::os::raw::c_int;
pub type PRInt64 = ::std::os::raw::c_long;
pub type PRUint64 = ::std::os::raw::c_ulong;
pub type PRIntn = ::std::os::raw::c_int;
pub type PRUintn = ::std::os::raw::c_uint;
pub type PRFloat64 = ::std::os::raw::c_double;
pub type PRSize = size_t;
pub type PROffset32 = PRInt32;
pub type PROffset64 = PRInt64;
pub type PRPtrdiff = ptrdiff_t;
pub type PRUptrdiff = ::std::os::raw::c_ulong;
pub type PRBool = PRIntn;
pub type PRPackedBool = PRUint8;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum PRStatus { PR_FAILURE = -1, PR_SUCCESS = 0, }
pub type PRUnichar = PRUint16;
pub type PRWord = ::std::os::raw::c_long;
pub type PRUword = ::std::os::raw::c_ulong;
pub type uintn = PRUintn;
pub type intn = PRIntn;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uint64 = PRUint64;
pub type uint32 = PRUint32;
pub type uint16 = PRUint16;
pub type uint8 = PRUint8;
pub type int64 = PRInt64;
pub type int32 = PRInt32;
pub type int16 = PRInt16;
pub type int8 = PRInt8;
pub type float64 = PRFloat64;
pub type uptrdiff_t = PRUptrdiff;
pub type uprword_t = PRUword;
pub type prword_t = PRWord;
pub type PRIntervalTime = PRUint32;
pub enum PRMonitor { }
pub enum PRLock { }
pub enum PRCondVar { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum nssILockType {
    nssILockArena = 0,
    nssILockSession = 1,
    nssILockObject = 2,
    nssILockRefLock = 3,
    nssILockCert = 4,
    nssILockCertDB = 5,
    nssILockDBM = 6,
    nssILockCache = 7,
    nssILockSSL = 8,
    nssILockList = 9,
    nssILockSlot = 10,
    nssILockFreelist = 11,
    nssILockOID = 12,
    nssILockAttribute = 13,
    nssILockPK11cxt = 14,
    nssILockRWLock = 15,
    nssILockOther = 16,
    nssILockSelfServ = 17,
    nssILockKeyDB = 18,
    nssILockLast = 19,
}
pub enum nssRWLockStr { }
pub type NSSRWLock = nssRWLockStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLArena {
    pub next: *mut PLArena,
    pub base: PRUword,
    pub limit: PRUword,
    pub avail: PRUword,
}
impl ::std::default::Default for PLArena {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLArenaPool {
    pub first: PLArena,
    pub current: *mut PLArena,
    pub arenasize: PRUint32,
    pub mask: PRUword,
}
impl ::std::default::Default for PLArenaPool {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PLMallocSizeFn =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *const ::std::os::raw::c_void)
                              -> size_t>;
pub enum PRLibrary { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRStaticLinkTable {
    pub name: *const ::std::os::raw::c_char,
    pub fp: ::std::option::Option<extern "C" fn()>,
}
impl ::std::default::Default for PRStaticLinkTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRLibSpecType {
    PR_LibSpec_Pathname = 0,
    PR_LibSpec_MacNamedFragment = 1,
    PR_LibSpec_MacIndexedFragment = 2,
    PR_LibSpec_PathnameU = 3,
}
pub enum FSSpec { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRLibSpec {
    pub type_: PRLibSpecType,
    pub value: Union_Unnamed3,
}
impl ::std::default::Default for PRLibSpec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed3 {
    pub unsafe fn pathname(&mut self) -> *mut *const ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mac_named_fragment(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mac_indexed_fragment(&mut self) -> *mut Struct_Unnamed5 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pathname_u(&mut self) -> *mut *const PRUnichar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed4 {
    pub fsspec: *const FSSpec,
    pub name: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed5 {
    pub fsspec: *const FSSpec,
    pub index: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRFuncPtr = ::std::option::Option<extern "C" fn()>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed6 {
    _ISupper = 256,
    _ISlower = 512,
    _ISalpha = 1024,
    _ISdigit = 2048,
    _ISxdigit = 4096,
    _ISspace = 8192,
    _ISprint = 16384,
    _ISgraph = 32768,
    _ISblank = 1,
    _IScntrl = 2,
    _ISpunct = 4,
    _ISalnum = 8,
}
pub enum __locale_data { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::default::Default for __locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed7 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed8 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __WAIT_STATUS {
    pub _bindgen_data_: [u64; 1usize],
}
impl __WAIT_STATUS {
    pub unsafe fn __uptr(&mut self) -> *mut *mut wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for __WAIT_STATUS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub const PR_LOG_NOTICE: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
pub const PR_LOG_WARN: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_WARNING;
pub const PR_LOG_MIN: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
pub const PR_LOG_MAX: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRLogModuleLevel {
    PR_LOG_NONE = 0,
    PR_LOG_ALWAYS = 1,
    PR_LOG_ERROR = 2,
    PR_LOG_WARNING = 3,
    PR_LOG_DEBUG = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRLogModuleInfo {
    pub name: *const ::std::os::raw::c_char,
    pub level: PRLogModuleLevel,
    pub next: *mut PRLogModuleInfo,
}
impl ::std::default::Default for PRLogModuleInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PORTCheapArenaPool_str {
    pub arena: PLArenaPool,
    pub magic: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PORTCheapArenaPool_str {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PORTCheapArenaPool = PORTCheapArenaPool_str;
pub type PORTCharConversionWSwapFunc =
    ::std::option::Option<unsafe extern "C" fn(toUnicode: PRBool,
                                               inBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               inBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               maxOutBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBufLen:
                                                   *mut ::std::os::raw::c_uint,
                                               swapBytes: PRBool) -> PRBool>;
pub type PORTCharConversionFunc =
    ::std::option::Option<unsafe extern "C" fn(toUnicode: PRBool,
                                               inBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               inBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               maxOutBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBufLen:
                                                   *mut ::std::os::raw::c_uint)
                              -> PRBool>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECItemType {
    siBuffer = 0,
    siClearDataBuffer = 1,
    siCipherDataBuffer = 2,
    siDERCertBuffer = 3,
    siEncodedCertBuffer = 4,
    siDERNameBuffer = 5,
    siEncodedNameBuffer = 6,
    siAsciiNameString = 7,
    siAsciiString = 8,
    siDEROID = 9,
    siUnsignedInteger = 10,
    siUTCTime = 11,
    siGeneralizedTime = 12,
    siVisibleString = 13,
    siUTF8String = 14,
    siBMPString = 15,
}
pub type SECItem = SECItemStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECItemStr {
    pub type_: SECItemType,
    pub data: *mut ::std::os::raw::c_uchar,
    pub len: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SECItemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECItemArray = SECItemArrayStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECItemArrayStr {
    pub items: *mut SECItem,
    pub len: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SECItemArrayStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum _SECStatus { SECWouldBlock = -2, SECFailure = -1, SECSuccess = 0, }
pub type SECStatus = _SECStatus;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum _SECComparison {
    SECLessThan = -1,
    SECEqual = 0,
    SECGreaterThan = 1,
}
pub type SECComparison = _SECComparison;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed9,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: size_t)
        -> __ssize_t;
pub type __io_write_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *const ::std::os::raw::c_char, __n: size_t)
        -> __ssize_t;
pub type __io_seek_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __pos: *mut __off64_t, __w: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
pub type __io_close_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type fpos_t = _G_fpos_t;
pub type PLHashNumber = PRUint32;
pub type PLHashFunction =
    ::std::option::Option<unsafe extern "C" fn(key:
                                                   *const ::std::os::raw::c_void)
                              -> PLHashNumber>;
pub type PLHashComparator =
    ::std::option::Option<unsafe extern "C" fn(v1:
                                                   *const ::std::os::raw::c_void,
                                               v2:
                                                   *const ::std::os::raw::c_void)
                              -> PRIntn>;
pub type PLHashEnumerator =
    ::std::option::Option<unsafe extern "C" fn(he: *mut PLHashEntry,
                                               i: PRIntn,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> PRIntn>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLHashAllocOps {
    pub allocTable: ::std::option::Option<unsafe extern "C" fn(pool:
                                                                   *mut ::std::os::raw::c_void,
                                                               size: PRSize)
                                              -> *mut ::std::os::raw::c_void>,
    pub freeTable: ::std::option::Option<unsafe extern "C" fn(pool:
                                                                  *mut ::std::os::raw::c_void,
                                                              item:
                                                                  *mut ::std::os::raw::c_void)>,
    pub allocEntry: ::std::option::Option<unsafe extern "C" fn(pool:
                                                                   *mut ::std::os::raw::c_void,
                                                               key:
                                                                   *const ::std::os::raw::c_void)
                                              -> *mut PLHashEntry>,
    pub freeEntry: ::std::option::Option<unsafe extern "C" fn(pool:
                                                                  *mut ::std::os::raw::c_void,
                                                              he:
                                                                  *mut PLHashEntry,
                                                              flag: PRUintn)>,
}
impl ::std::default::Default for PLHashAllocOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLHashEntry {
    pub next: *mut PLHashEntry,
    pub keyHash: PLHashNumber,
    pub key: *const ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for PLHashEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLHashTable {
    pub buckets: *mut *mut PLHashEntry,
    pub nentries: PRUint32,
    pub shift: PRUint32,
    pub keyHash: PLHashFunction,
    pub keyCompare: PLHashComparator,
    pub valueCompare: PLHashComparator,
    pub allocOps: *const PLHashAllocOps,
    pub allocPriv: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for PLHashTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECOidData = SECOidDataStr;
pub type SECAlgorithmID = SECAlgorithmIDStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECAlgorithmIDStr {
    pub algorithm: SECItem,
    pub parameters: SECItem,
}
impl ::std::default::Default for SECAlgorithmIDStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECOidTag {
    SEC_OID_UNKNOWN = 0,
    SEC_OID_MD2 = 1,
    SEC_OID_MD4 = 2,
    SEC_OID_MD5 = 3,
    SEC_OID_SHA1 = 4,
    SEC_OID_RC2_CBC = 5,
    SEC_OID_RC4 = 6,
    SEC_OID_DES_EDE3_CBC = 7,
    SEC_OID_RC5_CBC_PAD = 8,
    SEC_OID_DES_ECB = 9,
    SEC_OID_DES_CBC = 10,
    SEC_OID_DES_OFB = 11,
    SEC_OID_DES_CFB = 12,
    SEC_OID_DES_MAC = 13,
    SEC_OID_DES_EDE = 14,
    SEC_OID_ISO_SHA_WITH_RSA_SIGNATURE = 15,
    SEC_OID_PKCS1_RSA_ENCRYPTION = 16,
    SEC_OID_PKCS1_MD2_WITH_RSA_ENCRYPTION = 17,
    SEC_OID_PKCS1_MD4_WITH_RSA_ENCRYPTION = 18,
    SEC_OID_PKCS1_MD5_WITH_RSA_ENCRYPTION = 19,
    SEC_OID_PKCS1_SHA1_WITH_RSA_ENCRYPTION = 20,
    SEC_OID_PKCS5_PBE_WITH_MD2_AND_DES_CBC = 21,
    SEC_OID_PKCS5_PBE_WITH_MD5_AND_DES_CBC = 22,
    SEC_OID_PKCS5_PBE_WITH_SHA1_AND_DES_CBC = 23,
    SEC_OID_PKCS7 = 24,
    SEC_OID_PKCS7_DATA = 25,
    SEC_OID_PKCS7_SIGNED_DATA = 26,
    SEC_OID_PKCS7_ENVELOPED_DATA = 27,
    SEC_OID_PKCS7_SIGNED_ENVELOPED_DATA = 28,
    SEC_OID_PKCS7_DIGESTED_DATA = 29,
    SEC_OID_PKCS7_ENCRYPTED_DATA = 30,
    SEC_OID_PKCS9_EMAIL_ADDRESS = 31,
    SEC_OID_PKCS9_UNSTRUCTURED_NAME = 32,
    SEC_OID_PKCS9_CONTENT_TYPE = 33,
    SEC_OID_PKCS9_MESSAGE_DIGEST = 34,
    SEC_OID_PKCS9_SIGNING_TIME = 35,
    SEC_OID_PKCS9_COUNTER_SIGNATURE = 36,
    SEC_OID_PKCS9_CHALLENGE_PASSWORD = 37,
    SEC_OID_PKCS9_UNSTRUCTURED_ADDRESS = 38,
    SEC_OID_PKCS9_EXTENDED_CERTIFICATE_ATTRIBUTES = 39,
    SEC_OID_PKCS9_SMIME_CAPABILITIES = 40,
    SEC_OID_AVA_COMMON_NAME = 41,
    SEC_OID_AVA_COUNTRY_NAME = 42,
    SEC_OID_AVA_LOCALITY = 43,
    SEC_OID_AVA_STATE_OR_PROVINCE = 44,
    SEC_OID_AVA_ORGANIZATION_NAME = 45,
    SEC_OID_AVA_ORGANIZATIONAL_UNIT_NAME = 46,
    SEC_OID_AVA_DN_QUALIFIER = 47,
    SEC_OID_AVA_DC = 48,
    SEC_OID_NS_TYPE_GIF = 49,
    SEC_OID_NS_TYPE_JPEG = 50,
    SEC_OID_NS_TYPE_URL = 51,
    SEC_OID_NS_TYPE_HTML = 52,
    SEC_OID_NS_TYPE_CERT_SEQUENCE = 53,
    SEC_OID_MISSI_KEA_DSS_OLD = 54,
    SEC_OID_MISSI_DSS_OLD = 55,
    SEC_OID_MISSI_KEA_DSS = 56,
    SEC_OID_MISSI_DSS = 57,
    SEC_OID_MISSI_KEA = 58,
    SEC_OID_MISSI_ALT_KEA = 59,
    SEC_OID_NS_CERT_EXT_NETSCAPE_OK = 60,
    SEC_OID_NS_CERT_EXT_ISSUER_LOGO = 61,
    SEC_OID_NS_CERT_EXT_SUBJECT_LOGO = 62,
    SEC_OID_NS_CERT_EXT_CERT_TYPE = 63,
    SEC_OID_NS_CERT_EXT_BASE_URL = 64,
    SEC_OID_NS_CERT_EXT_REVOCATION_URL = 65,
    SEC_OID_NS_CERT_EXT_CA_REVOCATION_URL = 66,
    SEC_OID_NS_CERT_EXT_CA_CRL_URL = 67,
    SEC_OID_NS_CERT_EXT_CA_CERT_URL = 68,
    SEC_OID_NS_CERT_EXT_CERT_RENEWAL_URL = 69,
    SEC_OID_NS_CERT_EXT_CA_POLICY_URL = 70,
    SEC_OID_NS_CERT_EXT_HOMEPAGE_URL = 71,
    SEC_OID_NS_CERT_EXT_ENTITY_LOGO = 72,
    SEC_OID_NS_CERT_EXT_USER_PICTURE = 73,
    SEC_OID_NS_CERT_EXT_SSL_SERVER_NAME = 74,
    SEC_OID_NS_CERT_EXT_COMMENT = 75,
    SEC_OID_NS_CERT_EXT_LOST_PASSWORD_URL = 76,
    SEC_OID_NS_CERT_EXT_CERT_RENEWAL_TIME = 77,
    SEC_OID_NS_KEY_USAGE_GOVT_APPROVED = 78,
    SEC_OID_X509_SUBJECT_DIRECTORY_ATTR = 79,
    SEC_OID_X509_SUBJECT_KEY_ID = 80,
    SEC_OID_X509_KEY_USAGE = 81,
    SEC_OID_X509_PRIVATE_KEY_USAGE_PERIOD = 82,
    SEC_OID_X509_SUBJECT_ALT_NAME = 83,
    SEC_OID_X509_ISSUER_ALT_NAME = 84,
    SEC_OID_X509_BASIC_CONSTRAINTS = 85,
    SEC_OID_X509_NAME_CONSTRAINTS = 86,
    SEC_OID_X509_CRL_DIST_POINTS = 87,
    SEC_OID_X509_CERTIFICATE_POLICIES = 88,
    SEC_OID_X509_POLICY_MAPPINGS = 89,
    SEC_OID_X509_POLICY_CONSTRAINTS = 90,
    SEC_OID_X509_AUTH_KEY_ID = 91,
    SEC_OID_X509_EXT_KEY_USAGE = 92,
    SEC_OID_X509_AUTH_INFO_ACCESS = 93,
    SEC_OID_X509_CRL_NUMBER = 94,
    SEC_OID_X509_REASON_CODE = 95,
    SEC_OID_X509_INVALID_DATE = 96,
    SEC_OID_X500_RSA_ENCRYPTION = 97,
    SEC_OID_RFC1274_UID = 98,
    SEC_OID_RFC1274_MAIL = 99,
    SEC_OID_PKCS12 = 100,
    SEC_OID_PKCS12_MODE_IDS = 101,
    SEC_OID_PKCS12_ESPVK_IDS = 102,
    SEC_OID_PKCS12_BAG_IDS = 103,
    SEC_OID_PKCS12_CERT_BAG_IDS = 104,
    SEC_OID_PKCS12_OIDS = 105,
    SEC_OID_PKCS12_PBE_IDS = 106,
    SEC_OID_PKCS12_SIGNATURE_IDS = 107,
    SEC_OID_PKCS12_ENVELOPING_IDS = 108,
    SEC_OID_PKCS12_PKCS8_KEY_SHROUDING = 109,
    SEC_OID_PKCS12_KEY_BAG_ID = 110,
    SEC_OID_PKCS12_CERT_AND_CRL_BAG_ID = 111,
    SEC_OID_PKCS12_SECRET_BAG_ID = 112,
    SEC_OID_PKCS12_X509_CERT_CRL_BAG = 113,
    SEC_OID_PKCS12_SDSI_CERT_BAG = 114,
    SEC_OID_PKCS12_PBE_WITH_SHA1_AND_128_BIT_RC4 = 115,
    SEC_OID_PKCS12_PBE_WITH_SHA1_AND_40_BIT_RC4 = 116,
    SEC_OID_PKCS12_PBE_WITH_SHA1_AND_TRIPLE_DES_CBC = 117,
    SEC_OID_PKCS12_PBE_WITH_SHA1_AND_128_BIT_RC2_CBC = 118,
    SEC_OID_PKCS12_PBE_WITH_SHA1_AND_40_BIT_RC2_CBC = 119,
    SEC_OID_PKCS12_RSA_ENCRYPTION_WITH_128_BIT_RC4 = 120,
    SEC_OID_PKCS12_RSA_ENCRYPTION_WITH_40_BIT_RC4 = 121,
    SEC_OID_PKCS12_RSA_ENCRYPTION_WITH_TRIPLE_DES = 122,
    SEC_OID_PKCS12_RSA_SIGNATURE_WITH_SHA1_DIGEST = 123,
    SEC_OID_ANSIX9_DSA_SIGNATURE = 124,
    SEC_OID_ANSIX9_DSA_SIGNATURE_WITH_SHA1_DIGEST = 125,
    SEC_OID_BOGUS_DSA_SIGNATURE_WITH_SHA1_DIGEST = 126,
    SEC_OID_VERISIGN_USER_NOTICES = 127,
    SEC_OID_PKIX_CPS_POINTER_QUALIFIER = 128,
    SEC_OID_PKIX_USER_NOTICE_QUALIFIER = 129,
    SEC_OID_PKIX_OCSP = 130,
    SEC_OID_PKIX_OCSP_BASIC_RESPONSE = 131,
    SEC_OID_PKIX_OCSP_NONCE = 132,
    SEC_OID_PKIX_OCSP_CRL = 133,
    SEC_OID_PKIX_OCSP_RESPONSE = 134,
    SEC_OID_PKIX_OCSP_NO_CHECK = 135,
    SEC_OID_PKIX_OCSP_ARCHIVE_CUTOFF = 136,
    SEC_OID_PKIX_OCSP_SERVICE_LOCATOR = 137,
    SEC_OID_PKIX_REGCTRL_REGTOKEN = 138,
    SEC_OID_PKIX_REGCTRL_AUTHENTICATOR = 139,
    SEC_OID_PKIX_REGCTRL_PKIPUBINFO = 140,
    SEC_OID_PKIX_REGCTRL_PKI_ARCH_OPTIONS = 141,
    SEC_OID_PKIX_REGCTRL_OLD_CERT_ID = 142,
    SEC_OID_PKIX_REGCTRL_PROTOCOL_ENC_KEY = 143,
    SEC_OID_PKIX_REGINFO_UTF8_PAIRS = 144,
    SEC_OID_PKIX_REGINFO_CERT_REQUEST = 145,
    SEC_OID_EXT_KEY_USAGE_SERVER_AUTH = 146,
    SEC_OID_EXT_KEY_USAGE_CLIENT_AUTH = 147,
    SEC_OID_EXT_KEY_USAGE_CODE_SIGN = 148,
    SEC_OID_EXT_KEY_USAGE_EMAIL_PROTECT = 149,
    SEC_OID_EXT_KEY_USAGE_TIME_STAMP = 150,
    SEC_OID_OCSP_RESPONDER = 151,
    SEC_OID_NETSCAPE_SMIME_KEA = 152,
    SEC_OID_FORTEZZA_SKIPJACK = 153,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_128_BIT_RC4 = 154,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_40_BIT_RC4 = 155,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_3KEY_TRIPLE_DES_CBC = 156,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_2KEY_TRIPLE_DES_CBC = 157,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_128_BIT_RC2_CBC = 158,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_40_BIT_RC2_CBC = 159,
    SEC_OID_PKCS12_SAFE_CONTENTS_ID = 160,
    SEC_OID_PKCS12_PKCS8_SHROUDED_KEY_BAG_ID = 161,
    SEC_OID_PKCS12_V1_KEY_BAG_ID = 162,
    SEC_OID_PKCS12_V1_PKCS8_SHROUDED_KEY_BAG_ID = 163,
    SEC_OID_PKCS12_V1_CERT_BAG_ID = 164,
    SEC_OID_PKCS12_V1_CRL_BAG_ID = 165,
    SEC_OID_PKCS12_V1_SECRET_BAG_ID = 166,
    SEC_OID_PKCS12_V1_SAFE_CONTENTS_BAG_ID = 167,
    SEC_OID_PKCS9_X509_CERT = 168,
    SEC_OID_PKCS9_SDSI_CERT = 169,
    SEC_OID_PKCS9_X509_CRL = 170,
    SEC_OID_PKCS9_FRIENDLY_NAME = 171,
    SEC_OID_PKCS9_LOCAL_KEY_ID = 172,
    SEC_OID_BOGUS_KEY_USAGE = 173,
    SEC_OID_X942_DIFFIE_HELMAN_KEY = 174,
    SEC_OID_NETSCAPE_NICKNAME = 175,
    SEC_OID_NETSCAPE_RECOVERY_REQUEST = 176,
    SEC_OID_CERT_RENEWAL_LOCATOR = 177,
    SEC_OID_NS_CERT_EXT_SCOPE_OF_USE = 178,
    SEC_OID_CMS_EPHEMERAL_STATIC_DIFFIE_HELLMAN = 179,
    SEC_OID_CMS_3DES_KEY_WRAP = 180,
    SEC_OID_CMS_RC2_KEY_WRAP = 181,
    SEC_OID_SMIME_ENCRYPTION_KEY_PREFERENCE = 182,
    SEC_OID_AES_128_ECB = 183,
    SEC_OID_AES_128_CBC = 184,
    SEC_OID_AES_192_ECB = 185,
    SEC_OID_AES_192_CBC = 186,
    SEC_OID_AES_256_ECB = 187,
    SEC_OID_AES_256_CBC = 188,
    SEC_OID_SDN702_DSA_SIGNATURE = 189,
    SEC_OID_MS_SMIME_ENCRYPTION_KEY_PREFERENCE = 190,
    SEC_OID_SHA256 = 191,
    SEC_OID_SHA384 = 192,
    SEC_OID_SHA512 = 193,
    SEC_OID_PKCS1_SHA256_WITH_RSA_ENCRYPTION = 194,
    SEC_OID_PKCS1_SHA384_WITH_RSA_ENCRYPTION = 195,
    SEC_OID_PKCS1_SHA512_WITH_RSA_ENCRYPTION = 196,
    SEC_OID_AES_128_KEY_WRAP = 197,
    SEC_OID_AES_192_KEY_WRAP = 198,
    SEC_OID_AES_256_KEY_WRAP = 199,
    SEC_OID_ANSIX962_EC_PUBLIC_KEY = 200,
    SEC_OID_ANSIX962_ECDSA_SHA1_SIGNATURE = 201,
    SEC_OID_ANSIX962_EC_PRIME192V1 = 202,
    SEC_OID_ANSIX962_EC_PRIME192V2 = 203,
    SEC_OID_ANSIX962_EC_PRIME192V3 = 204,
    SEC_OID_ANSIX962_EC_PRIME239V1 = 205,
    SEC_OID_ANSIX962_EC_PRIME239V2 = 206,
    SEC_OID_ANSIX962_EC_PRIME239V3 = 207,
    SEC_OID_ANSIX962_EC_PRIME256V1 = 208,
    SEC_OID_SECG_EC_SECP112R1 = 209,
    SEC_OID_SECG_EC_SECP112R2 = 210,
    SEC_OID_SECG_EC_SECP128R1 = 211,
    SEC_OID_SECG_EC_SECP128R2 = 212,
    SEC_OID_SECG_EC_SECP160K1 = 213,
    SEC_OID_SECG_EC_SECP160R1 = 214,
    SEC_OID_SECG_EC_SECP160R2 = 215,
    SEC_OID_SECG_EC_SECP192K1 = 216,
    SEC_OID_SECG_EC_SECP224K1 = 217,
    SEC_OID_SECG_EC_SECP224R1 = 218,
    SEC_OID_SECG_EC_SECP256K1 = 219,
    SEC_OID_SECG_EC_SECP384R1 = 220,
    SEC_OID_SECG_EC_SECP521R1 = 221,
    SEC_OID_ANSIX962_EC_C2PNB163V1 = 222,
    SEC_OID_ANSIX962_EC_C2PNB163V2 = 223,
    SEC_OID_ANSIX962_EC_C2PNB163V3 = 224,
    SEC_OID_ANSIX962_EC_C2PNB176V1 = 225,
    SEC_OID_ANSIX962_EC_C2TNB191V1 = 226,
    SEC_OID_ANSIX962_EC_C2TNB191V2 = 227,
    SEC_OID_ANSIX962_EC_C2TNB191V3 = 228,
    SEC_OID_ANSIX962_EC_C2ONB191V4 = 229,
    SEC_OID_ANSIX962_EC_C2ONB191V5 = 230,
    SEC_OID_ANSIX962_EC_C2PNB208W1 = 231,
    SEC_OID_ANSIX962_EC_C2TNB239V1 = 232,
    SEC_OID_ANSIX962_EC_C2TNB239V2 = 233,
    SEC_OID_ANSIX962_EC_C2TNB239V3 = 234,
    SEC_OID_ANSIX962_EC_C2ONB239V4 = 235,
    SEC_OID_ANSIX962_EC_C2ONB239V5 = 236,
    SEC_OID_ANSIX962_EC_C2PNB272W1 = 237,
    SEC_OID_ANSIX962_EC_C2PNB304W1 = 238,
    SEC_OID_ANSIX962_EC_C2TNB359V1 = 239,
    SEC_OID_ANSIX962_EC_C2PNB368W1 = 240,
    SEC_OID_ANSIX962_EC_C2TNB431R1 = 241,
    SEC_OID_SECG_EC_SECT113R1 = 242,
    SEC_OID_SECG_EC_SECT113R2 = 243,
    SEC_OID_SECG_EC_SECT131R1 = 244,
    SEC_OID_SECG_EC_SECT131R2 = 245,
    SEC_OID_SECG_EC_SECT163K1 = 246,
    SEC_OID_SECG_EC_SECT163R1 = 247,
    SEC_OID_SECG_EC_SECT163R2 = 248,
    SEC_OID_SECG_EC_SECT193R1 = 249,
    SEC_OID_SECG_EC_SECT193R2 = 250,
    SEC_OID_SECG_EC_SECT233K1 = 251,
    SEC_OID_SECG_EC_SECT233R1 = 252,
    SEC_OID_SECG_EC_SECT239K1 = 253,
    SEC_OID_SECG_EC_SECT283K1 = 254,
    SEC_OID_SECG_EC_SECT283R1 = 255,
    SEC_OID_SECG_EC_SECT409K1 = 256,
    SEC_OID_SECG_EC_SECT409R1 = 257,
    SEC_OID_SECG_EC_SECT571K1 = 258,
    SEC_OID_SECG_EC_SECT571R1 = 259,
    SEC_OID_NETSCAPE_AOLSCREENNAME = 260,
    SEC_OID_AVA_SURNAME = 261,
    SEC_OID_AVA_SERIAL_NUMBER = 262,
    SEC_OID_AVA_STREET_ADDRESS = 263,
    SEC_OID_AVA_TITLE = 264,
    SEC_OID_AVA_POSTAL_ADDRESS = 265,
    SEC_OID_AVA_POSTAL_CODE = 266,
    SEC_OID_AVA_POST_OFFICE_BOX = 267,
    SEC_OID_AVA_GIVEN_NAME = 268,
    SEC_OID_AVA_INITIALS = 269,
    SEC_OID_AVA_GENERATION_QUALIFIER = 270,
    SEC_OID_AVA_HOUSE_IDENTIFIER = 271,
    SEC_OID_AVA_PSEUDONYM = 272,
    SEC_OID_PKIX_CA_ISSUERS = 273,
    SEC_OID_PKCS9_EXTENSION_REQUEST = 274,
    SEC_OID_ANSIX962_ECDSA_SIGNATURE_RECOMMENDED_DIGEST = 275,
    SEC_OID_ANSIX962_ECDSA_SIGNATURE_SPECIFIED_DIGEST = 276,
    SEC_OID_ANSIX962_ECDSA_SHA224_SIGNATURE = 277,
    SEC_OID_ANSIX962_ECDSA_SHA256_SIGNATURE = 278,
    SEC_OID_ANSIX962_ECDSA_SHA384_SIGNATURE = 279,
    SEC_OID_ANSIX962_ECDSA_SHA512_SIGNATURE = 280,
    SEC_OID_X509_HOLD_INSTRUCTION_CODE = 281,
    SEC_OID_X509_DELTA_CRL_INDICATOR = 282,
    SEC_OID_X509_ISSUING_DISTRIBUTION_POINT = 283,
    SEC_OID_X509_CERT_ISSUER = 284,
    SEC_OID_X509_FRESHEST_CRL = 285,
    SEC_OID_X509_INHIBIT_ANY_POLICY = 286,
    SEC_OID_X509_SUBJECT_INFO_ACCESS = 287,
    SEC_OID_CAMELLIA_128_CBC = 288,
    SEC_OID_CAMELLIA_192_CBC = 289,
    SEC_OID_CAMELLIA_256_CBC = 290,
    SEC_OID_PKCS5_PBKDF2 = 291,
    SEC_OID_PKCS5_PBES2 = 292,
    SEC_OID_PKCS5_PBMAC1 = 293,
    SEC_OID_HMAC_SHA1 = 294,
    SEC_OID_HMAC_SHA224 = 295,
    SEC_OID_HMAC_SHA256 = 296,
    SEC_OID_HMAC_SHA384 = 297,
    SEC_OID_HMAC_SHA512 = 298,
    SEC_OID_PKIX_TIMESTAMPING = 299,
    SEC_OID_PKIX_CA_REPOSITORY = 300,
    SEC_OID_ISO_SHA1_WITH_RSA_SIGNATURE = 301,
    SEC_OID_SEED_CBC = 302,
    SEC_OID_X509_ANY_POLICY = 303,
    SEC_OID_PKCS1_RSA_OAEP_ENCRYPTION = 304,
    SEC_OID_PKCS1_MGF1 = 305,
    SEC_OID_PKCS1_PSPECIFIED = 306,
    SEC_OID_PKCS1_RSA_PSS_SIGNATURE = 307,
    SEC_OID_PKCS1_SHA224_WITH_RSA_ENCRYPTION = 308,
    SEC_OID_SHA224 = 309,
    SEC_OID_EV_INCORPORATION_LOCALITY = 310,
    SEC_OID_EV_INCORPORATION_STATE = 311,
    SEC_OID_EV_INCORPORATION_COUNTRY = 312,
    SEC_OID_BUSINESS_CATEGORY = 313,
    SEC_OID_NIST_DSA_SIGNATURE_WITH_SHA224_DIGEST = 314,
    SEC_OID_NIST_DSA_SIGNATURE_WITH_SHA256_DIGEST = 315,
    SEC_OID_MS_EXT_KEY_USAGE_CTL_SIGNING = 316,
    SEC_OID_AVA_NAME = 317,
    SEC_OID_AES_128_GCM = 318,
    SEC_OID_AES_192_GCM = 319,
    SEC_OID_AES_256_GCM = 320,
    SEC_OID_IDEA_CBC = 321,
    SEC_OID_RC2_40_CBC = 322,
    SEC_OID_DES_40_CBC = 323,
    SEC_OID_RC4_40 = 324,
    SEC_OID_RC4_56 = 325,
    SEC_OID_NULL_CIPHER = 326,
    SEC_OID_HMAC_MD5 = 327,
    SEC_OID_TLS_RSA = 328,
    SEC_OID_TLS_DHE_RSA = 329,
    SEC_OID_TLS_DHE_DSS = 330,
    SEC_OID_TLS_DH_RSA = 331,
    SEC_OID_TLS_DH_DSS = 332,
    SEC_OID_TLS_DH_ANON = 333,
    SEC_OID_TLS_ECDHE_ECDSA = 334,
    SEC_OID_TLS_ECDHE_RSA = 335,
    SEC_OID_TLS_ECDH_ECDSA = 336,
    SEC_OID_TLS_ECDH_RSA = 337,
    SEC_OID_TLS_ECDH_ANON = 338,
    SEC_OID_TLS_RSA_EXPORT = 339,
    SEC_OID_TLS_DHE_RSA_EXPORT = 340,
    SEC_OID_TLS_DHE_DSS_EXPORT = 341,
    SEC_OID_TLS_DH_RSA_EXPORT = 342,
    SEC_OID_TLS_DH_DSS_EXPORT = 343,
    SEC_OID_TLS_DH_ANON_EXPORT = 344,
    SEC_OID_APPLY_SSL_POLICY = 345,
    SEC_OID_CHACHA20_POLY1305 = 346,
    SEC_OID_TLS_ECDHE_PSK = 347,
    SEC_OID_TOTAL = 348,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECSupportExtenTag {
    INVALID_CERT_EXTENSION = 0,
    UNSUPPORTED_CERT_EXTENSION = 1,
    SUPPORTED_CERT_EXTENSION = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECOidDataStr {
    pub oid: SECItem,
    pub offset: SECOidTag,
    pub desc: *const ::std::os::raw::c_char,
    pub mechanism: ::std::os::raw::c_ulong,
    pub supportedExtension: SECSupportExtenTag,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SECOidDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_ASN1Template_struct {
    pub kind: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
    pub sub: *const ::std::os::raw::c_void,
    pub size: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for sec_ASN1Template_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SEC_ASN1Template = sec_ASN1Template_struct;
pub type SEC_ASN1TemplateChooser =
    unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void, enc: PRBool)
        -> *const SEC_ASN1Template;
pub type SEC_ASN1TemplateChooserPtr = *mut SEC_ASN1TemplateChooser;
pub enum sec_DecoderContext_struct { }
pub type SEC_ASN1DecoderContext = sec_DecoderContext_struct;
pub enum sec_EncoderContext_struct { }
pub type SEC_ASN1EncoderContext = sec_EncoderContext_struct;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SEC_ASN1EncodingPart {
    SEC_ASN1_Identifier = 0,
    SEC_ASN1_Length = 1,
    SEC_ASN1_Contents = 2,
    SEC_ASN1_EndOfContents = 3,
}
pub type SEC_ASN1NotifyProc =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               before: PRBool,
                                               dest:
                                                   *mut ::std::os::raw::c_void,
                                               real_depth:
                                                   ::std::os::raw::c_int)>;
pub type SEC_ASN1WriteProc =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               data:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_ulong,
                                               depth: ::std::os::raw::c_int,
                                               data_kind:
                                                   SEC_ASN1EncodingPart)>;
pub type CK_BYTE = ::std::os::raw::c_uchar;
pub type CK_CHAR = CK_BYTE;
pub type CK_UTF8CHAR = CK_BYTE;
pub type CK_BBOOL = CK_BYTE;
pub type CK_ULONG = ::std::os::raw::c_ulong;
pub type CK_LONG = ::std::os::raw::c_long;
pub type CK_FLAGS = CK_ULONG;
pub type CK_BYTE_PTR = *mut CK_BYTE;
pub type CK_CHAR_PTR = *mut CK_CHAR;
pub type CK_UTF8CHAR_PTR = *mut CK_UTF8CHAR;
pub type CK_ULONG_PTR = *mut CK_ULONG;
pub type CK_VOID_PTR = *mut ::std::os::raw::c_void;
pub type CK_VOID_PTR_PTR = *mut CK_VOID_PTR;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_VERSION {
    pub major: CK_BYTE,
    pub minor: CK_BYTE,
}
impl ::std::default::Default for CK_VERSION {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_VERSION_PTR = *mut CK_VERSION;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_INFO {
    pub cryptokiVersion: CK_VERSION,
    pub manufacturerID: [CK_UTF8CHAR; 32usize],
    pub flags: CK_FLAGS,
    pub libraryDescription: [CK_UTF8CHAR; 32usize],
    pub libraryVersion: CK_VERSION,
}
impl ::std::default::Default for CK_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_INFO_PTR = *mut CK_INFO;
pub type CK_NOTIFICATION = CK_ULONG;
pub type CK_SLOT_ID = CK_ULONG;
pub type CK_SLOT_ID_PTR = *mut CK_SLOT_ID;
#[repr(C)]
#[derive(Copy)]
pub struct CK_SLOT_INFO {
    pub slotDescription: [CK_UTF8CHAR; 64usize],
    pub manufacturerID: [CK_UTF8CHAR; 32usize],
    pub flags: CK_FLAGS,
    pub hardwareVersion: CK_VERSION,
    pub firmwareVersion: CK_VERSION,
}
impl ::std::clone::Clone for CK_SLOT_INFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for CK_SLOT_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SLOT_INFO_PTR = *mut CK_SLOT_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TOKEN_INFO {
    pub label: [CK_UTF8CHAR; 32usize],
    pub manufacturerID: [CK_UTF8CHAR; 32usize],
    pub model: [CK_UTF8CHAR; 16usize],
    pub serialNumber: [CK_CHAR; 16usize],
    pub flags: CK_FLAGS,
    pub ulMaxSessionCount: CK_ULONG,
    pub ulSessionCount: CK_ULONG,
    pub ulMaxRwSessionCount: CK_ULONG,
    pub ulRwSessionCount: CK_ULONG,
    pub ulMaxPinLen: CK_ULONG,
    pub ulMinPinLen: CK_ULONG,
    pub ulTotalPublicMemory: CK_ULONG,
    pub ulFreePublicMemory: CK_ULONG,
    pub ulTotalPrivateMemory: CK_ULONG,
    pub ulFreePrivateMemory: CK_ULONG,
    pub hardwareVersion: CK_VERSION,
    pub firmwareVersion: CK_VERSION,
    pub utcTime: [CK_CHAR; 16usize],
}
impl ::std::default::Default for CK_TOKEN_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TOKEN_INFO_PTR = *mut CK_TOKEN_INFO;
pub type CK_SESSION_HANDLE = CK_ULONG;
pub type CK_SESSION_HANDLE_PTR = *mut CK_SESSION_HANDLE;
pub type CK_USER_TYPE = CK_ULONG;
pub type CK_STATE = CK_ULONG;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SESSION_INFO {
    pub slotID: CK_SLOT_ID,
    pub state: CK_STATE,
    pub flags: CK_FLAGS,
    pub ulDeviceError: CK_ULONG,
}
impl ::std::default::Default for CK_SESSION_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SESSION_INFO_PTR = *mut CK_SESSION_INFO;
pub type CK_OBJECT_HANDLE = CK_ULONG;
pub type CK_OBJECT_HANDLE_PTR = *mut CK_OBJECT_HANDLE;
pub type CK_OBJECT_CLASS = CK_ULONG;
pub type CK_OBJECT_CLASS_PTR = *mut CK_OBJECT_CLASS;
pub type CK_HW_FEATURE_TYPE = CK_ULONG;
pub type CK_KEY_TYPE = CK_ULONG;
pub type CK_CERTIFICATE_TYPE = CK_ULONG;
pub type CK_ATTRIBUTE_TYPE = CK_ULONG;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_ATTRIBUTE {
    pub type_: CK_ATTRIBUTE_TYPE,
    pub pValue: CK_VOID_PTR,
    pub ulValueLen: CK_ULONG,
}
impl ::std::default::Default for CK_ATTRIBUTE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_ATTRIBUTE_PTR = *mut CK_ATTRIBUTE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_DATE {
    pub year: [CK_CHAR; 4usize],
    pub month: [CK_CHAR; 2usize],
    pub day: [CK_CHAR; 2usize],
}
impl ::std::default::Default for CK_DATE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_MECHANISM_TYPE = CK_ULONG;
pub type CK_MECHANISM_TYPE_PTR = *mut CK_MECHANISM_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_MECHANISM {
    pub mechanism: CK_MECHANISM_TYPE,
    pub pParameter: CK_VOID_PTR,
    pub ulParameterLen: CK_ULONG,
}
impl ::std::default::Default for CK_MECHANISM {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_MECHANISM_PTR = *mut CK_MECHANISM;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_MECHANISM_INFO {
    pub ulMinKeySize: CK_ULONG,
    pub ulMaxKeySize: CK_ULONG,
    pub flags: CK_FLAGS,
}
impl ::std::default::Default for CK_MECHANISM_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_MECHANISM_INFO_PTR = *mut CK_MECHANISM_INFO;
pub type CK_RV = CK_ULONG;
pub type CK_NOTIFY =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        event: CK_NOTIFICATION,
                                        pApplication: CK_VOID_PTR) -> CK_RV>;
pub enum CK_FUNCTION_LIST { }
pub type CK_FUNCTION_LIST_PTR = *mut CK_FUNCTION_LIST;
pub type CK_FUNCTION_LIST_PTR_PTR = *mut CK_FUNCTION_LIST_PTR;
pub type CK_CREATEMUTEX =
    ::std::option::Option<extern "C" fn(ppMutex: CK_VOID_PTR_PTR) -> CK_RV>;
pub type CK_DESTROYMUTEX =
    ::std::option::Option<extern "C" fn(pMutex: CK_VOID_PTR) -> CK_RV>;
pub type CK_LOCKMUTEX =
    ::std::option::Option<extern "C" fn(pMutex: CK_VOID_PTR) -> CK_RV>;
pub type CK_UNLOCKMUTEX =
    ::std::option::Option<extern "C" fn(pMutex: CK_VOID_PTR) -> CK_RV>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_C_INITIALIZE_ARGS {
    pub CreateMutex: CK_CREATEMUTEX,
    pub DestroyMutex: CK_DESTROYMUTEX,
    pub LockMutex: CK_LOCKMUTEX,
    pub UnlockMutex: CK_UNLOCKMUTEX,
    pub flags: CK_FLAGS,
    pub LibraryParameters: *mut CK_CHAR_PTR,
    pub pReserved: CK_VOID_PTR,
}
impl ::std::default::Default for CK_C_INITIALIZE_ARGS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_C_INITIALIZE_ARGS_PTR = *mut CK_C_INITIALIZE_ARGS;
pub type CK_RSA_PKCS_MGF_TYPE = CK_ULONG;
pub type CK_RSA_PKCS_MGF_TYPE_PTR = *mut CK_RSA_PKCS_MGF_TYPE;
pub type CK_RSA_PKCS_OAEP_SOURCE_TYPE = CK_ULONG;
pub type CK_RSA_PKCS_OAEP_SOURCE_TYPE_PTR = *mut CK_RSA_PKCS_OAEP_SOURCE_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RSA_PKCS_OAEP_PARAMS {
    pub hashAlg: CK_MECHANISM_TYPE,
    pub mgf: CK_RSA_PKCS_MGF_TYPE,
    pub source: CK_RSA_PKCS_OAEP_SOURCE_TYPE,
    pub pSourceData: CK_VOID_PTR,
    pub ulSourceDataLen: CK_ULONG,
}
impl ::std::default::Default for CK_RSA_PKCS_OAEP_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RSA_PKCS_OAEP_PARAMS_PTR = *mut CK_RSA_PKCS_OAEP_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RSA_PKCS_PSS_PARAMS {
    pub hashAlg: CK_MECHANISM_TYPE,
    pub mgf: CK_RSA_PKCS_MGF_TYPE,
    pub sLen: CK_ULONG,
}
impl ::std::default::Default for CK_RSA_PKCS_PSS_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RSA_PKCS_PSS_PARAMS_PTR = *mut CK_RSA_PKCS_PSS_PARAMS;
pub type CK_EC_KDF_TYPE = CK_ULONG;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_ECDH1_DERIVE_PARAMS {
    pub kdf: CK_EC_KDF_TYPE,
    pub ulSharedDataLen: CK_ULONG,
    pub pSharedData: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_ECDH1_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_ECDH1_DERIVE_PARAMS_PTR = *mut CK_ECDH1_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_ECDH2_DERIVE_PARAMS {
    pub kdf: CK_EC_KDF_TYPE,
    pub ulSharedDataLen: CK_ULONG,
    pub pSharedData: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_ECDH2_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_ECDH2_DERIVE_PARAMS_PTR = *mut CK_ECDH2_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_ECMQV_DERIVE_PARAMS {
    pub kdf: CK_EC_KDF_TYPE,
    pub ulSharedDataLen: CK_ULONG,
    pub pSharedData: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
    pub publicKey: CK_OBJECT_HANDLE,
}
impl ::std::default::Default for CK_ECMQV_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_ECMQV_DERIVE_PARAMS_PTR = *mut CK_ECMQV_DERIVE_PARAMS;
pub type CK_X9_42_DH_KDF_TYPE = CK_ULONG;
pub type CK_X9_42_DH_KDF_TYPE_PTR = *mut CK_X9_42_DH_KDF_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_X9_42_DH1_DERIVE_PARAMS {
    pub kdf: CK_X9_42_DH_KDF_TYPE,
    pub ulOtherInfoLen: CK_ULONG,
    pub pOtherInfo: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_X9_42_DH1_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_X9_42_DH1_DERIVE_PARAMS_PTR = *mut CK_X9_42_DH1_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_X9_42_DH2_DERIVE_PARAMS {
    pub kdf: CK_X9_42_DH_KDF_TYPE,
    pub ulOtherInfoLen: CK_ULONG,
    pub pOtherInfo: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_X9_42_DH2_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_X9_42_DH2_DERIVE_PARAMS_PTR = *mut CK_X9_42_DH2_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_X9_42_MQV_DERIVE_PARAMS {
    pub kdf: CK_X9_42_DH_KDF_TYPE,
    pub ulOtherInfoLen: CK_ULONG,
    pub pOtherInfo: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
    pub publicKey: CK_OBJECT_HANDLE,
}
impl ::std::default::Default for CK_X9_42_MQV_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_X9_42_MQV_DERIVE_PARAMS_PTR = *mut CK_X9_42_MQV_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_KEA_DERIVE_PARAMS {
    pub isSender: CK_BBOOL,
    pub ulRandomLen: CK_ULONG,
    pub pRandomA: CK_BYTE_PTR,
    pub pRandomB: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_KEA_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_KEA_DERIVE_PARAMS_PTR = *mut CK_KEA_DERIVE_PARAMS;
pub type CK_RC2_PARAMS = CK_ULONG;
pub type CK_RC2_PARAMS_PTR = *mut CK_RC2_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RC2_CBC_PARAMS {
    pub ulEffectiveBits: CK_ULONG,
    pub iv: [CK_BYTE; 8usize],
}
impl ::std::default::Default for CK_RC2_CBC_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RC2_CBC_PARAMS_PTR = *mut CK_RC2_CBC_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RC2_MAC_GENERAL_PARAMS {
    pub ulEffectiveBits: CK_ULONG,
    pub ulMacLength: CK_ULONG,
}
impl ::std::default::Default for CK_RC2_MAC_GENERAL_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RC2_MAC_GENERAL_PARAMS_PTR = *mut CK_RC2_MAC_GENERAL_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RC5_PARAMS {
    pub ulWordsize: CK_ULONG,
    pub ulRounds: CK_ULONG,
}
impl ::std::default::Default for CK_RC5_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RC5_PARAMS_PTR = *mut CK_RC5_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RC5_CBC_PARAMS {
    pub ulWordsize: CK_ULONG,
    pub ulRounds: CK_ULONG,
    pub pIv: CK_BYTE_PTR,
    pub ulIvLen: CK_ULONG,
}
impl ::std::default::Default for CK_RC5_CBC_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RC5_CBC_PARAMS_PTR = *mut CK_RC5_CBC_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RC5_MAC_GENERAL_PARAMS {
    pub ulWordsize: CK_ULONG,
    pub ulRounds: CK_ULONG,
    pub ulMacLength: CK_ULONG,
}
impl ::std::default::Default for CK_RC5_MAC_GENERAL_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RC5_MAC_GENERAL_PARAMS_PTR = *mut CK_RC5_MAC_GENERAL_PARAMS;
pub type CK_MAC_GENERAL_PARAMS = CK_ULONG;
pub type CK_MAC_GENERAL_PARAMS_PTR = *mut CK_MAC_GENERAL_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_DES_CBC_ENCRYPT_DATA_PARAMS {
    pub iv: [CK_BYTE; 8usize],
    pub pData: CK_BYTE_PTR,
    pub length: CK_ULONG,
}
impl ::std::default::Default for CK_DES_CBC_ENCRYPT_DATA_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_DES_CBC_ENCRYPT_DATA_PARAMS_PTR =
    *mut CK_DES_CBC_ENCRYPT_DATA_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_AES_CBC_ENCRYPT_DATA_PARAMS {
    pub iv: [CK_BYTE; 16usize],
    pub pData: CK_BYTE_PTR,
    pub length: CK_ULONG,
}
impl ::std::default::Default for CK_AES_CBC_ENCRYPT_DATA_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_AES_CBC_ENCRYPT_DATA_PARAMS_PTR =
    *mut CK_AES_CBC_ENCRYPT_DATA_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_AES_CTR_PARAMS {
    pub ulCounterBits: CK_ULONG,
    pub cb: [CK_BYTE; 16usize],
}
impl ::std::default::Default for CK_AES_CTR_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_AES_CTR_PARAMS_PTR = *mut CK_AES_CTR_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_GCM_PARAMS {
    pub pIv: CK_BYTE_PTR,
    pub ulIvLen: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
    pub ulTagBits: CK_ULONG,
}
impl ::std::default::Default for CK_GCM_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_GCM_PARAMS_PTR = *mut CK_GCM_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_CCM_PARAMS {
    pub ulDataLen: CK_ULONG,
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceLen: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
    pub ulMACLen: CK_ULONG,
}
impl ::std::default::Default for CK_CCM_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_CCM_PARAMS_PTR = *mut CK_CCM_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SKIPJACK_PRIVATE_WRAP_PARAMS {
    pub ulPasswordLen: CK_ULONG,
    pub pPassword: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPAndGLen: CK_ULONG,
    pub ulQLen: CK_ULONG,
    pub ulRandomLen: CK_ULONG,
    pub pRandomA: CK_BYTE_PTR,
    pub pPrimeP: CK_BYTE_PTR,
    pub pBaseG: CK_BYTE_PTR,
    pub pSubprimeQ: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_SKIPJACK_PRIVATE_WRAP_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SKIPJACK_PRIVATE_WRAP_PTR = *mut CK_SKIPJACK_PRIVATE_WRAP_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SKIPJACK_RELAYX_PARAMS {
    pub ulOldWrappedXLen: CK_ULONG,
    pub pOldWrappedX: CK_BYTE_PTR,
    pub ulOldPasswordLen: CK_ULONG,
    pub pOldPassword: CK_BYTE_PTR,
    pub ulOldPublicDataLen: CK_ULONG,
    pub pOldPublicData: CK_BYTE_PTR,
    pub ulOldRandomLen: CK_ULONG,
    pub pOldRandomA: CK_BYTE_PTR,
    pub ulNewPasswordLen: CK_ULONG,
    pub pNewPassword: CK_BYTE_PTR,
    pub ulNewPublicDataLen: CK_ULONG,
    pub pNewPublicData: CK_BYTE_PTR,
    pub ulNewRandomLen: CK_ULONG,
    pub pNewRandomA: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_SKIPJACK_RELAYX_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SKIPJACK_RELAYX_PARAMS_PTR = *mut CK_SKIPJACK_RELAYX_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_PBE_PARAMS {
    pub pInitVector: CK_BYTE_PTR,
    pub pPassword: CK_UTF8CHAR_PTR,
    pub ulPasswordLen: CK_ULONG,
    pub pSalt: CK_BYTE_PTR,
    pub ulSaltLen: CK_ULONG,
    pub ulIteration: CK_ULONG,
}
impl ::std::default::Default for CK_PBE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_PBE_PARAMS_PTR = *mut CK_PBE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_KEY_WRAP_SET_OAEP_PARAMS {
    pub bBC: CK_BYTE,
    pub pX: CK_BYTE_PTR,
    pub ulXLen: CK_ULONG,
}
impl ::std::default::Default for CK_KEY_WRAP_SET_OAEP_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_KEY_WRAP_SET_OAEP_PARAMS_PTR = *mut CK_KEY_WRAP_SET_OAEP_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SSL3_RANDOM_DATA {
    pub pClientRandom: CK_BYTE_PTR,
    pub ulClientRandomLen: CK_ULONG,
    pub pServerRandom: CK_BYTE_PTR,
    pub ulServerRandomLen: CK_ULONG,
}
impl ::std::default::Default for CK_SSL3_RANDOM_DATA {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SSL3_MASTER_KEY_DERIVE_PARAMS {
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pVersion: CK_VERSION_PTR,
}
impl ::std::default::Default for CK_SSL3_MASTER_KEY_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SSL3_MASTER_KEY_DERIVE_PARAMS_PTR =
    *mut CK_SSL3_MASTER_KEY_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SSL3_KEY_MAT_OUT {
    pub hClientMacSecret: CK_OBJECT_HANDLE,
    pub hServerMacSecret: CK_OBJECT_HANDLE,
    pub hClientKey: CK_OBJECT_HANDLE,
    pub hServerKey: CK_OBJECT_HANDLE,
    pub pIVClient: CK_BYTE_PTR,
    pub pIVServer: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_SSL3_KEY_MAT_OUT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SSL3_KEY_MAT_OUT_PTR = *mut CK_SSL3_KEY_MAT_OUT;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SSL3_KEY_MAT_PARAMS {
    pub ulMacSizeInBits: CK_ULONG,
    pub ulKeySizeInBits: CK_ULONG,
    pub ulIVSizeInBits: CK_ULONG,
    pub bIsExport: CK_BBOOL,
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pReturnedKeyMaterial: CK_SSL3_KEY_MAT_OUT_PTR,
}
impl ::std::default::Default for CK_SSL3_KEY_MAT_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SSL3_KEY_MAT_PARAMS_PTR = *mut CK_SSL3_KEY_MAT_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TLS_PRF_PARAMS {
    pub pSeed: CK_BYTE_PTR,
    pub ulSeedLen: CK_ULONG,
    pub pLabel: CK_BYTE_PTR,
    pub ulLabelLen: CK_ULONG,
    pub pOutput: CK_BYTE_PTR,
    pub pulOutputLen: CK_ULONG_PTR,
}
impl ::std::default::Default for CK_TLS_PRF_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TLS_PRF_PARAMS_PTR = *mut CK_TLS_PRF_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TLS12_MASTER_KEY_DERIVE_PARAMS {
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pVersion: CK_VERSION_PTR,
    pub prfHashMechanism: CK_MECHANISM_TYPE,
}
impl ::std::default::Default for CK_TLS12_MASTER_KEY_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TLS12_MASTER_KEY_DERIVE_PARAMS_PTR =
    *mut CK_TLS12_MASTER_KEY_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TLS12_KEY_MAT_PARAMS {
    pub ulMacSizeInBits: CK_ULONG,
    pub ulKeySizeInBits: CK_ULONG,
    pub ulIVSizeInBits: CK_ULONG,
    pub bIsExport: CK_BBOOL,
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pReturnedKeyMaterial: CK_SSL3_KEY_MAT_OUT_PTR,
    pub prfHashMechanism: CK_MECHANISM_TYPE,
}
impl ::std::default::Default for CK_TLS12_KEY_MAT_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TLS12_KEY_MAT_PARAMS_PTR = *mut CK_TLS12_KEY_MAT_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TLS_KDF_PARAMS {
    pub prfMechanism: CK_MECHANISM_TYPE,
    pub pLabel: CK_BYTE_PTR,
    pub ulLabelLength: CK_ULONG,
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pContextData: CK_BYTE_PTR,
    pub ulContextDataLength: CK_ULONG,
}
impl ::std::default::Default for CK_TLS_KDF_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TLS_MAC_PARAMS {
    pub prfMechanism: CK_MECHANISM_TYPE,
    pub ulMacLength: CK_ULONG,
    pub ulServerOrClient: CK_ULONG,
}
impl ::std::default::Default for CK_TLS_MAC_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TLS_MAC_PARAMS_PTR = *mut CK_TLS_MAC_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_WTLS_RANDOM_DATA {
    pub pClientRandom: CK_BYTE_PTR,
    pub ulClientRandomLen: CK_ULONG,
    pub pServerRandom: CK_BYTE_PTR,
    pub ulServerRandomLen: CK_ULONG,
}
impl ::std::default::Default for CK_WTLS_RANDOM_DATA {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_WTLS_RANDOM_DATA_PTR = *mut CK_WTLS_RANDOM_DATA;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_WTLS_MASTER_KEY_DERIVE_PARAMS {
    pub DigestMechanism: CK_MECHANISM_TYPE,
    pub RandomInfo: CK_WTLS_RANDOM_DATA,
    pub pVersion: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_WTLS_MASTER_KEY_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_WTLS_MASTER_KEY_DERIVE_PARAMS_PTR =
    *mut CK_WTLS_MASTER_KEY_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_WTLS_PRF_PARAMS {
    pub DigestMechanism: CK_MECHANISM_TYPE,
    pub pSeed: CK_BYTE_PTR,
    pub ulSeedLen: CK_ULONG,
    pub pLabel: CK_BYTE_PTR,
    pub ulLabelLen: CK_ULONG,
    pub pOutput: CK_BYTE_PTR,
    pub pulOutputLen: CK_ULONG_PTR,
}
impl ::std::default::Default for CK_WTLS_PRF_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_WTLS_PRF_PARAMS_PTR = *mut CK_WTLS_PRF_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_WTLS_KEY_MAT_OUT {
    pub hMacSecret: CK_OBJECT_HANDLE,
    pub hKey: CK_OBJECT_HANDLE,
    pub pIV: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_WTLS_KEY_MAT_OUT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_WTLS_KEY_MAT_OUT_PTR = *mut CK_WTLS_KEY_MAT_OUT;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_WTLS_KEY_MAT_PARAMS {
    pub DigestMechanism: CK_MECHANISM_TYPE,
    pub ulMacSizeInBits: CK_ULONG,
    pub ulKeySizeInBits: CK_ULONG,
    pub ulIVSizeInBits: CK_ULONG,
    pub ulSequenceNumber: CK_ULONG,
    pub bIsExport: CK_BBOOL,
    pub RandomInfo: CK_WTLS_RANDOM_DATA,
    pub pReturnedKeyMaterial: CK_WTLS_KEY_MAT_OUT_PTR,
}
impl ::std::default::Default for CK_WTLS_KEY_MAT_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_WTLS_KEY_MAT_PARAMS_PTR = *mut CK_WTLS_KEY_MAT_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_CMS_SIG_PARAMS {
    pub certificateHandle: CK_OBJECT_HANDLE,
    pub pSigningMechanism: CK_MECHANISM_PTR,
    pub pDigestMechanism: CK_MECHANISM_PTR,
    pub pContentType: CK_UTF8CHAR_PTR,
    pub pRequestedAttributes: CK_BYTE_PTR,
    pub ulRequestedAttributesLen: CK_ULONG,
    pub pRequiredAttributes: CK_BYTE_PTR,
    pub ulRequiredAttributesLen: CK_ULONG,
}
impl ::std::default::Default for CK_CMS_SIG_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_CMS_SIG_PARAMS_PTR = *mut CK_CMS_SIG_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_KEY_DERIVATION_STRING_DATA {
    pub pData: CK_BYTE_PTR,
    pub ulLen: CK_ULONG,
}
impl ::std::default::Default for CK_KEY_DERIVATION_STRING_DATA {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_KEY_DERIVATION_STRING_DATA_PTR =
    *mut CK_KEY_DERIVATION_STRING_DATA;
pub type CK_EXTRACT_PARAMS = CK_ULONG;
pub type CK_EXTRACT_PARAMS_PTR = *mut CK_EXTRACT_PARAMS;
pub type CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE = CK_ULONG;
pub type CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE_PTR =
    *mut CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE;
pub type CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE = CK_ULONG;
pub type CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE_PTR =
    *mut CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_PKCS5_PBKD2_PARAMS {
    pub saltSource: CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE,
    pub pSaltSourceData: CK_VOID_PTR,
    pub ulSaltSourceDataLen: CK_ULONG,
    pub iterations: CK_ULONG,
    pub prf: CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE,
    pub pPrfData: CK_VOID_PTR,
    pub ulPrfDataLen: CK_ULONG,
    pub pPassword: CK_UTF8CHAR_PTR,
    pub ulPasswordLen: CK_ULONG_PTR,
}
impl ::std::default::Default for CK_PKCS5_PBKD2_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_PKCS5_PBKD2_PARAMS_PTR = *mut CK_PKCS5_PBKD2_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_JPAKEPublicValue {
    pub pGX: *mut CK_BYTE,
    pub ulGXLen: CK_ULONG,
    pub pGV: *mut CK_BYTE,
    pub ulGVLen: CK_ULONG,
    pub pR: *mut CK_BYTE,
    pub ulRLen: CK_ULONG,
}
impl ::std::default::Default for CK_NSS_JPAKEPublicValue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_JPAKERound1Params {
    pub gx1: CK_NSS_JPAKEPublicValue,
    pub gx2: CK_NSS_JPAKEPublicValue,
}
impl ::std::default::Default for CK_NSS_JPAKERound1Params {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_JPAKERound2Params {
    pub pSharedKey: *mut CK_BYTE,
    pub ulSharedKeyLen: CK_ULONG,
    pub gx3: CK_NSS_JPAKEPublicValue,
    pub gx4: CK_NSS_JPAKEPublicValue,
    pub A: CK_NSS_JPAKEPublicValue,
}
impl ::std::default::Default for CK_NSS_JPAKERound2Params {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_JPAKEFinalParams {
    pub B: CK_NSS_JPAKEPublicValue,
}
impl ::std::default::Default for CK_NSS_JPAKEFinalParams {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_MAC_CONSTANT_TIME_PARAMS {
    pub macAlg: CK_MECHANISM_TYPE,
    pub ulBodyTotalLen: CK_ULONG,
    pub pHeader: *mut CK_BYTE,
    pub ulHeaderLen: CK_ULONG,
}
impl ::std::default::Default for CK_NSS_MAC_CONSTANT_TIME_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_AEAD_PARAMS {
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceLen: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
    pub ulTagLen: CK_ULONG,
}
impl ::std::default::Default for CK_NSS_AEAD_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_HKDFParams {
    pub bExtract: CK_BBOOL,
    pub pSalt: CK_BYTE_PTR,
    pub ulSaltLen: CK_ULONG,
    pub bExpand: CK_BBOOL,
    pub pInfo: CK_BYTE_PTR,
    pub ulInfoLen: CK_ULONG,
}
impl ::std::default::Default for CK_NSS_HKDFParams {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_TLS_EXTENDED_MASTER_KEY_DERIVE_PARAMS {
    pub prfHashMechanism: CK_MECHANISM_TYPE,
    pub pSessionHash: CK_BYTE_PTR,
    pub ulSessionHashLen: CK_ULONG,
    pub pVersion: CK_VERSION_PTR,
}
impl ::std::default::Default for CK_NSS_TLS_EXTENDED_MASTER_KEY_DERIVE_PARAMS
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TRUST = CK_ULONG;
pub type __CKT_NSS_UNTRUSTED = CK_TRUST;
pub type __CKT_NSS_VALID = CK_TRUST;
pub type __CKT_NSS_MUST_VERIFY = CK_TRUST;
pub type SECMODModuleDBFunc =
    ::std::option::Option<unsafe extern "C" fn(function:
                                                   ::std::os::raw::c_ulong,
                                               parameters:
                                                   *mut ::std::os::raw::c_char,
                                               moduleSpec:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut *mut ::std::os::raw::c_char>;
pub type SECMODModule = SECMODModuleStr;
pub type SECMODModuleList = SECMODModuleListStr;
pub type SECMODListLock = NSSRWLock;
pub enum PK11SlotInfoStr { }
pub type PK11SlotInfo = PK11SlotInfoStr;
pub enum NSSUTILPreSlotInfoStr { }
pub type PK11PreSlotInfo = NSSUTILPreSlotInfoStr;
pub enum PK11SymKeyStr { }
pub type PK11SymKey = PK11SymKeyStr;
pub enum PK11ContextStr { }
pub type PK11Context = PK11ContextStr;
pub type PK11SlotList = PK11SlotListStr;
pub type PK11SlotListElement = PK11SlotListElementStr;
pub type PK11RSAGenParams = PK11RSAGenParamsStr;
pub type SECMODModuleID = ::std::os::raw::c_ulong;
pub type PK11DefaultArrayEntry = PK11DefaultArrayEntryStr;
pub enum PK11GenericObjectStr { }
pub type PK11GenericObject = PK11GenericObjectStr;
pub type PK11FreeDataFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECMODModuleStr {
    pub arena: *mut PLArenaPool,
    pub internal: PRBool,
    pub loaded: PRBool,
    pub isFIPS: PRBool,
    pub dllName: *mut ::std::os::raw::c_char,
    pub commonName: *mut ::std::os::raw::c_char,
    pub library: *mut ::std::os::raw::c_void,
    pub functionList: *mut ::std::os::raw::c_void,
    pub refLock: *mut PRLock,
    pub refCount: ::std::os::raw::c_int,
    pub slots: *mut *mut PK11SlotInfo,
    pub slotCount: ::std::os::raw::c_int,
    pub slotInfo: *mut PK11PreSlotInfo,
    pub slotInfoCount: ::std::os::raw::c_int,
    pub moduleID: SECMODModuleID,
    pub isThreadSafe: PRBool,
    pub ssl: [::std::os::raw::c_ulong; 2usize],
    pub libraryParams: *mut ::std::os::raw::c_char,
    pub moduleDBFunc: *mut ::std::os::raw::c_void,
    pub parent: *mut SECMODModule,
    pub isCritical: PRBool,
    pub isModuleDB: PRBool,
    pub moduleDBOnly: PRBool,
    pub trustOrder: ::std::os::raw::c_int,
    pub cipherOrder: ::std::os::raw::c_int,
    pub evControlMask: ::std::os::raw::c_ulong,
    pub cryptokiVersion: CK_VERSION,
}
impl ::std::default::Default for SECMODModuleStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECMODModuleListStr {
    pub next: *mut SECMODModuleList,
    pub module: *mut SECMODModule,
}
impl ::std::default::Default for SECMODModuleListStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11SlotListStr {
    pub head: *mut PK11SlotListElement,
    pub tail: *mut PK11SlotListElement,
    pub lock: *mut PRLock,
}
impl ::std::default::Default for PK11SlotListStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11SlotListElementStr {
    pub next: *mut PK11SlotListElement,
    pub prev: *mut PK11SlotListElement,
    pub slot: *mut PK11SlotInfo,
    pub refCount: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PK11SlotListElementStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11RSAGenParamsStr {
    pub keySizeInBits: ::std::os::raw::c_int,
    pub pe: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for PK11RSAGenParamsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11CertListType {
    PK11CertListUnique = 0,
    PK11CertListUser = 1,
    PK11CertListRootUnique = 2,
    PK11CertListCA = 3,
    PK11CertListCAUnique = 4,
    PK11CertListUserUnique = 5,
    PK11CertListAll = 6,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11DefaultArrayEntryStr {
    pub name: *const ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_ulong,
    pub mechanism: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for PK11DefaultArrayEntryStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PK11AttrFlags = PRUint32;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11Origin {
    PK11_OriginNULL = 0,
    PK11_OriginDerive = 1,
    PK11_OriginGenerated = 2,
    PK11_OriginFortezzaHack = 3,
    PK11_OriginUnwrap = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11DisableReasons {
    PK11_DIS_NONE = 0,
    PK11_DIS_USER_SELECTED = 1,
    PK11_DIS_COULD_NOT_INIT_TOKEN = 2,
    PK11_DIS_TOKEN_VERIFY_FAILED = 3,
    PK11_DIS_TOKEN_NOT_PRESENT = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11ObjectType {
    PK11_TypeGeneric = 0,
    PK11_TypePrivKey = 1,
    PK11_TypePubKey = 2,
    PK11_TypeCert = 3,
    PK11_TypeSymKey = 4,
}
pub type PK11PasswordFunc =
    ::std::option::Option<unsafe extern "C" fn(slot: *mut PK11SlotInfo,
                                               retry: PRBool,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_char>;
pub type PK11VerifyPasswordFunc =
    ::std::option::Option<unsafe extern "C" fn(slot: *mut PK11SlotInfo,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> PRBool>;
pub type PK11IsLoggedInFunc =
    ::std::option::Option<unsafe extern "C" fn(slot: *mut PK11SlotInfo,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> PRBool>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYAttributeStr {
    pub attrType: SECItem,
    pub attrValue: *mut *mut SECItem,
}
impl ::std::default::Default for SECKEYAttributeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYAttribute = SECKEYAttributeStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYPrivateKeyInfoStr {
    pub arena: *mut PLArenaPool,
    pub version: SECItem,
    pub algorithm: SECAlgorithmID,
    pub privateKey: SECItem,
    pub attributes: *mut *mut SECKEYAttribute,
}
impl ::std::default::Default for SECKEYPrivateKeyInfoStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYPrivateKeyInfo = SECKEYPrivateKeyInfoStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYEncryptedPrivateKeyInfoStr {
    pub arena: *mut PLArenaPool,
    pub algorithm: SECAlgorithmID,
    pub encryptedData: SECItem,
}
impl ::std::default::Default for SECKEYEncryptedPrivateKeyInfoStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYEncryptedPrivateKeyInfo = SECKEYEncryptedPrivateKeyInfoStr;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11TokenStatus {
    PK11TokenNotRemovable = 0,
    PK11TokenPresent = 1,
    PK11TokenChanged = 2,
    PK11TokenRemoved = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11TokenEvent {
    PK11TokenRemovedOrChangedEvent = 0,
    PK11TokenPresentEvent = 1,
}
pub type PK11MergeLog = PK11MergeLogStr;
pub type PK11MergeLogNode = PK11MergeLogNodeStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11MergeLogNodeStr {
    pub next: *mut PK11MergeLogNode,
    pub prev: *mut PK11MergeLogNode,
    pub object: *mut PK11GenericObject,
    pub error: ::std::os::raw::c_int,
    pub reserved1: CK_RV,
    pub reserved2: ::std::os::raw::c_ulong,
    pub reserved3: ::std::os::raw::c_ulong,
    pub reserved4: *mut ::std::os::raw::c_void,
    pub reserved5: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for PK11MergeLogNodeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11MergeLogStr {
    pub head: *mut PK11MergeLogNode,
    pub tail: *mut PK11MergeLogNode,
    pub arena: *mut PLArenaPool,
    pub version: ::std::os::raw::c_int,
    pub reserved1: ::std::os::raw::c_ulong,
    pub reserved2: ::std::os::raw::c_ulong,
    pub reserved3: ::std::os::raw::c_ulong,
    pub reserverd4: *mut ::std::os::raw::c_void,
    pub reserverd5: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for PK11MergeLogStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut SECOID_AlgorithmIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_AnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_BitStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_BMPStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_BooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_EnumeratedTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_GeneralizedTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_IA5StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_IntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_NullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_ObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_OctetStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PrintableStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_T61StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_UniversalStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_UTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_UTF8StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_VisibleStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToAnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToBitStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToBMPStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToBooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToEnumeratedTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToGeneralizedTimeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToIA5StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToIntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToNullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToOctetStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToPrintableStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToT61StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToUniversalStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToUTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToUTF8StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToVisibleStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfAnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfBitStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfBMPStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfBooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfEnumeratedTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfGeneralizedTimeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfIA5StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfIntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfNullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfOctetStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfPrintableStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfT61StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfUniversalStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfUTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfUTF8StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfVisibleStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfAnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfBitStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfBMPStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfBooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfEnumeratedTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfGeneralizedTimeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfIA5StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfIntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfNullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfOctetStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfPrintableStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfT61StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfUniversalStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfUTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfUTF8StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfVisibleStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SkipTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_PointerToEncryptedPrivateKeyInfoTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_EncryptedPrivateKeyInfoTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_PrivateKeyInfoTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_PointerToPrivateKeyInfoTemplate:
               [SEC_ASN1Template; 0usize];
}
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn PR_IntervalNow() -> PRIntervalTime;
    pub fn PR_TicksPerSecond() -> PRUint32;
    pub fn PR_SecondsToInterval(seconds: PRUint32) -> PRIntervalTime;
    pub fn PR_MillisecondsToInterval(milli: PRUint32) -> PRIntervalTime;
    pub fn PR_MicrosecondsToInterval(micro: PRUint32) -> PRIntervalTime;
    pub fn PR_IntervalToSeconds(ticks: PRIntervalTime) -> PRUint32;
    pub fn PR_IntervalToMilliseconds(ticks: PRIntervalTime) -> PRUint32;
    pub fn PR_IntervalToMicroseconds(ticks: PRIntervalTime) -> PRUint32;
    pub fn PR_NewMonitor() -> *mut PRMonitor;
    pub fn PR_DestroyMonitor(mon: *mut PRMonitor);
    pub fn PR_EnterMonitor(mon: *mut PRMonitor);
    pub fn PR_ExitMonitor(mon: *mut PRMonitor) -> PRStatus;
    pub fn PR_Wait(mon: *mut PRMonitor, ticks: PRIntervalTime) -> PRStatus;
    pub fn PR_Notify(mon: *mut PRMonitor) -> PRStatus;
    pub fn PR_NotifyAll(mon: *mut PRMonitor) -> PRStatus;
    pub fn PR_AssertCurrentThreadInMonitor(mon: *mut PRMonitor);
    pub fn PR_NewLock() -> *mut PRLock;
    pub fn PR_DestroyLock(lock: *mut PRLock);
    pub fn PR_Lock(lock: *mut PRLock);
    pub fn PR_Unlock(lock: *mut PRLock) -> PRStatus;
    pub fn PR_AssertCurrentThreadOwnsLock(lock: *mut PRLock);
    pub fn PR_NewCondVar(lock: *mut PRLock) -> *mut PRCondVar;
    pub fn PR_DestroyCondVar(cvar: *mut PRCondVar);
    pub fn PR_WaitCondVar(cvar: *mut PRCondVar, timeout: PRIntervalTime)
     -> PRStatus;
    pub fn PR_NotifyCondVar(cvar: *mut PRCondVar) -> PRStatus;
    pub fn PR_NotifyAllCondVar(cvar: *mut PRCondVar) -> PRStatus;
    pub fn PL_InitArenaPool(pool: *mut PLArenaPool,
                            name: *const ::std::os::raw::c_char,
                            size: PRUint32, align: PRUint32);
    pub fn PL_ArenaFinish();
    pub fn PL_FreeArenaPool(pool: *mut PLArenaPool);
    pub fn PL_FinishArenaPool(pool: *mut PLArenaPool);
    pub fn PL_CompactArenaPool(pool: *mut PLArenaPool);
    pub fn PL_ArenaAllocate(pool: *mut PLArenaPool, nb: PRUint32)
     -> *mut ::std::os::raw::c_void;
    pub fn PL_ArenaGrow(pool: *mut PLArenaPool,
                        p: *mut ::std::os::raw::c_void, size: PRUint32,
                        incr: PRUint32) -> *mut ::std::os::raw::c_void;
    pub fn PL_ArenaRelease(pool: *mut PLArenaPool,
                           mark: *mut ::std::os::raw::c_char);
    pub fn PL_ClearArenaPool(pool: *mut PLArenaPool, pattern: PRInt32);
    pub fn PL_SizeOfArenaPoolExcludingPool(pool: *const PLArenaPool,
                                           mallocSizeOf: PLMallocSizeFn)
     -> size_t;
    pub fn PR_SetLibraryPath(path: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_GetLibraryPath() -> *mut ::std::os::raw::c_char;
    pub fn PR_GetLibraryName(dir: *const ::std::os::raw::c_char,
                             lib: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_FreeLibraryName(mem: *mut ::std::os::raw::c_char);
    pub fn PR_LoadLibrary(name: *const ::std::os::raw::c_char)
     -> *mut PRLibrary;
    pub fn PR_LoadLibraryWithFlags(libSpec: PRLibSpec, flags: PRIntn)
     -> *mut PRLibrary;
    pub fn PR_UnloadLibrary(lib: *mut PRLibrary) -> PRStatus;
    pub fn PR_FindSymbol(lib: *mut PRLibrary,
                         name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_FindFunctionSymbol(lib: *mut PRLibrary,
                                 name: *const ::std::os::raw::c_char)
     -> PRFuncPtr;
    pub fn PR_FindSymbolAndLibrary(name: *const ::std::os::raw::c_char,
                                   lib: *mut *mut PRLibrary)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_FindFunctionSymbolAndLibrary(name:
                                               *const ::std::os::raw::c_char,
                                           lib: *mut *mut PRLibrary)
     -> PRFuncPtr;
    pub fn PR_LoadStaticLibrary(name: *const ::std::os::raw::c_char,
                                table: *const PRStaticLinkTable)
     -> *mut PRLibrary;
    pub fn PR_GetLibraryFilePathname(name: *const ::std::os::raw::c_char,
                                     addr: PRFuncPtr)
     -> *mut ::std::os::raw::c_char;
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: size_t)
     -> ::std::os::raw::c_int;
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut random_data, __result: *mut int32_t)
     -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut ::std::os::raw::c_double,
                      __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn PR_NewLogModule(name: *const ::std::os::raw::c_char)
     -> *mut PRLogModuleInfo;
    pub fn PR_SetLogFile(name: *const ::std::os::raw::c_char) -> PRBool;
    pub fn PR_SetLogBuffering(buffer_size: PRIntn);
    pub fn PR_LogPrint(fmt: *const ::std::os::raw::c_char, ...);
    pub fn PR_LogFlush();
    pub fn PR_Assert(s: *const ::std::os::raw::c_char,
                     file: *const ::std::os::raw::c_char, ln: PRIntn);
    pub fn PL_strlen(str: *const ::std::os::raw::c_char) -> PRUint32;
    pub fn PL_strnlen(str: *const ::std::os::raw::c_char, max: PRUint32)
     -> PRUint32;
    pub fn PL_strcpy(dest: *mut ::std::os::raw::c_char,
                     src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncpy(dest: *mut ::std::os::raw::c_char,
                      src: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncpyz(dest: *mut ::std::os::raw::c_char,
                       src: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strfree(s: *mut ::std::os::raw::c_char);
    pub fn PL_strndup(s: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcat(dst: *mut ::std::os::raw::c_char,
                     src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncat(dst: *mut ::std::os::raw::c_char,
                      src: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcatn(dst: *mut ::std::os::raw::c_char, max: PRUint32,
                      src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcmp(a: *const ::std::os::raw::c_char,
                     b: *const ::std::os::raw::c_char) -> PRIntn;
    pub fn PL_strncmp(a: *const ::std::os::raw::c_char,
                      b: *const ::std::os::raw::c_char, max: PRUint32)
     -> PRIntn;
    pub fn PL_strcasecmp(a: *const ::std::os::raw::c_char,
                         b: *const ::std::os::raw::c_char) -> PRIntn;
    pub fn PL_strncasecmp(a: *const ::std::os::raw::c_char,
                          b: *const ::std::os::raw::c_char, max: PRUint32)
     -> PRIntn;
    pub fn PL_strchr(s: *const ::std::os::raw::c_char,
                     c: ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strrchr(s: *const ::std::os::raw::c_char,
                      c: ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnchr(s: *const ::std::os::raw::c_char,
                      c: ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnrchr(s: *const ::std::os::raw::c_char,
                       c: ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strpbrk(s: *const ::std::os::raw::c_char,
                      list: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strprbrk(s: *const ::std::os::raw::c_char,
                       list: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnpbrk(s: *const ::std::os::raw::c_char,
                       list: *const ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnprbrk(s: *const ::std::os::raw::c_char,
                        list: *const ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strstr(big: *const ::std::os::raw::c_char,
                     little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strrstr(big: *const ::std::os::raw::c_char,
                      little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnstr(big: *const ::std::os::raw::c_char,
                      little: *const ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnrstr(big: *const ::std::os::raw::c_char,
                       little: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcasestr(big: *const ::std::os::raw::c_char,
                         little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcaserstr(big: *const ::std::os::raw::c_char,
                          little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncasestr(big: *const ::std::os::raw::c_char,
                          little: *const ::std::os::raw::c_char,
                          max: PRUint32) -> *mut ::std::os::raw::c_char;
    pub fn PL_strncaserstr(big: *const ::std::os::raw::c_char,
                           little: *const ::std::os::raw::c_char,
                           max: PRUint32) -> *mut ::std::os::raw::c_char;
    pub fn PL_strtok_r(s1: *mut ::std::os::raw::c_char,
                       s2: *const ::std::os::raw::c_char,
                       lasts: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PORT_Alloc(len: size_t) -> *mut ::std::os::raw::c_void;
    pub fn PORT_Realloc(old: *mut ::std::os::raw::c_void, len: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ZAlloc(len: size_t) -> *mut ::std::os::raw::c_void;
    pub fn PORT_Free(ptr: *mut ::std::os::raw::c_void);
    pub fn PORT_ZFree(ptr: *mut ::std::os::raw::c_void, len: size_t);
    pub fn PORT_Strdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PORT_SetError(value: ::std::os::raw::c_int);
    pub fn PORT_GetError() -> ::std::os::raw::c_int;
    pub fn PORT_NewArena(chunksize: ::std::os::raw::c_ulong)
     -> *mut PLArenaPool;
    pub fn PORT_FreeArena(arena: *mut PLArenaPool, zero: PRBool);
    pub fn PORT_InitCheapArena(arena: *mut PORTCheapArenaPool,
                               chunksize: ::std::os::raw::c_ulong);
    pub fn PORT_DestroyCheapArena(arena: *mut PORTCheapArenaPool);
    pub fn PORT_ArenaAlloc(arena: *mut PLArenaPool, size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaZAlloc(arena: *mut PLArenaPool, size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaGrow(arena: *mut PLArenaPool,
                          ptr: *mut ::std::os::raw::c_void, oldsize: size_t,
                          newsize: size_t) -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaMark(arena: *mut PLArenaPool)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaRelease(arena: *mut PLArenaPool,
                             mark: *mut ::std::os::raw::c_void);
    pub fn PORT_ArenaZRelease(arena: *mut PLArenaPool,
                              mark: *mut ::std::os::raw::c_void);
    pub fn PORT_ArenaUnmark(arena: *mut PLArenaPool,
                            mark: *mut ::std::os::raw::c_void);
    pub fn PORT_ArenaStrdup(arena: *mut PLArenaPool,
                            str: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PORT_SetUCS4_UTF8ConversionFunction(convFunc:
                                                   PORTCharConversionFunc);
    pub fn PORT_SetUCS2_ASCIIConversionFunction(convFunc:
                                                    PORTCharConversionWSwapFunc);
    pub fn PORT_UCS4_UTF8Conversion(toUnicode: PRBool,
                                    inBuf: *mut ::std::os::raw::c_uchar,
                                    inBufLen: ::std::os::raw::c_uint,
                                    outBuf: *mut ::std::os::raw::c_uchar,
                                    maxOutBufLen: ::std::os::raw::c_uint,
                                    outBufLen: *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn PORT_UCS2_ASCIIConversion(toUnicode: PRBool,
                                     inBuf: *mut ::std::os::raw::c_uchar,
                                     inBufLen: ::std::os::raw::c_uint,
                                     outBuf: *mut ::std::os::raw::c_uchar,
                                     maxOutBufLen: ::std::os::raw::c_uint,
                                     outBufLen: *mut ::std::os::raw::c_uint,
                                     swapBytes: PRBool) -> PRBool;
    pub fn PORT_SetUCS2_UTF8ConversionFunction(convFunc:
                                                   PORTCharConversionFunc);
    pub fn PORT_UCS2_UTF8Conversion(toUnicode: PRBool,
                                    inBuf: *mut ::std::os::raw::c_uchar,
                                    inBufLen: ::std::os::raw::c_uint,
                                    outBuf: *mut ::std::os::raw::c_uchar,
                                    maxOutBufLen: ::std::os::raw::c_uint,
                                    outBufLen: *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn PORT_ISO88591_UTF8Conversion(inBuf: *const ::std::os::raw::c_uchar,
                                        inBufLen: ::std::os::raw::c_uint,
                                        outBuf: *mut ::std::os::raw::c_uchar,
                                        maxOutBufLen: ::std::os::raw::c_uint,
                                        outBufLen:
                                            *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn sec_port_ucs4_utf8_conversion_function(toUnicode: PRBool,
                                                  inBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  inBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  maxOutBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBufLen:
                                                      *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn sec_port_ucs2_utf8_conversion_function(toUnicode: PRBool,
                                                  inBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  inBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  maxOutBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBufLen:
                                                      *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn sec_port_iso88591_utf8_conversion_function(inBuf:
                                                          *const ::std::os::raw::c_uchar,
                                                      inBufLen:
                                                          ::std::os::raw::c_uint,
                                                      outBuf:
                                                          *mut ::std::os::raw::c_uchar,
                                                      maxOutBufLen:
                                                          ::std::os::raw::c_uint,
                                                      outBufLen:
                                                          *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn NSS_PutEnv(envVarName: *const ::std::os::raw::c_char,
                      envValue: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn NSS_SecureMemcmp(a: *const ::std::os::raw::c_void,
                            b: *const ::std::os::raw::c_void, n: size_t)
     -> ::std::os::raw::c_int;
    pub fn PORT_LoadLibraryFromOrigin(existingShLibName:
                                          *const ::std::os::raw::c_char,
                                      staticShLibFunc: PRFuncPtr,
                                      newShLibName:
                                          *const ::std::os::raw::c_char)
     -> *mut PRLibrary;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn PL_NewHashTable(numBuckets: PRUint32, keyHash: PLHashFunction,
                           keyCompare: PLHashComparator,
                           valueCompare: PLHashComparator,
                           allocOps: *const PLHashAllocOps,
                           allocPriv: *mut ::std::os::raw::c_void)
     -> *mut PLHashTable;
    pub fn PL_HashTableDestroy(ht: *mut PLHashTable);
    pub fn PL_HashTableAdd(ht: *mut PLHashTable,
                           key: *const ::std::os::raw::c_void,
                           value: *mut ::std::os::raw::c_void)
     -> *mut PLHashEntry;
    pub fn PL_HashTableRemove(ht: *mut PLHashTable,
                              key: *const ::std::os::raw::c_void) -> PRBool;
    pub fn PL_HashTableLookup(ht: *mut PLHashTable,
                              key: *const ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn PL_HashTableLookupConst(ht: *mut PLHashTable,
                                   key: *const ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn PL_HashTableEnumerateEntries(ht: *mut PLHashTable,
                                        f: PLHashEnumerator,
                                        arg: *mut ::std::os::raw::c_void)
     -> PRIntn;
    pub fn PL_HashString(key: *const ::std::os::raw::c_void) -> PLHashNumber;
    pub fn PL_CompareStrings(v1: *const ::std::os::raw::c_void,
                             v2: *const ::std::os::raw::c_void) -> PRIntn;
    pub fn PL_CompareValues(v1: *const ::std::os::raw::c_void,
                            v2: *const ::std::os::raw::c_void) -> PRIntn;
    pub fn PL_HashTableRawLookup(ht: *mut PLHashTable, keyHash: PLHashNumber,
                                 key: *const ::std::os::raw::c_void)
     -> *mut *mut PLHashEntry;
    pub fn PL_HashTableRawLookupConst(ht: *mut PLHashTable,
                                      keyHash: PLHashNumber,
                                      key: *const ::std::os::raw::c_void)
     -> *mut *mut PLHashEntry;
    pub fn PL_HashTableRawAdd(ht: *mut PLHashTable,
                              hep: *mut *mut PLHashEntry,
                              keyHash: PLHashNumber,
                              key: *const ::std::os::raw::c_void,
                              value: *mut ::std::os::raw::c_void)
     -> *mut PLHashEntry;
    pub fn PL_HashTableRawRemove(ht: *mut PLHashTable,
                                 hep: *mut *mut PLHashEntry,
                                 he: *mut PLHashEntry);
    pub fn PL_HashTableDump(ht: *mut PLHashTable, dump: PLHashEnumerator,
                            fp: *mut FILE) -> PRIntn;
    pub fn SECITEM_AllocItem(arena: *mut PLArenaPool, item: *mut SECItem,
                             len: ::std::os::raw::c_uint) -> *mut SECItem;
    pub fn SECITEM_ReallocItem(arena: *mut PLArenaPool, item: *mut SECItem,
                               oldlen: ::std::os::raw::c_uint,
                               newlen: ::std::os::raw::c_uint) -> SECStatus;
    pub fn SECITEM_ReallocItemV2(arena: *mut PLArenaPool, item: *mut SECItem,
                                 newlen: ::std::os::raw::c_uint) -> SECStatus;
    pub fn SECITEM_CompareItem(a: *const SECItem, b: *const SECItem)
     -> SECComparison;
    pub fn SECITEM_ItemsAreEqual(a: *const SECItem, b: *const SECItem)
     -> PRBool;
    pub fn SECITEM_CopyItem(arena: *mut PLArenaPool, to: *mut SECItem,
                            from: *const SECItem) -> SECStatus;
    pub fn SECITEM_DupItem(from: *const SECItem) -> *mut SECItem;
    pub fn SECITEM_ArenaDupItem(arena: *mut PLArenaPool, from: *const SECItem)
     -> *mut SECItem;
    pub fn SECITEM_FreeItem(zap: *mut SECItem, freeit: PRBool);
    pub fn SECITEM_ZfreeItem(zap: *mut SECItem, freeit: PRBool);
    pub fn SECITEM_Hash(key: *const ::std::os::raw::c_void) -> PLHashNumber;
    pub fn SECITEM_HashCompare(k1: *const ::std::os::raw::c_void,
                               k2: *const ::std::os::raw::c_void) -> PRIntn;
    pub fn SECITEM_AllocArray(arena: *mut PLArenaPool,
                              array: *mut SECItemArray,
                              len: ::std::os::raw::c_uint)
     -> *mut SECItemArray;
    pub fn SECITEM_DupArray(arena: *mut PLArenaPool,
                            from: *const SECItemArray) -> *mut SECItemArray;
    pub fn SECITEM_FreeArray(array: *mut SECItemArray, freeit: PRBool);
    pub fn SECITEM_ZfreeArray(array: *mut SECItemArray, freeit: PRBool);
    pub fn NSS_Get_SECOID_AlgorithmIDTemplate(arg:
                                                  *mut ::std::os::raw::c_void,
                                              enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn SECOID_FindOID(oid: *const SECItem) -> *mut SECOidData;
    pub fn SECOID_FindOIDTag(oid: *const SECItem) -> SECOidTag;
    pub fn SECOID_FindOIDByTag(tagnum: SECOidTag) -> *mut SECOidData;
    pub fn SECOID_FindOIDByMechanism(mechanism: ::std::os::raw::c_ulong)
     -> *mut SECOidData;
    pub fn SECOID_SetAlgorithmID(arena: *mut PLArenaPool,
                                 aid: *mut SECAlgorithmID, tag: SECOidTag,
                                 params: *mut SECItem) -> SECStatus;
    pub fn SECOID_CopyAlgorithmID(arena: *mut PLArenaPool,
                                  dest: *mut SECAlgorithmID,
                                  src: *const SECAlgorithmID) -> SECStatus;
    pub fn SECOID_GetAlgorithmTag(aid: *const SECAlgorithmID) -> SECOidTag;
    pub fn SECOID_DestroyAlgorithmID(aid: *mut SECAlgorithmID,
                                     freeit: PRBool);
    pub fn SECOID_CompareAlgorithmID(a: *mut SECAlgorithmID,
                                     b: *mut SECAlgorithmID) -> SECComparison;
    pub fn SECOID_KnownCertExtenOID(extenOid: *mut SECItem) -> PRBool;
    pub fn SECOID_FindOIDTagDescription(tagnum: SECOidTag)
     -> *const ::std::os::raw::c_char;
    pub fn SECOID_AddEntry(src: *const SECOidData) -> SECOidTag;
    pub fn SECOID_Init() -> SECStatus;
    pub fn SECOID_Shutdown() -> SECStatus;
    pub fn SEC_StringToOID(pool: *mut PLArenaPool, to: *mut SECItem,
                           from: *const ::std::os::raw::c_char, len: PRUint32)
     -> SECStatus;
    pub fn UTIL_SetForkState(forked: PRBool);
    pub fn NSS_GetAlgorithmPolicy(tag: SECOidTag, pValue: *mut PRUint32)
     -> SECStatus;
    pub fn NSS_SetAlgorithmPolicy(tag: SECOidTag, setBits: PRUint32,
                                  clearBits: PRUint32) -> SECStatus;
    pub fn SEC_ASN1DecoderStart(pool: *mut PLArenaPool,
                                dest: *mut ::std::os::raw::c_void,
                                t: *const SEC_ASN1Template)
     -> *mut SEC_ASN1DecoderContext;
    pub fn SEC_ASN1DecoderUpdate(cx: *mut SEC_ASN1DecoderContext,
                                 buf: *const ::std::os::raw::c_char,
                                 len: ::std::os::raw::c_ulong) -> SECStatus;
    pub fn SEC_ASN1DecoderFinish(cx: *mut SEC_ASN1DecoderContext)
     -> SECStatus;
    pub fn SEC_ASN1DecoderAbort(cx: *mut SEC_ASN1DecoderContext,
                                error: ::std::os::raw::c_int);
    pub fn SEC_ASN1DecoderSetFilterProc(cx: *mut SEC_ASN1DecoderContext,
                                        fn_: SEC_ASN1WriteProc,
                                        arg: *mut ::std::os::raw::c_void,
                                        no_store: PRBool);
    pub fn SEC_ASN1DecoderClearFilterProc(cx: *mut SEC_ASN1DecoderContext);
    pub fn SEC_ASN1DecoderSetNotifyProc(cx: *mut SEC_ASN1DecoderContext,
                                        fn_: SEC_ASN1NotifyProc,
                                        arg: *mut ::std::os::raw::c_void);
    pub fn SEC_ASN1DecoderClearNotifyProc(cx: *mut SEC_ASN1DecoderContext);
    pub fn SEC_ASN1Decode(pool: *mut PLArenaPool,
                          dest: *mut ::std::os::raw::c_void,
                          t: *const SEC_ASN1Template,
                          buf: *const ::std::os::raw::c_char,
                          len: ::std::os::raw::c_long) -> SECStatus;
    pub fn SEC_ASN1DecodeItem(pool: *mut PLArenaPool,
                              dest: *mut ::std::os::raw::c_void,
                              t: *const SEC_ASN1Template, src: *const SECItem)
     -> SECStatus;
    pub fn SEC_QuickDERDecodeItem(arena: *mut PLArenaPool,
                                  dest: *mut ::std::os::raw::c_void,
                                  templateEntry: *const SEC_ASN1Template,
                                  src: *const SECItem) -> SECStatus;
    pub fn SEC_ASN1EncoderStart(src: *const ::std::os::raw::c_void,
                                t: *const SEC_ASN1Template,
                                fn_: SEC_ASN1WriteProc,
                                output_arg: *mut ::std::os::raw::c_void)
     -> *mut SEC_ASN1EncoderContext;
    pub fn SEC_ASN1EncoderUpdate(cx: *mut SEC_ASN1EncoderContext,
                                 buf: *const ::std::os::raw::c_char,
                                 len: ::std::os::raw::c_ulong) -> SECStatus;
    pub fn SEC_ASN1EncoderFinish(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderAbort(cx: *mut SEC_ASN1EncoderContext,
                                error: ::std::os::raw::c_int);
    pub fn SEC_ASN1EncoderSetNotifyProc(cx: *mut SEC_ASN1EncoderContext,
                                        fn_: SEC_ASN1NotifyProc,
                                        arg: *mut ::std::os::raw::c_void);
    pub fn SEC_ASN1EncoderClearNotifyProc(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderSetStreaming(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderClearStreaming(cx: *mut SEC_ASN1EncoderContext);
    pub fn sec_ASN1EncoderSetDER(cx: *mut SEC_ASN1EncoderContext);
    pub fn sec_ASN1EncoderClearDER(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderSetTakeFromBuf(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderClearTakeFromBuf(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1Encode(src: *const ::std::os::raw::c_void,
                          t: *const SEC_ASN1Template,
                          output_proc: SEC_ASN1WriteProc,
                          output_arg: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn SEC_ASN1EncodeItem(pool: *mut PLArenaPool, dest: *mut SECItem,
                              src: *const ::std::os::raw::c_void,
                              t: *const SEC_ASN1Template) -> *mut SECItem;
    pub fn SEC_ASN1EncodeInteger(pool: *mut PLArenaPool, dest: *mut SECItem,
                                 value: ::std::os::raw::c_long)
     -> *mut SECItem;
    pub fn SEC_ASN1EncodeUnsignedInteger(pool: *mut PLArenaPool,
                                         dest: *mut SECItem,
                                         value: ::std::os::raw::c_ulong)
     -> *mut SECItem;
    pub fn SEC_ASN1DecodeInteger(src: *mut SECItem,
                                 value: *mut ::std::os::raw::c_ulong)
     -> SECStatus;
    pub fn SEC_ASN1LengthLength(len: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn SEC_ASN1EncodeLength(buf: *mut ::std::os::raw::c_uchar,
                                value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn SEC_ASN1GetSubtemplate(inTemplate: *const SEC_ASN1Template,
                                  thing: *mut ::std::os::raw::c_void,
                                  encoding: PRBool)
     -> *const SEC_ASN1Template;
    pub fn SEC_ASN1IsTemplateSimple(theTemplate: *const SEC_ASN1Template)
     -> PRBool;
    pub fn NSS_Get_SEC_AnyTemplate(arg: *mut ::std::os::raw::c_void,
                                   enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_BMPStringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_BooleanTemplate(arg: *mut ::std::os::raw::c_void,
                                       enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_BitStringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_GeneralizedTimeTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_IA5StringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_IntegerTemplate(arg: *mut ::std::os::raw::c_void,
                                       enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_NullTemplate(arg: *mut ::std::os::raw::c_void,
                                    enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_ObjectIDTemplate(arg: *mut ::std::os::raw::c_void,
                                        enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_OctetStringTemplate(arg: *mut ::std::os::raw::c_void,
                                           enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_UTCTimeTemplate(arg: *mut ::std::os::raw::c_void,
                                       enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_UTF8StringTemplate(arg: *mut ::std::os::raw::c_void,
                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToAnyTemplate(arg: *mut ::std::os::raw::c_void,
                                            enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToOctetStringTemplate(arg:
                                                        *mut ::std::os::raw::c_void,
                                                    enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SetOfAnyTemplate(arg: *mut ::std::os::raw::c_void,
                                        enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_EnumeratedTemplate(arg: *mut ::std::os::raw::c_void,
                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToEnumeratedTemplate(arg:
                                                       *mut ::std::os::raw::c_void,
                                                   enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SequenceOfAnyTemplate(arg: *mut ::std::os::raw::c_void,
                                             enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SequenceOfObjectIDTemplate(arg:
                                                      *mut ::std::os::raw::c_void,
                                                  enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SkipTemplate(arg: *mut ::std::os::raw::c_void,
                                    enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_UniversalStringTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PrintableStringTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_T61StringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToGeneralizedTimeTemplate(arg:
                                                            *mut ::std::os::raw::c_void,
                                                        enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_PointerToEncryptedPrivateKeyInfoTemplate(arg:
                                                                       *mut ::std::os::raw::c_void,
                                                                   enc:
                                                                       PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_EncryptedPrivateKeyInfoTemplate(arg:
                                                              *mut ::std::os::raw::c_void,
                                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_PrivateKeyInfoTemplate(arg:
                                                     *mut ::std::os::raw::c_void,
                                                 enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_PointerToPrivateKeyInfoTemplate(arg:
                                                              *mut ::std::os::raw::c_void,
                                                          enc: PRBool)
     -> *const SEC_ASN1Template;
}
