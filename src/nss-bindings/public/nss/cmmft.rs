/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: ::std::os::raw::c_double,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRUint8 = ::std::os::raw::c_uchar;
pub type PRInt8 = ::std::os::raw::c_char;
pub type PRUint16 = ::std::os::raw::c_ushort;
pub type PRInt16 = ::std::os::raw::c_short;
pub type PRUint32 = ::std::os::raw::c_uint;
pub type PRInt32 = ::std::os::raw::c_int;
pub type PRInt64 = ::std::os::raw::c_long;
pub type PRUint64 = ::std::os::raw::c_ulong;
pub type PRIntn = ::std::os::raw::c_int;
pub type PRUintn = ::std::os::raw::c_uint;
pub type PRFloat64 = ::std::os::raw::c_double;
pub type PRSize = size_t;
pub type PROffset32 = PRInt32;
pub type PROffset64 = PRInt64;
pub type PRPtrdiff = ptrdiff_t;
pub type PRUptrdiff = ::std::os::raw::c_ulong;
pub type PRBool = PRIntn;
pub type PRPackedBool = PRUint8;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum PRStatus { PR_FAILURE = -1, PR_SUCCESS = 0, }
pub type PRUnichar = PRUint16;
pub type PRWord = ::std::os::raw::c_long;
pub type PRUword = ::std::os::raw::c_ulong;
pub type uintn = PRUintn;
pub type intn = PRIntn;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uint64 = PRUint64;
pub type uint32 = PRUint32;
pub type uint16 = PRUint16;
pub type uint8 = PRUint8;
pub type int64 = PRInt64;
pub type int32 = PRInt32;
pub type int16 = PRInt16;
pub type int8 = PRInt8;
pub type float64 = PRFloat64;
pub type uptrdiff_t = PRUptrdiff;
pub type uprword_t = PRUword;
pub type prword_t = PRWord;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLArena {
    pub next: *mut PLArena,
    pub base: PRUword,
    pub limit: PRUword,
    pub avail: PRUword,
}
impl ::std::default::Default for PLArena {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLArenaPool {
    pub first: PLArena,
    pub current: *mut PLArena,
    pub arenasize: PRUint32,
    pub mask: PRUword,
}
impl ::std::default::Default for PLArenaPool {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PLMallocSizeFn =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *const ::std::os::raw::c_void)
                              -> size_t>;
pub enum PRLibrary { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRStaticLinkTable {
    pub name: *const ::std::os::raw::c_char,
    pub fp: ::std::option::Option<extern "C" fn()>,
}
impl ::std::default::Default for PRStaticLinkTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRLibSpecType {
    PR_LibSpec_Pathname = 0,
    PR_LibSpec_MacNamedFragment = 1,
    PR_LibSpec_MacIndexedFragment = 2,
    PR_LibSpec_PathnameU = 3,
}
pub enum FSSpec { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRLibSpec {
    pub type_: PRLibSpecType,
    pub value: Union_Unnamed3,
}
impl ::std::default::Default for PRLibSpec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed3 {
    pub unsafe fn pathname(&mut self) -> *mut *const ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mac_named_fragment(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mac_indexed_fragment(&mut self) -> *mut Struct_Unnamed5 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pathname_u(&mut self) -> *mut *const PRUnichar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed4 {
    pub fsspec: *const FSSpec,
    pub name: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed5 {
    pub fsspec: *const FSSpec,
    pub index: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRFuncPtr = ::std::option::Option<extern "C" fn()>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed6 {
    _ISupper = 256,
    _ISlower = 512,
    _ISalpha = 1024,
    _ISdigit = 2048,
    _ISxdigit = 4096,
    _ISspace = 8192,
    _ISprint = 16384,
    _ISgraph = 32768,
    _ISblank = 1,
    _IScntrl = 2,
    _ISpunct = 4,
    _ISalnum = 8,
}
pub enum __locale_data { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::default::Default for __locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed7 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed8 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __WAIT_STATUS {
    pub _bindgen_data_: [u64; 1usize],
}
impl __WAIT_STATUS {
    pub unsafe fn __uptr(&mut self) -> *mut *mut wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for __WAIT_STATUS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub const PR_LOG_NOTICE: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
pub const PR_LOG_WARN: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_WARNING;
pub const PR_LOG_MIN: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
pub const PR_LOG_MAX: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRLogModuleLevel {
    PR_LOG_NONE = 0,
    PR_LOG_ALWAYS = 1,
    PR_LOG_ERROR = 2,
    PR_LOG_WARNING = 3,
    PR_LOG_DEBUG = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRLogModuleInfo {
    pub name: *const ::std::os::raw::c_char,
    pub level: PRLogModuleLevel,
    pub next: *mut PRLogModuleInfo,
}
impl ::std::default::Default for PRLogModuleInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PORTCheapArenaPool_str {
    pub arena: PLArenaPool,
    pub magic: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PORTCheapArenaPool_str {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PORTCheapArenaPool = PORTCheapArenaPool_str;
pub type PORTCharConversionWSwapFunc =
    ::std::option::Option<unsafe extern "C" fn(toUnicode: PRBool,
                                               inBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               inBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               maxOutBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBufLen:
                                                   *mut ::std::os::raw::c_uint,
                                               swapBytes: PRBool) -> PRBool>;
pub type PORTCharConversionFunc =
    ::std::option::Option<unsafe extern "C" fn(toUnicode: PRBool,
                                               inBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               inBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               maxOutBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBufLen:
                                                   *mut ::std::os::raw::c_uint)
                              -> PRBool>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECItemType {
    siBuffer = 0,
    siClearDataBuffer = 1,
    siCipherDataBuffer = 2,
    siDERCertBuffer = 3,
    siEncodedCertBuffer = 4,
    siDERNameBuffer = 5,
    siEncodedNameBuffer = 6,
    siAsciiNameString = 7,
    siAsciiString = 8,
    siDEROID = 9,
    siUnsignedInteger = 10,
    siUTCTime = 11,
    siGeneralizedTime = 12,
    siVisibleString = 13,
    siUTF8String = 14,
    siBMPString = 15,
}
pub type SECItem = SECItemStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECItemStr {
    pub type_: SECItemType,
    pub data: *mut ::std::os::raw::c_uchar,
    pub len: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SECItemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECItemArray = SECItemArrayStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECItemArrayStr {
    pub items: *mut SECItem,
    pub len: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SECItemArrayStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum _SECStatus { SECWouldBlock = -2, SECFailure = -1, SECSuccess = 0, }
pub type SECStatus = _SECStatus;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum _SECComparison {
    SECLessThan = -1,
    SECEqual = 0,
    SECGreaterThan = 1,
}
pub type SECComparison = _SECComparison;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_ASN1Template_struct {
    pub kind: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
    pub sub: *const ::std::os::raw::c_void,
    pub size: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for sec_ASN1Template_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SEC_ASN1Template = sec_ASN1Template_struct;
pub type SEC_ASN1TemplateChooser =
    unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void, enc: PRBool)
        -> *const SEC_ASN1Template;
pub type SEC_ASN1TemplateChooserPtr = *mut SEC_ASN1TemplateChooser;
pub enum sec_DecoderContext_struct { }
pub type SEC_ASN1DecoderContext = sec_DecoderContext_struct;
pub enum sec_EncoderContext_struct { }
pub type SEC_ASN1EncoderContext = sec_EncoderContext_struct;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SEC_ASN1EncodingPart {
    SEC_ASN1_Identifier = 0,
    SEC_ASN1_Length = 1,
    SEC_ASN1_Contents = 2,
    SEC_ASN1_EndOfContents = 3,
}
pub type SEC_ASN1NotifyProc =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               before: PRBool,
                                               dest:
                                                   *mut ::std::os::raw::c_void,
                                               real_depth:
                                                   ::std::os::raw::c_int)>;
pub type SEC_ASN1WriteProc =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               data:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_ulong,
                                               depth: ::std::os::raw::c_int,
                                               data_kind:
                                                   SEC_ASN1EncodingPart)>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CMMFCertOrEncCertChoice {
    cmmfNoCertOrEncCert = 0,
    cmmfCertificate = 1,
    cmmfEncryptedCert = 2,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum CMMFPKIStatus {
    cmmfNoPKIStatus = -1,
    cmmfGranted = 0,
    cmmfGrantedWithMods = 1,
    cmmfRejection = 2,
    cmmfWaiting = 3,
    cmmfRevocationWarning = 4,
    cmmfRevocationNotification = 5,
    cmmfKeyUpdateWarning = 6,
    cmmfNumPKIStatus = 7,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CMMFPKIFailureInfo {
    cmmfBadAlg = 0,
    cmmfBadMessageCheck = 1,
    cmmfBadRequest = 2,
    cmmfBadTime = 3,
    cmmfBadCertId = 4,
    cmmfBadDataFormat = 5,
    cmmfWrongAuthority = 6,
    cmmfIncorrectData = 7,
    cmmfMissingTimeStamp = 8,
    cmmfNoFailureInfo = 9,
}
pub enum CMMFPKIStatusInfoStr { }
pub type CMMFPKIStatusInfo = CMMFPKIStatusInfoStr;
pub enum CMMFCertOrEncCertStr { }
pub type CMMFCertOrEncCert = CMMFCertOrEncCertStr;
pub enum CMMFCertifiedKeyPairStr { }
pub type CMMFCertifiedKeyPair = CMMFCertifiedKeyPairStr;
pub enum CMMFCertResponseStr { }
pub type CMMFCertResponse = CMMFCertResponseStr;
pub enum CMMFCertResponseSeqStr { }
pub type CMMFCertResponseSeq = CMMFCertResponseSeqStr;
pub enum CMMFPOPODecKeyChallContentStr { }
pub type CMMFPOPODecKeyChallContent = CMMFPOPODecKeyChallContentStr;
pub enum CMMFChallengeStr { }
pub type CMMFChallenge = CMMFChallengeStr;
pub enum CMMFRandStr { }
pub type CMMFRand = CMMFRandStr;
pub enum CMMFPOPODecKeyRespContentStr { }
pub type CMMFPOPODecKeyRespContent = CMMFPOPODecKeyRespContentStr;
pub enum CMMFKeyRecRepContentStr { }
pub type CMMFKeyRecRepContent = CMMFKeyRecRepContentStr;
pub enum CMMFCertRepContentStr { }
pub type CMMFCertRepContent = CMMFCertRepContentStr;
extern "C" {
    pub static mut SEC_AnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_BitStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_BMPStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_BooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_EnumeratedTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_GeneralizedTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_IA5StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_IntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_NullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_ObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_OctetStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PrintableStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_T61StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_UniversalStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_UTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_UTF8StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_VisibleStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToAnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToBitStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToBMPStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToBooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToEnumeratedTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToGeneralizedTimeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToIA5StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToIntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToNullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToOctetStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToPrintableStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToT61StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToUniversalStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToUTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToUTF8StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToVisibleStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfAnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfBitStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfBMPStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfBooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfEnumeratedTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfGeneralizedTimeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfIA5StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfIntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfNullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfOctetStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfPrintableStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfT61StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfUniversalStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfUTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfUTF8StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfVisibleStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfAnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfBitStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfBMPStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfBooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfEnumeratedTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfGeneralizedTimeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfIA5StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfIntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfNullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfOctetStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfPrintableStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfT61StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfUniversalStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfUTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfUTF8StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfVisibleStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SkipTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CMMFCertRepContentTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CMMFPOPODecKeyChallContentTemplate:
               [SEC_ASN1Template; 0usize];
}
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn PL_InitArenaPool(pool: *mut PLArenaPool,
                            name: *const ::std::os::raw::c_char,
                            size: PRUint32, align: PRUint32);
    pub fn PL_ArenaFinish();
    pub fn PL_FreeArenaPool(pool: *mut PLArenaPool);
    pub fn PL_FinishArenaPool(pool: *mut PLArenaPool);
    pub fn PL_CompactArenaPool(pool: *mut PLArenaPool);
    pub fn PL_ArenaAllocate(pool: *mut PLArenaPool, nb: PRUint32)
     -> *mut ::std::os::raw::c_void;
    pub fn PL_ArenaGrow(pool: *mut PLArenaPool,
                        p: *mut ::std::os::raw::c_void, size: PRUint32,
                        incr: PRUint32) -> *mut ::std::os::raw::c_void;
    pub fn PL_ArenaRelease(pool: *mut PLArenaPool,
                           mark: *mut ::std::os::raw::c_char);
    pub fn PL_ClearArenaPool(pool: *mut PLArenaPool, pattern: PRInt32);
    pub fn PL_SizeOfArenaPoolExcludingPool(pool: *const PLArenaPool,
                                           mallocSizeOf: PLMallocSizeFn)
     -> size_t;
    pub fn PR_SetLibraryPath(path: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_GetLibraryPath() -> *mut ::std::os::raw::c_char;
    pub fn PR_GetLibraryName(dir: *const ::std::os::raw::c_char,
                             lib: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_FreeLibraryName(mem: *mut ::std::os::raw::c_char);
    pub fn PR_LoadLibrary(name: *const ::std::os::raw::c_char)
     -> *mut PRLibrary;
    pub fn PR_LoadLibraryWithFlags(libSpec: PRLibSpec, flags: PRIntn)
     -> *mut PRLibrary;
    pub fn PR_UnloadLibrary(lib: *mut PRLibrary) -> PRStatus;
    pub fn PR_FindSymbol(lib: *mut PRLibrary,
                         name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_FindFunctionSymbol(lib: *mut PRLibrary,
                                 name: *const ::std::os::raw::c_char)
     -> PRFuncPtr;
    pub fn PR_FindSymbolAndLibrary(name: *const ::std::os::raw::c_char,
                                   lib: *mut *mut PRLibrary)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_FindFunctionSymbolAndLibrary(name:
                                               *const ::std::os::raw::c_char,
                                           lib: *mut *mut PRLibrary)
     -> PRFuncPtr;
    pub fn PR_LoadStaticLibrary(name: *const ::std::os::raw::c_char,
                                table: *const PRStaticLinkTable)
     -> *mut PRLibrary;
    pub fn PR_GetLibraryFilePathname(name: *const ::std::os::raw::c_char,
                                     addr: PRFuncPtr)
     -> *mut ::std::os::raw::c_char;
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: size_t)
     -> ::std::os::raw::c_int;
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut random_data, __result: *mut int32_t)
     -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut ::std::os::raw::c_double,
                      __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn PR_NewLogModule(name: *const ::std::os::raw::c_char)
     -> *mut PRLogModuleInfo;
    pub fn PR_SetLogFile(name: *const ::std::os::raw::c_char) -> PRBool;
    pub fn PR_SetLogBuffering(buffer_size: PRIntn);
    pub fn PR_LogPrint(fmt: *const ::std::os::raw::c_char, ...);
    pub fn PR_LogFlush();
    pub fn PR_Assert(s: *const ::std::os::raw::c_char,
                     file: *const ::std::os::raw::c_char, ln: PRIntn);
    pub fn PL_strlen(str: *const ::std::os::raw::c_char) -> PRUint32;
    pub fn PL_strnlen(str: *const ::std::os::raw::c_char, max: PRUint32)
     -> PRUint32;
    pub fn PL_strcpy(dest: *mut ::std::os::raw::c_char,
                     src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncpy(dest: *mut ::std::os::raw::c_char,
                      src: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncpyz(dest: *mut ::std::os::raw::c_char,
                       src: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strfree(s: *mut ::std::os::raw::c_char);
    pub fn PL_strndup(s: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcat(dst: *mut ::std::os::raw::c_char,
                     src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncat(dst: *mut ::std::os::raw::c_char,
                      src: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcatn(dst: *mut ::std::os::raw::c_char, max: PRUint32,
                      src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcmp(a: *const ::std::os::raw::c_char,
                     b: *const ::std::os::raw::c_char) -> PRIntn;
    pub fn PL_strncmp(a: *const ::std::os::raw::c_char,
                      b: *const ::std::os::raw::c_char, max: PRUint32)
     -> PRIntn;
    pub fn PL_strcasecmp(a: *const ::std::os::raw::c_char,
                         b: *const ::std::os::raw::c_char) -> PRIntn;
    pub fn PL_strncasecmp(a: *const ::std::os::raw::c_char,
                          b: *const ::std::os::raw::c_char, max: PRUint32)
     -> PRIntn;
    pub fn PL_strchr(s: *const ::std::os::raw::c_char,
                     c: ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strrchr(s: *const ::std::os::raw::c_char,
                      c: ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnchr(s: *const ::std::os::raw::c_char,
                      c: ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnrchr(s: *const ::std::os::raw::c_char,
                       c: ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strpbrk(s: *const ::std::os::raw::c_char,
                      list: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strprbrk(s: *const ::std::os::raw::c_char,
                       list: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnpbrk(s: *const ::std::os::raw::c_char,
                       list: *const ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnprbrk(s: *const ::std::os::raw::c_char,
                        list: *const ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strstr(big: *const ::std::os::raw::c_char,
                     little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strrstr(big: *const ::std::os::raw::c_char,
                      little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnstr(big: *const ::std::os::raw::c_char,
                      little: *const ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnrstr(big: *const ::std::os::raw::c_char,
                       little: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcasestr(big: *const ::std::os::raw::c_char,
                         little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcaserstr(big: *const ::std::os::raw::c_char,
                          little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncasestr(big: *const ::std::os::raw::c_char,
                          little: *const ::std::os::raw::c_char,
                          max: PRUint32) -> *mut ::std::os::raw::c_char;
    pub fn PL_strncaserstr(big: *const ::std::os::raw::c_char,
                           little: *const ::std::os::raw::c_char,
                           max: PRUint32) -> *mut ::std::os::raw::c_char;
    pub fn PL_strtok_r(s1: *mut ::std::os::raw::c_char,
                       s2: *const ::std::os::raw::c_char,
                       lasts: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PORT_Alloc(len: size_t) -> *mut ::std::os::raw::c_void;
    pub fn PORT_Realloc(old: *mut ::std::os::raw::c_void, len: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ZAlloc(len: size_t) -> *mut ::std::os::raw::c_void;
    pub fn PORT_Free(ptr: *mut ::std::os::raw::c_void);
    pub fn PORT_ZFree(ptr: *mut ::std::os::raw::c_void, len: size_t);
    pub fn PORT_Strdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PORT_SetError(value: ::std::os::raw::c_int);
    pub fn PORT_GetError() -> ::std::os::raw::c_int;
    pub fn PORT_NewArena(chunksize: ::std::os::raw::c_ulong)
     -> *mut PLArenaPool;
    pub fn PORT_FreeArena(arena: *mut PLArenaPool, zero: PRBool);
    pub fn PORT_InitCheapArena(arena: *mut PORTCheapArenaPool,
                               chunksize: ::std::os::raw::c_ulong);
    pub fn PORT_DestroyCheapArena(arena: *mut PORTCheapArenaPool);
    pub fn PORT_ArenaAlloc(arena: *mut PLArenaPool, size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaZAlloc(arena: *mut PLArenaPool, size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaGrow(arena: *mut PLArenaPool,
                          ptr: *mut ::std::os::raw::c_void, oldsize: size_t,
                          newsize: size_t) -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaMark(arena: *mut PLArenaPool)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaRelease(arena: *mut PLArenaPool,
                             mark: *mut ::std::os::raw::c_void);
    pub fn PORT_ArenaZRelease(arena: *mut PLArenaPool,
                              mark: *mut ::std::os::raw::c_void);
    pub fn PORT_ArenaUnmark(arena: *mut PLArenaPool,
                            mark: *mut ::std::os::raw::c_void);
    pub fn PORT_ArenaStrdup(arena: *mut PLArenaPool,
                            str: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PORT_SetUCS4_UTF8ConversionFunction(convFunc:
                                                   PORTCharConversionFunc);
    pub fn PORT_SetUCS2_ASCIIConversionFunction(convFunc:
                                                    PORTCharConversionWSwapFunc);
    pub fn PORT_UCS4_UTF8Conversion(toUnicode: PRBool,
                                    inBuf: *mut ::std::os::raw::c_uchar,
                                    inBufLen: ::std::os::raw::c_uint,
                                    outBuf: *mut ::std::os::raw::c_uchar,
                                    maxOutBufLen: ::std::os::raw::c_uint,
                                    outBufLen: *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn PORT_UCS2_ASCIIConversion(toUnicode: PRBool,
                                     inBuf: *mut ::std::os::raw::c_uchar,
                                     inBufLen: ::std::os::raw::c_uint,
                                     outBuf: *mut ::std::os::raw::c_uchar,
                                     maxOutBufLen: ::std::os::raw::c_uint,
                                     outBufLen: *mut ::std::os::raw::c_uint,
                                     swapBytes: PRBool) -> PRBool;
    pub fn PORT_SetUCS2_UTF8ConversionFunction(convFunc:
                                                   PORTCharConversionFunc);
    pub fn PORT_UCS2_UTF8Conversion(toUnicode: PRBool,
                                    inBuf: *mut ::std::os::raw::c_uchar,
                                    inBufLen: ::std::os::raw::c_uint,
                                    outBuf: *mut ::std::os::raw::c_uchar,
                                    maxOutBufLen: ::std::os::raw::c_uint,
                                    outBufLen: *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn PORT_ISO88591_UTF8Conversion(inBuf: *const ::std::os::raw::c_uchar,
                                        inBufLen: ::std::os::raw::c_uint,
                                        outBuf: *mut ::std::os::raw::c_uchar,
                                        maxOutBufLen: ::std::os::raw::c_uint,
                                        outBufLen:
                                            *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn sec_port_ucs4_utf8_conversion_function(toUnicode: PRBool,
                                                  inBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  inBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  maxOutBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBufLen:
                                                      *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn sec_port_ucs2_utf8_conversion_function(toUnicode: PRBool,
                                                  inBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  inBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  maxOutBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBufLen:
                                                      *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn sec_port_iso88591_utf8_conversion_function(inBuf:
                                                          *const ::std::os::raw::c_uchar,
                                                      inBufLen:
                                                          ::std::os::raw::c_uint,
                                                      outBuf:
                                                          *mut ::std::os::raw::c_uchar,
                                                      maxOutBufLen:
                                                          ::std::os::raw::c_uint,
                                                      outBufLen:
                                                          *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn NSS_PutEnv(envVarName: *const ::std::os::raw::c_char,
                      envValue: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn NSS_SecureMemcmp(a: *const ::std::os::raw::c_void,
                            b: *const ::std::os::raw::c_void, n: size_t)
     -> ::std::os::raw::c_int;
    pub fn PORT_LoadLibraryFromOrigin(existingShLibName:
                                          *const ::std::os::raw::c_char,
                                      staticShLibFunc: PRFuncPtr,
                                      newShLibName:
                                          *const ::std::os::raw::c_char)
     -> *mut PRLibrary;
    pub fn SEC_ASN1DecoderStart(pool: *mut PLArenaPool,
                                dest: *mut ::std::os::raw::c_void,
                                t: *const SEC_ASN1Template)
     -> *mut SEC_ASN1DecoderContext;
    pub fn SEC_ASN1DecoderUpdate(cx: *mut SEC_ASN1DecoderContext,
                                 buf: *const ::std::os::raw::c_char,
                                 len: ::std::os::raw::c_ulong) -> SECStatus;
    pub fn SEC_ASN1DecoderFinish(cx: *mut SEC_ASN1DecoderContext)
     -> SECStatus;
    pub fn SEC_ASN1DecoderAbort(cx: *mut SEC_ASN1DecoderContext,
                                error: ::std::os::raw::c_int);
    pub fn SEC_ASN1DecoderSetFilterProc(cx: *mut SEC_ASN1DecoderContext,
                                        fn_: SEC_ASN1WriteProc,
                                        arg: *mut ::std::os::raw::c_void,
                                        no_store: PRBool);
    pub fn SEC_ASN1DecoderClearFilterProc(cx: *mut SEC_ASN1DecoderContext);
    pub fn SEC_ASN1DecoderSetNotifyProc(cx: *mut SEC_ASN1DecoderContext,
                                        fn_: SEC_ASN1NotifyProc,
                                        arg: *mut ::std::os::raw::c_void);
    pub fn SEC_ASN1DecoderClearNotifyProc(cx: *mut SEC_ASN1DecoderContext);
    pub fn SEC_ASN1Decode(pool: *mut PLArenaPool,
                          dest: *mut ::std::os::raw::c_void,
                          t: *const SEC_ASN1Template,
                          buf: *const ::std::os::raw::c_char,
                          len: ::std::os::raw::c_long) -> SECStatus;
    pub fn SEC_ASN1DecodeItem(pool: *mut PLArenaPool,
                              dest: *mut ::std::os::raw::c_void,
                              t: *const SEC_ASN1Template, src: *const SECItem)
     -> SECStatus;
    pub fn SEC_QuickDERDecodeItem(arena: *mut PLArenaPool,
                                  dest: *mut ::std::os::raw::c_void,
                                  templateEntry: *const SEC_ASN1Template,
                                  src: *const SECItem) -> SECStatus;
    pub fn SEC_ASN1EncoderStart(src: *const ::std::os::raw::c_void,
                                t: *const SEC_ASN1Template,
                                fn_: SEC_ASN1WriteProc,
                                output_arg: *mut ::std::os::raw::c_void)
     -> *mut SEC_ASN1EncoderContext;
    pub fn SEC_ASN1EncoderUpdate(cx: *mut SEC_ASN1EncoderContext,
                                 buf: *const ::std::os::raw::c_char,
                                 len: ::std::os::raw::c_ulong) -> SECStatus;
    pub fn SEC_ASN1EncoderFinish(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderAbort(cx: *mut SEC_ASN1EncoderContext,
                                error: ::std::os::raw::c_int);
    pub fn SEC_ASN1EncoderSetNotifyProc(cx: *mut SEC_ASN1EncoderContext,
                                        fn_: SEC_ASN1NotifyProc,
                                        arg: *mut ::std::os::raw::c_void);
    pub fn SEC_ASN1EncoderClearNotifyProc(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderSetStreaming(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderClearStreaming(cx: *mut SEC_ASN1EncoderContext);
    pub fn sec_ASN1EncoderSetDER(cx: *mut SEC_ASN1EncoderContext);
    pub fn sec_ASN1EncoderClearDER(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderSetTakeFromBuf(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderClearTakeFromBuf(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1Encode(src: *const ::std::os::raw::c_void,
                          t: *const SEC_ASN1Template,
                          output_proc: SEC_ASN1WriteProc,
                          output_arg: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn SEC_ASN1EncodeItem(pool: *mut PLArenaPool, dest: *mut SECItem,
                              src: *const ::std::os::raw::c_void,
                              t: *const SEC_ASN1Template) -> *mut SECItem;
    pub fn SEC_ASN1EncodeInteger(pool: *mut PLArenaPool, dest: *mut SECItem,
                                 value: ::std::os::raw::c_long)
     -> *mut SECItem;
    pub fn SEC_ASN1EncodeUnsignedInteger(pool: *mut PLArenaPool,
                                         dest: *mut SECItem,
                                         value: ::std::os::raw::c_ulong)
     -> *mut SECItem;
    pub fn SEC_ASN1DecodeInteger(src: *mut SECItem,
                                 value: *mut ::std::os::raw::c_ulong)
     -> SECStatus;
    pub fn SEC_ASN1LengthLength(len: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn SEC_ASN1EncodeLength(buf: *mut ::std::os::raw::c_uchar,
                                value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn SEC_ASN1GetSubtemplate(inTemplate: *const SEC_ASN1Template,
                                  thing: *mut ::std::os::raw::c_void,
                                  encoding: PRBool)
     -> *const SEC_ASN1Template;
    pub fn SEC_ASN1IsTemplateSimple(theTemplate: *const SEC_ASN1Template)
     -> PRBool;
    pub fn NSS_Get_SEC_AnyTemplate(arg: *mut ::std::os::raw::c_void,
                                   enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_BMPStringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_BooleanTemplate(arg: *mut ::std::os::raw::c_void,
                                       enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_BitStringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_GeneralizedTimeTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_IA5StringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_IntegerTemplate(arg: *mut ::std::os::raw::c_void,
                                       enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_NullTemplate(arg: *mut ::std::os::raw::c_void,
                                    enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_ObjectIDTemplate(arg: *mut ::std::os::raw::c_void,
                                        enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_OctetStringTemplate(arg: *mut ::std::os::raw::c_void,
                                           enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_UTCTimeTemplate(arg: *mut ::std::os::raw::c_void,
                                       enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_UTF8StringTemplate(arg: *mut ::std::os::raw::c_void,
                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToAnyTemplate(arg: *mut ::std::os::raw::c_void,
                                            enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToOctetStringTemplate(arg:
                                                        *mut ::std::os::raw::c_void,
                                                    enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SetOfAnyTemplate(arg: *mut ::std::os::raw::c_void,
                                        enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_EnumeratedTemplate(arg: *mut ::std::os::raw::c_void,
                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToEnumeratedTemplate(arg:
                                                       *mut ::std::os::raw::c_void,
                                                   enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SequenceOfAnyTemplate(arg: *mut ::std::os::raw::c_void,
                                             enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SequenceOfObjectIDTemplate(arg:
                                                      *mut ::std::os::raw::c_void,
                                                  enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SkipTemplate(arg: *mut ::std::os::raw::c_void,
                                    enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_UniversalStringTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PrintableStringTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_T61StringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToGeneralizedTimeTemplate(arg:
                                                            *mut ::std::os::raw::c_void,
                                                        enc: PRBool)
     -> *const SEC_ASN1Template;
}
