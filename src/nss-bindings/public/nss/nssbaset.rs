/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: ::std::os::raw::c_double,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRUint8 = ::std::os::raw::c_uchar;
pub type PRInt8 = ::std::os::raw::c_char;
pub type PRUint16 = ::std::os::raw::c_ushort;
pub type PRInt16 = ::std::os::raw::c_short;
pub type PRUint32 = ::std::os::raw::c_uint;
pub type PRInt32 = ::std::os::raw::c_int;
pub type PRInt64 = ::std::os::raw::c_long;
pub type PRUint64 = ::std::os::raw::c_ulong;
pub type PRIntn = ::std::os::raw::c_int;
pub type PRUintn = ::std::os::raw::c_uint;
pub type PRFloat64 = ::std::os::raw::c_double;
pub type PRSize = size_t;
pub type PROffset32 = PRInt32;
pub type PROffset64 = PRInt64;
pub type PRPtrdiff = ptrdiff_t;
pub type PRUptrdiff = ::std::os::raw::c_ulong;
pub type PRBool = PRIntn;
pub type PRPackedBool = PRUint8;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum PRStatus { PR_FAILURE = -1, PR_SUCCESS = 0, }
pub type PRUnichar = PRUint16;
pub type PRWord = ::std::os::raw::c_long;
pub type PRUword = ::std::os::raw::c_ulong;
pub type uintn = PRUintn;
pub type intn = PRIntn;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uint64 = PRUint64;
pub type uint32 = PRUint32;
pub type uint16 = PRUint16;
pub type uint8 = PRUint8;
pub type int64 = PRInt64;
pub type int32 = PRInt32;
pub type int16 = PRInt16;
pub type int8 = PRInt8;
pub type float64 = PRFloat64;
pub type uptrdiff_t = PRUptrdiff;
pub type uprword_t = PRUword;
pub type prword_t = PRWord;
pub enum PRLock { }
pub type PRStackElem = PRStackElemStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRStackElemStr {
    pub prstk_elem_next: *mut PRStackElem,
}
impl ::std::default::Default for PRStackElemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRStackStr { }
pub type PRStack = PRStackStr;
pub type prbitmap_t = ::std::os::raw::c_ulong;
pub type PRCList = PRCListStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRCListStr {
    pub next: *mut PRCList,
    pub prev: *mut PRCList,
}
impl ::std::default::Default for PRCListStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRIntervalTime = PRUint32;
pub enum PRMonitor { }
pub enum PRCondVar { }
pub type PRErrorCode = PRInt32;
pub type PRLanguageCode = PRUint32;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRErrorMessage {
    pub name: *const ::std::os::raw::c_char,
    pub en_text: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for PRErrorMessage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRErrorTable {
    pub msgs: *const PRErrorMessage,
    pub name: *const ::std::os::raw::c_char,
    pub base: PRErrorCode,
    pub n_msgs: ::std::os::raw::c_int,
}
impl ::std::default::Default for PRErrorTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRErrorCallbackPrivate { }
pub enum PRErrorCallbackTablePrivate { }
pub type PRErrorCallbackLookupFn =
    unsafe extern "C" fn(code: PRErrorCode, language: PRLanguageCode,
                         table: *const PRErrorTable,
                         cb_private: *mut PRErrorCallbackPrivate,
                         table_private: *mut PRErrorCallbackTablePrivate)
        -> *const ::std::os::raw::c_char;
pub type PRErrorCallbackNewTableFn =
    unsafe extern "C" fn(table: *const PRErrorTable,
                         cb_private: *mut PRErrorCallbackPrivate)
        -> *mut PRErrorCallbackTablePrivate;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
impl ::std::default::Default for iovec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type socklen_t = __socklen_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __socket_type {
    SOCK_STREAM = 1,
    SOCK_DGRAM = 2,
    SOCK_RAW = 3,
    SOCK_RDM = 4,
    SOCK_SEQPACKET = 5,
    SOCK_DCCP = 6,
    SOCK_PACKET = 10,
    SOCK_CLOEXEC = 524288,
    SOCK_NONBLOCK = 2048,
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
impl ::std::default::Default for sockaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_align: ::std::os::raw::c_ulong,
    pub __ss_padding: [::std::os::raw::c_char; 112usize],
}
impl ::std::clone::Clone for sockaddr_storage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for sockaddr_storage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed3 {
    MSG_OOB = 1,
    MSG_PEEK = 2,
    MSG_DONTROUTE = 4,
    MSG_CTRUNC = 8,
    MSG_PROXY = 16,
    MSG_TRUNC = 32,
    MSG_DONTWAIT = 64,
    MSG_EOR = 128,
    MSG_WAITALL = 256,
    MSG_FIN = 512,
    MSG_SYN = 1024,
    MSG_CONFIRM = 2048,
    MSG_RST = 4096,
    MSG_ERRQUEUE = 8192,
    MSG_NOSIGNAL = 16384,
    MSG_MORE = 32768,
    MSG_WAITFORONE = 65536,
    MSG_FASTOPEN = 536870912,
    MSG_CMSG_CLOEXEC = 1073741824,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for msghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: [::std::os::raw::c_uchar; 0usize],
}
impl ::std::default::Default for cmsghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed4 { SCM_RIGHTS = 1, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
impl ::std::default::Default for linger {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
impl ::std::default::Default for osockaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed5 { SHUT_RD = 0, SHUT_WR = 1, SHUT_RDWR = 2, }
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type in_addr_t = uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
impl ::std::default::Default for in_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for ip_opts {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for ip_opts {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
impl ::std::default::Default for ip_mreqn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
impl ::std::default::Default for in_pktinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed6 {
    IPPROTO_IP = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_IPIP = 4,
    IPPROTO_TCP = 6,
    IPPROTO_EGP = 8,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_TP = 29,
    IPPROTO_DCCP = 33,
    IPPROTO_IPV6 = 41,
    IPPROTO_RSVP = 46,
    IPPROTO_GRE = 47,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_MTP = 92,
    IPPROTO_BEETPH = 94,
    IPPROTO_ENCAP = 98,
    IPPROTO_PIM = 103,
    IPPROTO_COMP = 108,
    IPPROTO_SCTP = 132,
    IPPROTO_UDPLITE = 136,
    IPPROTO_MPLS = 137,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed7 {
    IPPROTO_HOPOPTS = 0,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,
    IPPROTO_MH = 135,
}
pub type in_port_t = uint16_t;
pub const IPPORT_BIFFUDP: Enum_Unnamed8 = Enum_Unnamed8::IPPORT_EXECSERVER;
pub const IPPORT_WHOSERVER: Enum_Unnamed8 = Enum_Unnamed8::IPPORT_LOGINSERVER;
pub const IPPORT_ROUTESERVER: Enum_Unnamed8 = Enum_Unnamed8::IPPORT_EFSSERVER;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed8 {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,
    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,
    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,
    IPPORT_RESERVED = 1024,
    IPPORT_USERRESERVED = 5000,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct in6_addr {
    pub __in6_u: Union_Unnamed9,
}
impl ::std::default::Default for in6_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __u6_addr8(&mut self) -> *mut [uint8_t; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr16(&mut self) -> *mut [uint16_t; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr32(&mut self) -> *mut [uint32_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
impl ::std::default::Default for sockaddr_in {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: uint32_t,
}
impl ::std::default::Default for sockaddr_in6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
impl ::std::default::Default for ip_mreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
impl ::std::default::Default for ip_mreq_source {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
impl ::std::default::Default for ipv6_mreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct group_req {
    pub gr_interface: uint32_t,
    pub gr_group: sockaddr_storage,
}
impl ::std::clone::Clone for group_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for group_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct group_source_req {
    pub gsr_interface: uint32_t,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
impl ::std::clone::Clone for group_source_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for group_source_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: uint32_t,
    pub imsf_numsrc: uint32_t,
    pub imsf_slist: [in_addr; 1usize],
}
impl ::std::default::Default for ip_msfilter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct group_filter {
    pub gf_interface: uint32_t,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: uint32_t,
    pub gf_numsrc: uint32_t,
    pub gf_slist: [sockaddr_storage; 1usize],
}
impl ::std::clone::Clone for group_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for group_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for rpcent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: uint32_t,
}
impl ::std::default::Default for netent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for hostent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for servent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for protoent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
impl ::std::default::Default for addrinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRThread { }
pub enum PRThreadStack { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRThreadType { PR_USER_THREAD = 0, PR_SYSTEM_THREAD = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRThreadScope {
    PR_LOCAL_THREAD = 0,
    PR_GLOBAL_THREAD = 1,
    PR_GLOBAL_BOUND_THREAD = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRThreadState { PR_JOINABLE_THREAD = 0, PR_UNJOINABLE_THREAD = 1, }
pub const PR_PRIORITY_LOW: PRThreadPriority =
    PRThreadPriority::PR_PRIORITY_FIRST;
pub const PR_PRIORITY_LAST: PRThreadPriority =
    PRThreadPriority::PR_PRIORITY_URGENT;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRThreadPriority {
    PR_PRIORITY_FIRST = 0,
    PR_PRIORITY_NORMAL = 1,
    PR_PRIORITY_HIGH = 2,
    PR_PRIORITY_URGENT = 3,
}
pub type PRThreadPrivateDTOR =
    ::std::option::Option<unsafe extern "C" fn(priv_:
                                                   *mut ::std::os::raw::c_void)>;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed10,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed10 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: size_t)
        -> __ssize_t;
pub type __io_write_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *const ::std::os::raw::c_char, __n: size_t)
        -> __ssize_t;
pub type __io_seek_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __pos: *mut __off64_t, __w: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
pub type __io_close_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type fpos_t = _G_fpos_t;
pub type PRVersionCheck =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_char)
                              -> PRBool>;
pub type PRPrimordialFn =
    ::std::option::Option<unsafe extern "C" fn(argc: PRIntn,
                                               argv:
                                                   *mut *mut ::std::os::raw::c_char)
                              -> PRIntn>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRCallOnceType {
    pub initialized: PRIntn,
    pub inProgress: PRInt32,
    pub status: PRStatus,
}
impl ::std::default::Default for PRCallOnceType {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRCallOnceFN = ::std::option::Option<extern "C" fn() -> PRStatus>;
pub type PRCallOnceWithArgFN =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void)
                              -> PRStatus>;
pub type PRTime = PRInt64;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRTimeParameters {
    pub tp_gmt_offset: PRInt32,
    pub tp_dst_offset: PRInt32,
}
impl ::std::default::Default for PRTimeParameters {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRExplodedTime {
    pub tm_usec: PRInt32,
    pub tm_sec: PRInt32,
    pub tm_min: PRInt32,
    pub tm_hour: PRInt32,
    pub tm_mday: PRInt32,
    pub tm_month: PRInt32,
    pub tm_year: PRInt16,
    pub tm_wday: PRInt8,
    pub tm_yday: PRInt16,
    pub tm_params: PRTimeParameters,
}
impl ::std::default::Default for PRExplodedTime {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRTimeParamFn =
    ::std::option::Option<unsafe extern "C" fn(gmt: *const PRExplodedTime)
                              -> PRTimeParameters>;
pub enum PRDir { }
pub enum PRFilePrivate { }
pub type PRDescIdentity = PRIntn;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRFileDesc {
    pub methods: *const PRIOMethods,
    pub secret: *mut PRFilePrivate,
    pub lower: *mut PRFileDesc,
    pub higher: *mut PRFileDesc,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(fd:
                                                             *mut PRFileDesc)>,
    pub identity: PRDescIdentity,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PRFileDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRTransmitFileFlags {
    PR_TRANSMITFILE_KEEP_OPEN = 0,
    PR_TRANSMITFILE_CLOSE_SOCKET = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRIPv6Addr {
    pub _S6_un: Union_Unnamed11,
}
impl ::std::default::Default for PRIPv6Addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed11 {
    pub unsafe fn _S6_u8(&mut self) -> *mut [PRUint8; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _S6_u16(&mut self) -> *mut [PRUint16; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _S6_u32(&mut self) -> *mut [PRUint32; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _S6_u64(&mut self) -> *mut [PRUint64; 2usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct PRNetAddr {
    pub _bindgen_data_: [u64; 14usize],
}
impl PRNetAddr {
    pub unsafe fn raw(&mut self) -> *mut Struct_Unnamed12 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn inet(&mut self) -> *mut Struct_Unnamed13 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ipv6(&mut self) -> *mut Struct_Unnamed14 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn local(&mut self) -> *mut Struct_Unnamed15 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for PRNetAddr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for PRNetAddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed12 {
    pub family: PRUint16,
    pub data: [::std::os::raw::c_char; 14usize],
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed13 {
    pub family: PRUint16,
    pub port: PRUint16,
    pub ip: PRUint32,
    pub pad: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed14 {
    pub family: PRUint16,
    pub port: PRUint16,
    pub flowinfo: PRUint32,
    pub ip: PRIPv6Addr,
    pub scope_id: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub family: PRUint16,
    pub path: [::std::os::raw::c_char; 104usize],
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRSockOption {
    PR_SockOpt_Nonblocking = 0,
    PR_SockOpt_Linger = 1,
    PR_SockOpt_Reuseaddr = 2,
    PR_SockOpt_Keepalive = 3,
    PR_SockOpt_RecvBufferSize = 4,
    PR_SockOpt_SendBufferSize = 5,
    PR_SockOpt_IpTimeToLive = 6,
    PR_SockOpt_IpTypeOfService = 7,
    PR_SockOpt_AddMember = 8,
    PR_SockOpt_DropMember = 9,
    PR_SockOpt_McastInterface = 10,
    PR_SockOpt_McastTimeToLive = 11,
    PR_SockOpt_McastLoopback = 12,
    PR_SockOpt_NoDelay = 13,
    PR_SockOpt_MaxSegment = 14,
    PR_SockOpt_Broadcast = 15,
    PR_SockOpt_Reuseport = 16,
    PR_SockOpt_Last = 17,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRLinger {
    pub polarity: PRBool,
    pub linger: PRIntervalTime,
}
impl ::std::default::Default for PRLinger {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRMcastRequest {
    pub mcaddr: PRNetAddr,
    pub ifaddr: PRNetAddr,
}
impl ::std::default::Default for PRMcastRequest {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRSocketOptionData {
    pub option: PRSockOption,
    pub value: Union_Unnamed16,
}
impl ::std::default::Default for PRSocketOptionData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed16 {
    pub _bindgen_data_: [u64; 28usize],
}
impl Union_Unnamed16 {
    pub unsafe fn ip_ttl(&mut self) -> *mut PRUintn {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mcast_ttl(&mut self) -> *mut PRUintn {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn tos(&mut self) -> *mut PRUintn {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn non_blocking(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn reuse_addr(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn reuse_port(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn keep_alive(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mcast_loopback(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn no_delay(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn broadcast(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn max_segment(&mut self) -> *mut PRSize {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn recv_buffer_size(&mut self) -> *mut PRSize {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn send_buffer_size(&mut self) -> *mut PRSize {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn linger(&mut self) -> *mut PRLinger {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn add_member(&mut self) -> *mut PRMcastRequest {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn drop_member(&mut self) -> *mut PRMcastRequest {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mcast_if(&mut self) -> *mut PRNetAddr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRIOVec {
    pub iov_base: *mut ::std::os::raw::c_char,
    pub iov_len: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PRIOVec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRDescType {
    PR_DESC_FILE = 1,
    PR_DESC_SOCKET_TCP = 2,
    PR_DESC_SOCKET_UDP = 3,
    PR_DESC_LAYERED = 4,
    PR_DESC_PIPE = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRSeekWhence { PR_SEEK_SET = 0, PR_SEEK_CUR = 1, PR_SEEK_END = 2, }
pub type PRCloseFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc)
                              -> PRStatus>;
pub type PRReadFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *mut ::std::os::raw::c_void,
                                               amount: PRInt32) -> PRInt32>;
pub type PRWriteFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *const ::std::os::raw::c_void,
                                               amount: PRInt32) -> PRInt32>;
pub type PRAvailableFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc)
                              -> PRInt32>;
pub type PRAvailable64FN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc)
                              -> PRInt64>;
pub type PRFsyncFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc)
                              -> PRStatus>;
pub type PRSeekFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               offset: PROffset32,
                                               how: PRSeekWhence)
                              -> PROffset32>;
pub type PRSeek64FN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               offset: PROffset64,
                                               how: PRSeekWhence)
                              -> PROffset64>;
pub type PRFileInfoFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               info: *mut PRFileInfo)
                              -> PRStatus>;
pub type PRFileInfo64FN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               info: *mut PRFileInfo64)
                              -> PRStatus>;
pub type PRWritevFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               iov: *const PRIOVec,
                                               iov_size: PRInt32,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRConnectFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               addr: *const PRNetAddr,
                                               timeout: PRIntervalTime)
                              -> PRStatus>;
pub type PRAcceptFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               addr: *mut PRNetAddr,
                                               timeout: PRIntervalTime)
                              -> *mut PRFileDesc>;
pub type PRBindFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               addr: *const PRNetAddr)
                              -> PRStatus>;
pub type PRListenFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               backlog: PRIntn) -> PRStatus>;
pub type PRShutdownFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               how: PRIntn) -> PRStatus>;
pub type PRRecvFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *mut ::std::os::raw::c_void,
                                               amount: PRInt32, flags: PRIntn,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRSendFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *const ::std::os::raw::c_void,
                                               amount: PRInt32, flags: PRIntn,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRRecvfromFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *mut ::std::os::raw::c_void,
                                               amount: PRInt32, flags: PRIntn,
                                               addr: *mut PRNetAddr,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRSendtoFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *const ::std::os::raw::c_void,
                                               amount: PRInt32, flags: PRIntn,
                                               addr: *const PRNetAddr,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRPollFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               in_flags: PRInt16,
                                               out_flags: *mut PRInt16)
                              -> PRInt16>;
pub type PRAcceptreadFN =
    ::std::option::Option<unsafe extern "C" fn(sd: *mut PRFileDesc,
                                               nd: *mut *mut PRFileDesc,
                                               raddr: *mut *mut PRNetAddr,
                                               buf:
                                                   *mut ::std::os::raw::c_void,
                                               amount: PRInt32,
                                               t: PRIntervalTime) -> PRInt32>;
pub type PRTransmitfileFN =
    ::std::option::Option<unsafe extern "C" fn(sd: *mut PRFileDesc,
                                               fd: *mut PRFileDesc,
                                               headers:
                                                   *const ::std::os::raw::c_void,
                                               hlen: PRInt32,
                                               flags: PRTransmitFileFlags,
                                               t: PRIntervalTime) -> PRInt32>;
pub type PRGetsocknameFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               addr: *mut PRNetAddr)
                              -> PRStatus>;
pub type PRGetpeernameFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               addr: *mut PRNetAddr)
                              -> PRStatus>;
pub type PRGetsocketoptionFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               data: *mut PRSocketOptionData)
                              -> PRStatus>;
pub type PRSetsocketoptionFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               data:
                                                   *const PRSocketOptionData)
                              -> PRStatus>;
pub type PRSendfileFN =
    ::std::option::Option<unsafe extern "C" fn(networkSocket: *mut PRFileDesc,
                                               sendData: *mut PRSendFileData,
                                               flags: PRTransmitFileFlags,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRConnectcontinueFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               out_flags: PRInt16)
                              -> PRStatus>;
pub type PRReservedFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc)
                              -> PRIntn>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRIOMethods {
    pub file_type: PRDescType,
    pub close: PRCloseFN,
    pub read: PRReadFN,
    pub write: PRWriteFN,
    pub available: PRAvailableFN,
    pub available64: PRAvailable64FN,
    pub fsync: PRFsyncFN,
    pub seek: PRSeekFN,
    pub seek64: PRSeek64FN,
    pub fileInfo: PRFileInfoFN,
    pub fileInfo64: PRFileInfo64FN,
    pub writev: PRWritevFN,
    pub connect: PRConnectFN,
    pub accept: PRAcceptFN,
    pub bind: PRBindFN,
    pub listen: PRListenFN,
    pub shutdown: PRShutdownFN,
    pub recv: PRRecvFN,
    pub send: PRSendFN,
    pub recvfrom: PRRecvfromFN,
    pub sendto: PRSendtoFN,
    pub poll: PRPollFN,
    pub acceptread: PRAcceptreadFN,
    pub transmitfile: PRTransmitfileFN,
    pub getsockname: PRGetsocknameFN,
    pub getpeername: PRGetpeernameFN,
    pub reserved_fn_6: PRReservedFN,
    pub reserved_fn_5: PRReservedFN,
    pub getsocketoption: PRGetsocketoptionFN,
    pub setsocketoption: PRSetsocketoptionFN,
    pub sendfile: PRSendfileFN,
    pub connectcontinue: PRConnectcontinueFN,
    pub reserved_fn_3: PRReservedFN,
    pub reserved_fn_2: PRReservedFN,
    pub reserved_fn_1: PRReservedFN,
    pub reserved_fn_0: PRReservedFN,
}
impl ::std::default::Default for PRIOMethods {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRSpecialFD {
    PR_StandardInput = 0,
    PR_StandardOutput = 1,
    PR_StandardError = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRFileType {
    PR_FILE_FILE = 1,
    PR_FILE_DIRECTORY = 2,
    PR_FILE_OTHER = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRFileInfo {
    pub type_: PRFileType,
    pub size: PROffset32,
    pub creationTime: PRTime,
    pub modifyTime: PRTime,
}
impl ::std::default::Default for PRFileInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRFileInfo64 {
    pub type_: PRFileType,
    pub size: PROffset64,
    pub creationTime: PRTime,
    pub modifyTime: PRTime,
}
impl ::std::default::Default for PRFileInfo64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRAccessHow {
    PR_ACCESS_EXISTS = 1,
    PR_ACCESS_WRITE_OK = 2,
    PR_ACCESS_READ_OK = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRDirEntry {
    pub name: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for PRDirEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRDirFlags {
    PR_SKIP_NONE = 0,
    PR_SKIP_DOT = 1,
    PR_SKIP_DOT_DOT = 2,
    PR_SKIP_BOTH = 3,
    PR_SKIP_HIDDEN = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRShutdownHow {
    PR_SHUTDOWN_RCV = 0,
    PR_SHUTDOWN_SEND = 1,
    PR_SHUTDOWN_BOTH = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRSendFileData {
    pub fd: *mut PRFileDesc,
    pub file_offset: PRUint32,
    pub file_nbytes: PRSize,
    pub header: *const ::std::os::raw::c_void,
    pub hlen: PRInt32,
    pub trailer: *const ::std::os::raw::c_void,
    pub tlen: PRInt32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PRSendFileData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRFileMap { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRFileMapProtect {
    PR_PROT_READONLY = 0,
    PR_PROT_READWRITE = 1,
    PR_PROT_WRITECOPY = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRPollDesc {
    pub fd: *mut PRFileDesc,
    pub in_flags: PRInt16,
    pub out_flags: PRInt16,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PRPollDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRSem { }
pub enum PRLibrary { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRStaticLinkTable {
    pub name: *const ::std::os::raw::c_char,
    pub fp: ::std::option::Option<extern "C" fn()>,
}
impl ::std::default::Default for PRStaticLinkTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRLibSpecType {
    PR_LibSpec_Pathname = 0,
    PR_LibSpec_MacNamedFragment = 1,
    PR_LibSpec_MacIndexedFragment = 2,
    PR_LibSpec_PathnameU = 3,
}
pub enum FSSpec { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRLibSpec {
    pub type_: PRLibSpecType,
    pub value: Union_Unnamed17,
}
impl ::std::default::Default for PRLibSpec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed17 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed17 {
    pub unsafe fn pathname(&mut self) -> *mut *const ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mac_named_fragment(&mut self) -> *mut Struct_Unnamed18 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mac_indexed_fragment(&mut self) -> *mut Struct_Unnamed19 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pathname_u(&mut self) -> *mut *const PRUnichar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed18 {
    pub fsspec: *const FSSpec,
    pub name: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed19 {
    pub fsspec: *const FSSpec,
    pub index: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRFuncPtr = ::std::option::Option<extern "C" fn()>;
pub const PR_LOG_NOTICE: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
pub const PR_LOG_WARN: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_WARNING;
pub const PR_LOG_MIN: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
pub const PR_LOG_MAX: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRLogModuleLevel {
    PR_LOG_NONE = 0,
    PR_LOG_ALWAYS = 1,
    PR_LOG_ERROR = 2,
    PR_LOG_WARNING = 3,
    PR_LOG_DEBUG = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRLogModuleInfo {
    pub name: *const ::std::os::raw::c_char,
    pub level: PRLogModuleLevel,
    pub next: *mut PRLogModuleInfo,
}
impl ::std::default::Default for PRLogModuleInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed20 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed21 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed20 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed21 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __WAIT_STATUS {
    pub _bindgen_data_: [u64; 1usize],
}
impl __WAIT_STATUS {
    pub unsafe fn __uptr(&mut self) -> *mut *mut wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for __WAIT_STATUS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub enum PRWaitGroup { }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum PRMWStatus {
    PR_MW_PENDING = 1,
    PR_MW_SUCCESS = 0,
    PR_MW_FAILURE = -1,
    PR_MW_TIMEOUT = -2,
    PR_MW_INTERRUPT = -3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRMemoryDescriptor {
    pub start: *mut ::std::os::raw::c_void,
    pub length: PRSize,
}
impl ::std::default::Default for PRMemoryDescriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRMWaitClientData { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRRecvWait {
    pub internal: PRCList,
    pub fd: *mut PRFileDesc,
    pub outcome: PRMWStatus,
    pub timeout: PRIntervalTime,
    pub bytesRecv: PRInt32,
    pub buffer: PRMemoryDescriptor,
    pub client: *mut PRMWaitClientData,
}
impl ::std::default::Default for PRRecvWait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRMWaitEnumerator { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRHostEnt {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: PRInt32,
    pub h_length: PRInt32,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for PRHostEnt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRNetAddrValue {
    PR_IpAddrNull = 0,
    PR_IpAddrAny = 1,
    PR_IpAddrLoopback = 2,
    PR_IpAddrV4Mapped = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRProtoEnt {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_num: PRInt32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PRProtoEnt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRAddrInfo { }
pub type PRStuffFunc =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               s:
                                                   *const ::std::os::raw::c_char,
                                               slen: PRUint32) -> PRIntn>;
pub enum PRProcess { }
pub enum PRProcessAttr { }
pub enum PRRWLock { }
pub enum PRSharedMemory { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRSysInfo {
    PR_SI_HOSTNAME = 0,
    PR_SI_SYSNAME = 1,
    PR_SI_RELEASE = 2,
    PR_SI_ARCHITECTURE = 3,
    PR_SI_HOSTNAME_UNTRUNCATED = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRJobIoDesc {
    pub socket: *mut PRFileDesc,
    pub error: PRErrorCode,
    pub timeout: PRIntervalTime,
}
impl ::std::default::Default for PRJobIoDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRThreadPool { }
pub enum PRJob { }
pub type PRJobFn =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void)>;
pub type PRTraceHandle = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRTraceEntry {
    pub thread: *mut PRThread,
    pub handle: PRTraceHandle,
    pub time: PRTime,
    pub userData: [PRUint32; 8usize],
}
impl ::std::default::Default for PRTraceEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRTraceOption {
    PRTraceBufSize = 0,
    PRTraceEnable = 1,
    PRTraceDisable = 2,
    PRTraceSuspend = 3,
    PRTraceResume = 4,
    PRTraceSuspendRecording = 5,
    PRTraceResumeRecording = 6,
    PRTraceLockHandles = 7,
    PRTraceUnLockHandles = 8,
    PRTraceStopRecording = 9,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum nssILockType {
    nssILockArena = 0,
    nssILockSession = 1,
    nssILockObject = 2,
    nssILockRefLock = 3,
    nssILockCert = 4,
    nssILockCertDB = 5,
    nssILockDBM = 6,
    nssILockCache = 7,
    nssILockSSL = 8,
    nssILockList = 9,
    nssILockSlot = 10,
    nssILockFreelist = 11,
    nssILockOID = 12,
    nssILockAttribute = 13,
    nssILockPK11cxt = 14,
    nssILockRWLock = 15,
    nssILockOther = 16,
    nssILockSelfServ = 17,
    nssILockKeyDB = 18,
    nssILockLast = 19,
}
pub type NSSError = PRInt32;
pub enum NSSArenaStr { }
pub type NSSArena = NSSArenaStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct NSSItemStr {
    pub data: *mut ::std::os::raw::c_void,
    pub size: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for NSSItemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type NSSItem = NSSItemStr;
pub type NSSBER = NSSItem;
pub type NSSDER = NSSBER;
pub type NSSBitString = NSSItem;
pub type NSSUTF8 = ::std::os::raw::c_char;
pub type NSSASCII7 = ::std::os::raw::c_char;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static in6addr_any: in6_addr;
    pub static in6addr_loopback: in6_addr;
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn PR_NewLock() -> *mut PRLock;
    pub fn PR_DestroyLock(lock: *mut PRLock);
    pub fn PR_Lock(lock: *mut PRLock);
    pub fn PR_Unlock(lock: *mut PRLock) -> PRStatus;
    pub fn PR_AssertCurrentThreadOwnsLock(lock: *mut PRLock);
    pub fn PR_AtomicIncrement(val: *mut PRInt32) -> PRInt32;
    pub fn PR_AtomicDecrement(val: *mut PRInt32) -> PRInt32;
    pub fn PR_AtomicSet(val: *mut PRInt32, newval: PRInt32) -> PRInt32;
    pub fn PR_AtomicAdd(ptr: *mut PRInt32, val: PRInt32) -> PRInt32;
    pub fn PR_CreateStack(stack_name: *const ::std::os::raw::c_char)
     -> *mut PRStack;
    pub fn PR_StackPush(stack: *mut PRStack, stack_elem: *mut PRStackElem);
    pub fn PR_StackPop(stack: *mut PRStack) -> *mut PRStackElem;
    pub fn PR_DestroyStack(stack: *mut PRStack) -> PRStatus;
    pub fn PR_CeilingLog2(i: PRUint32) -> PRIntn;
    pub fn PR_FloorLog2(i: PRUint32) -> PRIntn;
    pub fn PR_IntervalNow() -> PRIntervalTime;
    pub fn PR_TicksPerSecond() -> PRUint32;
    pub fn PR_SecondsToInterval(seconds: PRUint32) -> PRIntervalTime;
    pub fn PR_MillisecondsToInterval(milli: PRUint32) -> PRIntervalTime;
    pub fn PR_MicrosecondsToInterval(micro: PRUint32) -> PRIntervalTime;
    pub fn PR_IntervalToSeconds(ticks: PRIntervalTime) -> PRUint32;
    pub fn PR_IntervalToMilliseconds(ticks: PRIntervalTime) -> PRUint32;
    pub fn PR_IntervalToMicroseconds(ticks: PRIntervalTime) -> PRUint32;
    pub fn PR_NewMonitor() -> *mut PRMonitor;
    pub fn PR_DestroyMonitor(mon: *mut PRMonitor);
    pub fn PR_EnterMonitor(mon: *mut PRMonitor);
    pub fn PR_ExitMonitor(mon: *mut PRMonitor) -> PRStatus;
    pub fn PR_Wait(mon: *mut PRMonitor, ticks: PRIntervalTime) -> PRStatus;
    pub fn PR_Notify(mon: *mut PRMonitor) -> PRStatus;
    pub fn PR_NotifyAll(mon: *mut PRMonitor) -> PRStatus;
    pub fn PR_AssertCurrentThreadInMonitor(mon: *mut PRMonitor);
    pub fn PR_CEnterMonitor(address: *mut ::std::os::raw::c_void)
     -> *mut PRMonitor;
    pub fn PR_CExitMonitor(address: *mut ::std::os::raw::c_void) -> PRStatus;
    pub fn PR_CWait(address: *mut ::std::os::raw::c_void,
                    timeout: PRIntervalTime) -> PRStatus;
    pub fn PR_CNotify(address: *mut ::std::os::raw::c_void) -> PRStatus;
    pub fn PR_CNotifyAll(address: *mut ::std::os::raw::c_void) -> PRStatus;
    pub fn PR_CSetOnMonitorRecycle(callback:
                                       ::std::option::Option<unsafe extern "C" fn(address:
                                                                                      *mut ::std::os::raw::c_void)>);
    pub fn PR_NewCondVar(lock: *mut PRLock) -> *mut PRCondVar;
    pub fn PR_DestroyCondVar(cvar: *mut PRCondVar);
    pub fn PR_WaitCondVar(cvar: *mut PRCondVar, timeout: PRIntervalTime)
     -> PRStatus;
    pub fn PR_NotifyCondVar(cvar: *mut PRCondVar) -> PRStatus;
    pub fn PR_NotifyAllCondVar(cvar: *mut PRCondVar) -> PRStatus;
    pub fn PR_strtod(s00: *const ::std::os::raw::c_char,
                     se: *mut *mut ::std::os::raw::c_char) -> PRFloat64;
    pub fn PR_cnvtf(buf: *mut ::std::os::raw::c_char, bufsz: PRIntn,
                    prcsn: PRIntn, fval: PRFloat64);
    pub fn PR_dtoa(d: PRFloat64, mode: PRIntn, ndigits: PRIntn,
                   decpt: *mut PRIntn, sign: *mut PRIntn,
                   rve: *mut *mut ::std::os::raw::c_char,
                   buf: *mut ::std::os::raw::c_char, bufsize: PRSize)
     -> PRStatus;
    pub fn PR_GetEnv(var: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_GetEnvSecure(var: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_SetEnv(string: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_DuplicateEnvironment() -> *mut *mut ::std::os::raw::c_char;
    pub fn nspr_InitializePRErrorTable();
    pub fn PR_SetError(errorCode: PRErrorCode, oserr: PRInt32);
    pub fn PR_SetErrorText(textLength: PRIntn,
                           text: *const ::std::os::raw::c_char);
    pub fn PR_GetError() -> PRErrorCode;
    pub fn PR_GetOSError() -> PRInt32;
    pub fn PR_GetErrorTextLength() -> PRInt32;
    pub fn PR_GetErrorText(text: *mut ::std::os::raw::c_char) -> PRInt32;
    pub fn PR_ErrorToString(code: PRErrorCode, language: PRLanguageCode)
     -> *const ::std::os::raw::c_char;
    pub fn PR_ErrorToName(code: PRErrorCode) -> *const ::std::os::raw::c_char;
    pub fn PR_ErrorLanguages() -> *const *const ::std::os::raw::c_char;
    pub fn PR_ErrorInstallTable(table: *const PRErrorTable) -> PRErrorCode;
    pub fn PR_ErrorInstallCallback(languages:
                                       *const *const ::std::os::raw::c_char,
                                   lookup: *mut PRErrorCallbackLookupFn,
                                   newtable: *mut PRErrorCallbackNewTableFn,
                                   cb_private: *mut PRErrorCallbackPrivate);
    pub fn readv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                 __count: ::std::os::raw::c_int) -> ssize_t;
    pub fn writev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int) -> ssize_t;
    pub fn preadv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int, __offset: __off_t)
     -> ssize_t;
    pub fn pwritev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                   __count: ::std::os::raw::c_int, __offset: __off_t)
     -> ssize_t;
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr)
     -> *mut cmsghdr;
    pub fn socket(__domain: ::std::os::raw::c_int,
                  __type: ::std::os::raw::c_int,
                  __protocol: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn socketpair(__domain: ::std::os::raw::c_int,
                      __type: ::std::os::raw::c_int,
                      __protocol: ::std::os::raw::c_int,
                      __fds: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn bind(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                __len: socklen_t) -> ::std::os::raw::c_int;
    pub fn getsockname(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn connect(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                   __len: socklen_t) -> ::std::os::raw::c_int;
    pub fn getpeername(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn send(__fd: ::std::os::raw::c_int,
                __buf: *const ::std::os::raw::c_void, __n: size_t,
                __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn recv(__fd: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_void, __n: size_t,
                __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn sendto(__fd: ::std::os::raw::c_int,
                  __buf: *const ::std::os::raw::c_void, __n: size_t,
                  __flags: ::std::os::raw::c_int, __addr: *const sockaddr,
                  __addr_len: socklen_t) -> ssize_t;
    pub fn recvfrom(__fd: ::std::os::raw::c_int,
                    __buf: *mut ::std::os::raw::c_void, __n: size_t,
                    __flags: ::std::os::raw::c_int, __addr: *mut sockaddr,
                    __addr_len: *mut socklen_t) -> ssize_t;
    pub fn sendmsg(__fd: ::std::os::raw::c_int, __message: *const msghdr,
                   __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn recvmsg(__fd: ::std::os::raw::c_int, __message: *mut msghdr,
                   __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn getsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *mut ::std::os::raw::c_void,
                      __optlen: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn setsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *const ::std::os::raw::c_void,
                      __optlen: socklen_t) -> ::std::os::raw::c_int;
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn accept(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                  __addr_len: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn shutdown(__fd: ::std::os::raw::c_int, __how: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isfdtype(__fd: ::std::os::raw::c_int,
                    __fdtype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ntohl(__netlong: uint32_t) -> uint32_t;
    pub fn ntohs(__netshort: uint16_t) -> uint16_t;
    pub fn htonl(__hostlong: uint32_t) -> uint32_t;
    pub fn htons(__hostshort: uint16_t) -> uint16_t;
    pub fn bindresvport(__sockfd: ::std::os::raw::c_int,
                        __sock_in: *mut sockaddr_in) -> ::std::os::raw::c_int;
    pub fn bindresvport6(__sockfd: ::std::os::raw::c_int,
                         __sock_in: *mut sockaddr_in6)
     -> ::std::os::raw::c_int;
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::os::raw::c_char;
    pub fn inet_pton(__af: ::std::os::raw::c_int,
                     __cp: *const ::std::os::raw::c_char,
                     __buf: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn inet_ntop(__af: ::std::os::raw::c_int,
                     __cp: *const ::std::os::raw::c_void,
                     __buf: *mut ::std::os::raw::c_char, __len: socklen_t)
     -> *const ::std::os::raw::c_char;
    pub fn inet_aton(__cp: *const ::std::os::raw::c_char, __inp: *mut in_addr)
     -> ::std::os::raw::c_int;
    pub fn inet_neta(__net: in_addr_t, __buf: *mut ::std::os::raw::c_char,
                     __len: size_t) -> *mut ::std::os::raw::c_char;
    pub fn inet_net_ntop(__af: ::std::os::raw::c_int,
                         __cp: *const ::std::os::raw::c_void,
                         __bits: ::std::os::raw::c_int,
                         __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn inet_net_pton(__af: ::std::os::raw::c_int,
                         __cp: *const ::std::os::raw::c_char,
                         __buf: *mut ::std::os::raw::c_void, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn inet_nsap_addr(__cp: *const ::std::os::raw::c_char,
                          __buf: *mut ::std::os::raw::c_uchar,
                          __len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_uint;
    pub fn inet_nsap_ntoa(__len: ::std::os::raw::c_int,
                          __cp: *const ::std::os::raw::c_uchar,
                          __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
    pub fn endrpcent();
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut rpcent;
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut rpcent;
    pub fn getrpcent() -> *mut rpcent;
    pub fn getrpcbyname_r(__name: *const ::std::os::raw::c_char,
                          __result_buf: *mut rpcent,
                          __buffer: *mut ::std::os::raw::c_char,
                          __buflen: size_t, __result: *mut *mut rpcent)
     -> ::std::os::raw::c_int;
    pub fn getrpcbynumber_r(__number: ::std::os::raw::c_int,
                            __result_buf: *mut rpcent,
                            __buffer: *mut ::std::os::raw::c_char,
                            __buflen: size_t, __result: *mut *mut rpcent)
     -> ::std::os::raw::c_int;
    pub fn getrpcent_r(__result_buf: *mut rpcent,
                       __buffer: *mut ::std::os::raw::c_char,
                       __buflen: size_t, __result: *mut *mut rpcent)
     -> ::std::os::raw::c_int;
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
    pub fn herror(__str: *const ::std::os::raw::c_char);
    pub fn hstrerror(__err_num: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
    pub fn endhostent();
    pub fn gethostent() -> *mut hostent;
    pub fn gethostbyaddr(__addr: *const ::std::os::raw::c_void,
                         __len: __socklen_t, __type: ::std::os::raw::c_int)
     -> *mut hostent;
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char)
     -> *mut hostent;
    pub fn gethostbyname2(__name: *const ::std::os::raw::c_char,
                          __af: ::std::os::raw::c_int) -> *mut hostent;
    pub fn gethostent_r(__result_buf: *mut hostent,
                        __buf: *mut ::std::os::raw::c_char, __buflen: size_t,
                        __result: *mut *mut hostent,
                        __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn gethostbyaddr_r(__addr: *const ::std::os::raw::c_void,
                           __len: __socklen_t, __type: ::std::os::raw::c_int,
                           __result_buf: *mut hostent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: size_t, __result: *mut *mut hostent,
                           __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn gethostbyname_r(__name: *const ::std::os::raw::c_char,
                           __result_buf: *mut hostent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: size_t, __result: *mut *mut hostent,
                           __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn gethostbyname2_r(__name: *const ::std::os::raw::c_char,
                            __af: ::std::os::raw::c_int,
                            __result_buf: *mut hostent,
                            __buf: *mut ::std::os::raw::c_char,
                            __buflen: size_t, __result: *mut *mut hostent,
                            __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
    pub fn endnetent();
    pub fn getnetent() -> *mut netent;
    pub fn getnetbyaddr(__net: uint32_t, __type: ::std::os::raw::c_int)
     -> *mut netent;
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut netent;
    pub fn getnetent_r(__result_buf: *mut netent,
                       __buf: *mut ::std::os::raw::c_char, __buflen: size_t,
                       __result: *mut *mut netent,
                       __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getnetbyaddr_r(__net: uint32_t, __type: ::std::os::raw::c_int,
                          __result_buf: *mut netent,
                          __buf: *mut ::std::os::raw::c_char,
                          __buflen: size_t, __result: *mut *mut netent,
                          __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getnetbyname_r(__name: *const ::std::os::raw::c_char,
                          __result_buf: *mut netent,
                          __buf: *mut ::std::os::raw::c_char,
                          __buflen: size_t, __result: *mut *mut netent,
                          __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
    pub fn endservent();
    pub fn getservent() -> *mut servent;
    pub fn getservbyname(__name: *const ::std::os::raw::c_char,
                         __proto: *const ::std::os::raw::c_char)
     -> *mut servent;
    pub fn getservbyport(__port: ::std::os::raw::c_int,
                         __proto: *const ::std::os::raw::c_char)
     -> *mut servent;
    pub fn getservent_r(__result_buf: *mut servent,
                        __buf: *mut ::std::os::raw::c_char, __buflen: size_t,
                        __result: *mut *mut servent) -> ::std::os::raw::c_int;
    pub fn getservbyname_r(__name: *const ::std::os::raw::c_char,
                           __proto: *const ::std::os::raw::c_char,
                           __result_buf: *mut servent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: size_t, __result: *mut *mut servent)
     -> ::std::os::raw::c_int;
    pub fn getservbyport_r(__port: ::std::os::raw::c_int,
                           __proto: *const ::std::os::raw::c_char,
                           __result_buf: *mut servent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: size_t, __result: *mut *mut servent)
     -> ::std::os::raw::c_int;
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
    pub fn endprotoent();
    pub fn getprotoent() -> *mut protoent;
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char)
     -> *mut protoent;
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut protoent;
    pub fn getprotoent_r(__result_buf: *mut protoent,
                         __buf: *mut ::std::os::raw::c_char, __buflen: size_t,
                         __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
    pub fn getprotobyname_r(__name: *const ::std::os::raw::c_char,
                            __result_buf: *mut protoent,
                            __buf: *mut ::std::os::raw::c_char,
                            __buflen: size_t, __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
    pub fn getprotobynumber_r(__proto: ::std::os::raw::c_int,
                              __result_buf: *mut protoent,
                              __buf: *mut ::std::os::raw::c_char,
                              __buflen: size_t, __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn endnetgrent();
    pub fn getnetgrent(__hostp: *mut *mut ::std::os::raw::c_char,
                       __userp: *mut *mut ::std::os::raw::c_char,
                       __domainp: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn innetgr(__netgroup: *const ::std::os::raw::c_char,
                   __host: *const ::std::os::raw::c_char,
                   __user: *const ::std::os::raw::c_char,
                   __domain: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getnetgrent_r(__hostp: *mut *mut ::std::os::raw::c_char,
                         __userp: *mut *mut ::std::os::raw::c_char,
                         __domainp: *mut *mut ::std::os::raw::c_char,
                         __buffer: *mut ::std::os::raw::c_char,
                         __buflen: size_t) -> ::std::os::raw::c_int;
    pub fn rcmd(__ahost: *mut *mut ::std::os::raw::c_char,
                __rport: ::std::os::raw::c_ushort,
                __locuser: *const ::std::os::raw::c_char,
                __remuser: *const ::std::os::raw::c_char,
                __cmd: *const ::std::os::raw::c_char,
                __fd2p: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn rcmd_af(__ahost: *mut *mut ::std::os::raw::c_char,
                   __rport: ::std::os::raw::c_ushort,
                   __locuser: *const ::std::os::raw::c_char,
                   __remuser: *const ::std::os::raw::c_char,
                   __cmd: *const ::std::os::raw::c_char,
                   __fd2p: *mut ::std::os::raw::c_int, __af: sa_family_t)
     -> ::std::os::raw::c_int;
    pub fn rexec(__ahost: *mut *mut ::std::os::raw::c_char,
                 __rport: ::std::os::raw::c_int,
                 __name: *const ::std::os::raw::c_char,
                 __pass: *const ::std::os::raw::c_char,
                 __cmd: *const ::std::os::raw::c_char,
                 __fd2p: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn rexec_af(__ahost: *mut *mut ::std::os::raw::c_char,
                    __rport: ::std::os::raw::c_int,
                    __name: *const ::std::os::raw::c_char,
                    __pass: *const ::std::os::raw::c_char,
                    __cmd: *const ::std::os::raw::c_char,
                    __fd2p: *mut ::std::os::raw::c_int, __af: sa_family_t)
     -> ::std::os::raw::c_int;
    pub fn ruserok(__rhost: *const ::std::os::raw::c_char,
                   __suser: ::std::os::raw::c_int,
                   __remuser: *const ::std::os::raw::c_char,
                   __locuser: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ruserok_af(__rhost: *const ::std::os::raw::c_char,
                      __suser: ::std::os::raw::c_int,
                      __remuser: *const ::std::os::raw::c_char,
                      __locuser: *const ::std::os::raw::c_char,
                      __af: sa_family_t) -> ::std::os::raw::c_int;
    pub fn iruserok(__raddr: uint32_t, __suser: ::std::os::raw::c_int,
                    __remuser: *const ::std::os::raw::c_char,
                    __locuser: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn iruserok_af(__raddr: *const ::std::os::raw::c_void,
                       __suser: ::std::os::raw::c_int,
                       __remuser: *const ::std::os::raw::c_char,
                       __locuser: *const ::std::os::raw::c_char,
                       __af: sa_family_t) -> ::std::os::raw::c_int;
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rresvport_af(__alport: *mut ::std::os::raw::c_int,
                        __af: sa_family_t) -> ::std::os::raw::c_int;
    pub fn getaddrinfo(__name: *const ::std::os::raw::c_char,
                       __service: *const ::std::os::raw::c_char,
                       __req: *const addrinfo, __pai: *mut *mut addrinfo)
     -> ::std::os::raw::c_int;
    pub fn freeaddrinfo(__ai: *mut addrinfo);
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn getnameinfo(__sa: *const sockaddr, __salen: socklen_t,
                       __host: *mut ::std::os::raw::c_char,
                       __hostlen: socklen_t,
                       __serv: *mut ::std::os::raw::c_char,
                       __servlen: socklen_t, __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn PR_CreateThread(type_: PRThreadType,
                           start:
                               ::std::option::Option<unsafe extern "C" fn(arg:
                                                                              *mut ::std::os::raw::c_void)>,
                           arg: *mut ::std::os::raw::c_void,
                           priority: PRThreadPriority, scope: PRThreadScope,
                           state: PRThreadState, stackSize: PRUint32)
     -> *mut PRThread;
    pub fn PR_JoinThread(thread: *mut PRThread) -> PRStatus;
    pub fn PR_GetCurrentThread() -> *mut PRThread;
    pub fn PR_GetThreadPriority(thread: *const PRThread) -> PRThreadPriority;
    pub fn PR_SetThreadPriority(thread: *mut PRThread,
                                priority: PRThreadPriority);
    pub fn PR_SetCurrentThreadName(name: *const ::std::os::raw::c_char)
     -> PRStatus;
    pub fn PR_GetThreadName(thread: *const PRThread)
     -> *const ::std::os::raw::c_char;
    pub fn PR_NewThreadPrivateIndex(newIndex: *mut PRUintn,
                                    destructor: PRThreadPrivateDTOR)
     -> PRStatus;
    pub fn PR_SetThreadPrivate(tpdIndex: PRUintn,
                               priv_: *mut ::std::os::raw::c_void)
     -> PRStatus;
    pub fn PR_GetThreadPrivate(tpdIndex: PRUintn)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_Interrupt(thread: *mut PRThread) -> PRStatus;
    pub fn PR_ClearInterrupt();
    pub fn PR_BlockInterrupt();
    pub fn PR_UnblockInterrupt();
    pub fn PR_Sleep(ticks: PRIntervalTime) -> PRStatus;
    pub fn PR_GetThreadScope(thread: *const PRThread) -> PRThreadScope;
    pub fn PR_GetThreadType(thread: *const PRThread) -> PRThreadType;
    pub fn PR_GetThreadState(thread: *const PRThread) -> PRThreadState;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn PR_VersionCheck(importedVersion: *const ::std::os::raw::c_char)
     -> PRBool;
    pub fn PR_GetVersion() -> *const ::std::os::raw::c_char;
    pub fn PR_Init(type_: PRThreadType, priority: PRThreadPriority,
                   maxPTDs: PRUintn);
    pub fn PR_Initialize(prmain: PRPrimordialFn, argc: PRIntn,
                         argv: *mut *mut ::std::os::raw::c_char,
                         maxPTDs: PRUintn) -> PRIntn;
    pub fn PR_Initialized() -> PRBool;
    pub fn PR_Cleanup() -> PRStatus;
    pub fn PR_DisableClockInterrupts();
    pub fn PR_EnableClockInterrupts();
    pub fn PR_BlockClockInterrupts();
    pub fn PR_UnblockClockInterrupts();
    pub fn PR_SetConcurrency(numCPUs: PRUintn);
    pub fn PR_SetFDCacheSize(low: PRIntn, high: PRIntn) -> PRStatus;
    pub fn PR_ProcessExit(status: PRIntn);
    pub fn PR_Abort();
    pub fn PR_CallOnce(once: *mut PRCallOnceType, func: PRCallOnceFN)
     -> PRStatus;
    pub fn PR_CallOnceWithArg(once: *mut PRCallOnceType,
                              func: PRCallOnceWithArgFN,
                              arg: *mut ::std::os::raw::c_void) -> PRStatus;
    pub fn LL_MaxInt() -> PRInt64;
    pub fn LL_MinInt() -> PRInt64;
    pub fn LL_Zero() -> PRInt64;
    pub fn LL_MaxUint() -> PRUint64;
    pub fn PR_Now() -> PRTime;
    pub fn PR_ExplodeTime(usecs: PRTime, params: PRTimeParamFn,
                          exploded: *mut PRExplodedTime);
    pub fn PR_ImplodeTime(exploded: *const PRExplodedTime) -> PRTime;
    pub fn PR_NormalizeTime(exploded: *mut PRExplodedTime,
                            params: PRTimeParamFn);
    pub fn PR_LocalTimeParameters(gmt: *const PRExplodedTime)
     -> PRTimeParameters;
    pub fn PR_GMTParameters(gmt: *const PRExplodedTime) -> PRTimeParameters;
    pub fn PR_USPacificTimeParameters(gmt: *const PRExplodedTime)
     -> PRTimeParameters;
    pub fn PR_ParseTimeStringToExplodedTime(string:
                                                *const ::std::os::raw::c_char,
                                            default_to_gmt: PRBool,
                                            result: *mut PRExplodedTime)
     -> PRStatus;
    pub fn PR_ParseTimeString(string: *const ::std::os::raw::c_char,
                              default_to_gmt: PRBool, result: *mut PRTime)
     -> PRStatus;
    pub fn PR_FormatTime(buf: *mut ::std::os::raw::c_char,
                         buflen: ::std::os::raw::c_int,
                         fmt: *const ::std::os::raw::c_char,
                         time: *const PRExplodedTime) -> PRUint32;
    pub fn PR_FormatTimeUSEnglish(buf: *mut ::std::os::raw::c_char,
                                  bufSize: PRUint32,
                                  format: *const ::std::os::raw::c_char,
                                  time: *const PRExplodedTime) -> PRUint32;
    pub fn PR_GetDescType(file: *mut PRFileDesc) -> PRDescType;
    pub fn PR_GetSpecialFD(id: PRSpecialFD) -> *mut PRFileDesc;
    pub fn PR_GetUniqueIdentity(layer_name: *const ::std::os::raw::c_char)
     -> PRDescIdentity;
    pub fn PR_GetNameForIdentity(ident: PRDescIdentity)
     -> *const ::std::os::raw::c_char;
    pub fn PR_GetLayersIdentity(fd: *mut PRFileDesc) -> PRDescIdentity;
    pub fn PR_GetIdentitiesLayer(fd_stack: *mut PRFileDesc,
                                 id: PRDescIdentity) -> *mut PRFileDesc;
    pub fn PR_GetDefaultIOMethods() -> *const PRIOMethods;
    pub fn PR_CreateIOLayerStub(ident: PRDescIdentity,
                                methods: *const PRIOMethods)
     -> *mut PRFileDesc;
    pub fn PR_CreateIOLayer(fd: *mut PRFileDesc) -> *mut PRFileDesc;
    pub fn PR_PushIOLayer(fd_stack: *mut PRFileDesc, id: PRDescIdentity,
                          layer: *mut PRFileDesc) -> PRStatus;
    pub fn PR_PopIOLayer(fd_stack: *mut PRFileDesc, id: PRDescIdentity)
     -> *mut PRFileDesc;
    pub fn PR_Open(name: *const ::std::os::raw::c_char, flags: PRIntn,
                   mode: PRIntn) -> *mut PRFileDesc;
    pub fn PR_OpenFile(name: *const ::std::os::raw::c_char, flags: PRIntn,
                       mode: PRIntn) -> *mut PRFileDesc;
    pub fn PR_Close(fd: *mut PRFileDesc) -> PRStatus;
    pub fn PR_Read(fd: *mut PRFileDesc, buf: *mut ::std::os::raw::c_void,
                   amount: PRInt32) -> PRInt32;
    pub fn PR_Write(fd: *mut PRFileDesc, buf: *const ::std::os::raw::c_void,
                    amount: PRInt32) -> PRInt32;
    pub fn PR_Writev(fd: *mut PRFileDesc, iov: *const PRIOVec,
                     iov_size: PRInt32, timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_Delete(name: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_GetFileInfo(fn_: *const ::std::os::raw::c_char,
                          info: *mut PRFileInfo) -> PRStatus;
    pub fn PR_GetFileInfo64(fn_: *const ::std::os::raw::c_char,
                            info: *mut PRFileInfo64) -> PRStatus;
    pub fn PR_GetOpenFileInfo(fd: *mut PRFileDesc, info: *mut PRFileInfo)
     -> PRStatus;
    pub fn PR_GetOpenFileInfo64(fd: *mut PRFileDesc, info: *mut PRFileInfo64)
     -> PRStatus;
    pub fn PR_Rename(from: *const ::std::os::raw::c_char,
                     to: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_Access(name: *const ::std::os::raw::c_char, how: PRAccessHow)
     -> PRStatus;
    pub fn PR_Seek(fd: *mut PRFileDesc, offset: PROffset32,
                   whence: PRSeekWhence) -> PROffset32;
    pub fn PR_Seek64(fd: *mut PRFileDesc, offset: PROffset64,
                     whence: PRSeekWhence) -> PROffset64;
    pub fn PR_Available(fd: *mut PRFileDesc) -> PRInt32;
    pub fn PR_Available64(fd: *mut PRFileDesc) -> PRInt64;
    pub fn PR_Sync(fd: *mut PRFileDesc) -> PRStatus;
    pub fn PR_OpenDir(name: *const ::std::os::raw::c_char) -> *mut PRDir;
    pub fn PR_ReadDir(dir: *mut PRDir, flags: PRDirFlags) -> *mut PRDirEntry;
    pub fn PR_CloseDir(dir: *mut PRDir) -> PRStatus;
    pub fn PR_MkDir(name: *const ::std::os::raw::c_char, mode: PRIntn)
     -> PRStatus;
    pub fn PR_MakeDir(name: *const ::std::os::raw::c_char, mode: PRIntn)
     -> PRStatus;
    pub fn PR_RmDir(name: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_NewUDPSocket() -> *mut PRFileDesc;
    pub fn PR_NewTCPSocket() -> *mut PRFileDesc;
    pub fn PR_OpenUDPSocket(af: PRIntn) -> *mut PRFileDesc;
    pub fn PR_OpenTCPSocket(af: PRIntn) -> *mut PRFileDesc;
    pub fn PR_Connect(fd: *mut PRFileDesc, addr: *const PRNetAddr,
                      timeout: PRIntervalTime) -> PRStatus;
    pub fn PR_ConnectContinue(fd: *mut PRFileDesc, out_flags: PRInt16)
     -> PRStatus;
    pub fn PR_GetConnectStatus(pd: *const PRPollDesc) -> PRStatus;
    pub fn PR_Accept(fd: *mut PRFileDesc, addr: *mut PRNetAddr,
                     timeout: PRIntervalTime) -> *mut PRFileDesc;
    pub fn PR_Bind(fd: *mut PRFileDesc, addr: *const PRNetAddr) -> PRStatus;
    pub fn PR_Listen(fd: *mut PRFileDesc, backlog: PRIntn) -> PRStatus;
    pub fn PR_Shutdown(fd: *mut PRFileDesc, how: PRShutdownHow) -> PRStatus;
    pub fn PR_Recv(fd: *mut PRFileDesc, buf: *mut ::std::os::raw::c_void,
                   amount: PRInt32, flags: PRIntn, timeout: PRIntervalTime)
     -> PRInt32;
    pub fn PR_Send(fd: *mut PRFileDesc, buf: *const ::std::os::raw::c_void,
                   amount: PRInt32, flags: PRIntn, timeout: PRIntervalTime)
     -> PRInt32;
    pub fn PR_RecvFrom(fd: *mut PRFileDesc, buf: *mut ::std::os::raw::c_void,
                       amount: PRInt32, flags: PRIntn, addr: *mut PRNetAddr,
                       timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_SendTo(fd: *mut PRFileDesc, buf: *const ::std::os::raw::c_void,
                     amount: PRInt32, flags: PRIntn, addr: *const PRNetAddr,
                     timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_TransmitFile(networkSocket: *mut PRFileDesc,
                           sourceFile: *mut PRFileDesc,
                           headers: *const ::std::os::raw::c_void,
                           hlen: PRInt32, flags: PRTransmitFileFlags,
                           timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_SendFile(networkSocket: *mut PRFileDesc,
                       sendData: *mut PRSendFileData,
                       flags: PRTransmitFileFlags, timeout: PRIntervalTime)
     -> PRInt32;
    pub fn PR_AcceptRead(listenSock: *mut PRFileDesc,
                         acceptedSock: *mut *mut PRFileDesc,
                         peerAddr: *mut *mut PRNetAddr,
                         buf: *mut ::std::os::raw::c_void, amount: PRInt32,
                         timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_NewTCPSocketPair(fds: *mut *mut PRFileDesc) -> PRStatus;
    pub fn PR_GetSockName(fd: *mut PRFileDesc, addr: *mut PRNetAddr)
     -> PRStatus;
    pub fn PR_GetPeerName(fd: *mut PRFileDesc, addr: *mut PRNetAddr)
     -> PRStatus;
    pub fn PR_GetSocketOption(fd: *mut PRFileDesc,
                              data: *mut PRSocketOptionData) -> PRStatus;
    pub fn PR_SetSocketOption(fd: *mut PRFileDesc,
                              data: *const PRSocketOptionData) -> PRStatus;
    pub fn PR_SetFDInheritable(fd: *mut PRFileDesc, inheritable: PRBool)
     -> PRStatus;
    pub fn PR_GetInheritedFD(name: *const ::std::os::raw::c_char)
     -> *mut PRFileDesc;
    pub fn PR_CreateFileMap(fd: *mut PRFileDesc, size: PRInt64,
                            prot: PRFileMapProtect) -> *mut PRFileMap;
    pub fn PR_GetMemMapAlignment() -> PRInt32;
    pub fn PR_MemMap(fmap: *mut PRFileMap, offset: PROffset64, len: PRUint32)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_MemUnmap(addr: *mut ::std::os::raw::c_void, len: PRUint32)
     -> PRStatus;
    pub fn PR_CloseFileMap(fmap: *mut PRFileMap) -> PRStatus;
    pub fn PR_SyncMemMap(fd: *mut PRFileDesc,
                         addr: *mut ::std::os::raw::c_void, len: PRUint32)
     -> PRStatus;
    pub fn PR_CreatePipe(readPipe: *mut *mut PRFileDesc,
                         writePipe: *mut *mut PRFileDesc) -> PRStatus;
    pub fn PR_Poll(pds: *mut PRPollDesc, npds: PRIntn,
                   timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_NewPollableEvent() -> *mut PRFileDesc;
    pub fn PR_DestroyPollableEvent(event: *mut PRFileDesc) -> PRStatus;
    pub fn PR_SetPollableEvent(event: *mut PRFileDesc) -> PRStatus;
    pub fn PR_WaitForPollableEvent(event: *mut PRFileDesc) -> PRStatus;
    pub fn PR_OpenSemaphore(name: *const ::std::os::raw::c_char,
                            flags: PRIntn, mode: PRIntn, value: PRUintn)
     -> *mut PRSem;
    pub fn PR_WaitSemaphore(sem: *mut PRSem) -> PRStatus;
    pub fn PR_PostSemaphore(sem: *mut PRSem) -> PRStatus;
    pub fn PR_CloseSemaphore(sem: *mut PRSem) -> PRStatus;
    pub fn PR_DeleteSemaphore(name: *const ::std::os::raw::c_char)
     -> PRStatus;
    pub fn PR_SetLibraryPath(path: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_GetLibraryPath() -> *mut ::std::os::raw::c_char;
    pub fn PR_GetLibraryName(dir: *const ::std::os::raw::c_char,
                             lib: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_FreeLibraryName(mem: *mut ::std::os::raw::c_char);
    pub fn PR_LoadLibrary(name: *const ::std::os::raw::c_char)
     -> *mut PRLibrary;
    pub fn PR_LoadLibraryWithFlags(libSpec: PRLibSpec, flags: PRIntn)
     -> *mut PRLibrary;
    pub fn PR_UnloadLibrary(lib: *mut PRLibrary) -> PRStatus;
    pub fn PR_FindSymbol(lib: *mut PRLibrary,
                         name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_FindFunctionSymbol(lib: *mut PRLibrary,
                                 name: *const ::std::os::raw::c_char)
     -> PRFuncPtr;
    pub fn PR_FindSymbolAndLibrary(name: *const ::std::os::raw::c_char,
                                   lib: *mut *mut PRLibrary)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_FindFunctionSymbolAndLibrary(name:
                                               *const ::std::os::raw::c_char,
                                           lib: *mut *mut PRLibrary)
     -> PRFuncPtr;
    pub fn PR_LoadStaticLibrary(name: *const ::std::os::raw::c_char,
                                table: *const PRStaticLinkTable)
     -> *mut PRLibrary;
    pub fn PR_GetLibraryFilePathname(name: *const ::std::os::raw::c_char,
                                     addr: PRFuncPtr)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_NewLogModule(name: *const ::std::os::raw::c_char)
     -> *mut PRLogModuleInfo;
    pub fn PR_SetLogFile(name: *const ::std::os::raw::c_char) -> PRBool;
    pub fn PR_SetLogBuffering(buffer_size: PRIntn);
    pub fn PR_LogPrint(fmt: *const ::std::os::raw::c_char, ...);
    pub fn PR_LogFlush();
    pub fn PR_Assert(s: *const ::std::os::raw::c_char,
                     file: *const ::std::os::raw::c_char, ln: PRIntn);
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut random_data, __result: *mut int32_t)
     -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut ::std::os::raw::c_double,
                      __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn PR_Malloc(size: PRUint32) -> *mut ::std::os::raw::c_void;
    pub fn PR_Calloc(nelem: PRUint32, elsize: PRUint32)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_Realloc(ptr: *mut ::std::os::raw::c_void, size: PRUint32)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_Free(ptr: *mut ::std::os::raw::c_void);
    pub fn PR_AddWaitFileDesc(group: *mut PRWaitGroup, desc: *mut PRRecvWait)
     -> PRStatus;
    pub fn PR_WaitRecvReady(group: *mut PRWaitGroup) -> *mut PRRecvWait;
    pub fn PR_CancelWaitFileDesc(group: *mut PRWaitGroup,
                                 desc: *mut PRRecvWait) -> PRStatus;
    pub fn PR_CancelWaitGroup(group: *mut PRWaitGroup) -> *mut PRRecvWait;
    pub fn PR_CreateWaitGroup(size: PRInt32) -> *mut PRWaitGroup;
    pub fn PR_DestroyWaitGroup(group: *mut PRWaitGroup) -> PRStatus;
    pub fn PR_CreateMWaitEnumerator(group: *mut PRWaitGroup)
     -> *mut PRMWaitEnumerator;
    pub fn PR_DestroyMWaitEnumerator(enumerator: *mut PRMWaitEnumerator)
     -> PRStatus;
    pub fn PR_EnumerateWaitGroup(enumerator: *mut PRMWaitEnumerator,
                                 previous: *const PRRecvWait)
     -> *mut PRRecvWait;
    pub fn PR_StringToNetAddr(string: *const ::std::os::raw::c_char,
                              addr: *mut PRNetAddr) -> PRStatus;
    pub fn PR_NetAddrToString(addr: *const PRNetAddr,
                              string: *mut ::std::os::raw::c_char,
                              size: PRUint32) -> PRStatus;
    pub fn PR_GetHostByName(hostname: *const ::std::os::raw::c_char,
                            buf: *mut ::std::os::raw::c_char, bufsize: PRIntn,
                            hostentry: *mut PRHostEnt) -> PRStatus;
    pub fn PR_GetIPNodeByName(hostname: *const ::std::os::raw::c_char,
                              af: PRUint16, flags: PRIntn,
                              buf: *mut ::std::os::raw::c_char,
                              bufsize: PRIntn, hostentry: *mut PRHostEnt)
     -> PRStatus;
    pub fn PR_GetHostByAddr(hostaddr: *const PRNetAddr,
                            buf: *mut ::std::os::raw::c_char, bufsize: PRIntn,
                            hostentry: *mut PRHostEnt) -> PRStatus;
    pub fn PR_EnumerateHostEnt(enumIndex: PRIntn, hostEnt: *const PRHostEnt,
                               port: PRUint16, address: *mut PRNetAddr)
     -> PRIntn;
    pub fn PR_InitializeNetAddr(val: PRNetAddrValue, port: PRUint16,
                                addr: *mut PRNetAddr) -> PRStatus;
    pub fn PR_SetNetAddr(val: PRNetAddrValue, af: PRUint16, port: PRUint16,
                         addr: *mut PRNetAddr) -> PRStatus;
    pub fn PR_IsNetAddrType(addr: *const PRNetAddr, val: PRNetAddrValue)
     -> PRBool;
    pub fn PR_ConvertIPv4AddrToIPv6(v4addr: PRUint32,
                                    v6addr: *mut PRIPv6Addr);
    pub fn PR_GetProtoByName(protocolname: *const ::std::os::raw::c_char,
                             buffer: *mut ::std::os::raw::c_char,
                             bufsize: PRInt32, result: *mut PRProtoEnt)
     -> PRStatus;
    pub fn PR_GetProtoByNumber(protocolnumber: PRInt32,
                               buffer: *mut ::std::os::raw::c_char,
                               bufsize: PRInt32, result: *mut PRProtoEnt)
     -> PRStatus;
    pub fn PR_GetAddrInfoByName(hostname: *const ::std::os::raw::c_char,
                                af: PRUint16, flags: PRIntn)
     -> *mut PRAddrInfo;
    pub fn PR_FreeAddrInfo(addrInfo: *mut PRAddrInfo);
    pub fn PR_EnumerateAddrInfo(enumPtr: *mut ::std::os::raw::c_void,
                                addrInfo: *const PRAddrInfo, port: PRUint16,
                                result: *mut PRNetAddr)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_GetCanonNameFromAddrInfo(addrInfo: *const PRAddrInfo)
     -> *const ::std::os::raw::c_char;
    pub fn PR_ntohs(arg1: PRUint16) -> PRUint16;
    pub fn PR_ntohl(arg1: PRUint32) -> PRUint32;
    pub fn PR_ntohll(arg1: PRUint64) -> PRUint64;
    pub fn PR_htons(arg1: PRUint16) -> PRUint16;
    pub fn PR_htonl(arg1: PRUint32) -> PRUint32;
    pub fn PR_htonll(arg1: PRUint64) -> PRUint64;
    pub fn PR_snprintf(out: *mut ::std::os::raw::c_char, outlen: PRUint32,
                       fmt: *const ::std::os::raw::c_char, ...) -> PRUint32;
    pub fn PR_smprintf(fmt: *const ::std::os::raw::c_char, ...)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_smprintf_free(mem: *mut ::std::os::raw::c_char);
    pub fn PR_sprintf_append(last: *mut ::std::os::raw::c_char,
                             fmt: *const ::std::os::raw::c_char, ...)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_sxprintf(f: PRStuffFunc, arg: *mut ::std::os::raw::c_void,
                       fmt: *const ::std::os::raw::c_char, ...) -> PRUint32;
    pub fn PR_fprintf(fd: *mut PRFileDesc,
                      fmt: *const ::std::os::raw::c_char, ...) -> PRUint32;
    pub fn PR_vsnprintf(out: *mut ::std::os::raw::c_char, outlen: PRUint32,
                        fmt: *const ::std::os::raw::c_char, ap: va_list)
     -> PRUint32;
    pub fn PR_vsmprintf(fmt: *const ::std::os::raw::c_char, ap: va_list)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_vsprintf_append(last: *mut ::std::os::raw::c_char,
                              fmt: *const ::std::os::raw::c_char, ap: va_list)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_vsxprintf(f: PRStuffFunc, arg: *mut ::std::os::raw::c_void,
                        fmt: *const ::std::os::raw::c_char, ap: va_list)
     -> PRUint32;
    pub fn PR_vfprintf(fd: *mut PRFileDesc,
                       fmt: *const ::std::os::raw::c_char, ap: va_list)
     -> PRUint32;
    pub fn PR_sscanf(buf: *const ::std::os::raw::c_char,
                     fmt: *const ::std::os::raw::c_char, ...) -> PRInt32;
    pub fn PR_NewProcessAttr() -> *mut PRProcessAttr;
    pub fn PR_ResetProcessAttr(attr: *mut PRProcessAttr);
    pub fn PR_DestroyProcessAttr(attr: *mut PRProcessAttr);
    pub fn PR_ProcessAttrSetStdioRedirect(attr: *mut PRProcessAttr,
                                          stdioFd: PRSpecialFD,
                                          redirectFd: *mut PRFileDesc);
    pub fn PR_SetStdioRedirect(attr: *mut PRProcessAttr, stdioFd: PRSpecialFD,
                               redirectFd: *mut PRFileDesc);
    pub fn PR_ProcessAttrSetCurrentDirectory(attr: *mut PRProcessAttr,
                                             dir:
                                                 *const ::std::os::raw::c_char)
     -> PRStatus;
    pub fn PR_ProcessAttrSetInheritableFD(attr: *mut PRProcessAttr,
                                          fd: *mut PRFileDesc,
                                          name: *const ::std::os::raw::c_char)
     -> PRStatus;
    pub fn PR_CreateProcess(path: *const ::std::os::raw::c_char,
                            argv: *const *mut ::std::os::raw::c_char,
                            envp: *const *mut ::std::os::raw::c_char,
                            attr: *const PRProcessAttr) -> *mut PRProcess;
    pub fn PR_CreateProcessDetached(path: *const ::std::os::raw::c_char,
                                    argv: *const *mut ::std::os::raw::c_char,
                                    envp: *const *mut ::std::os::raw::c_char,
                                    attr: *const PRProcessAttr) -> PRStatus;
    pub fn PR_DetachProcess(process: *mut PRProcess) -> PRStatus;
    pub fn PR_WaitProcess(process: *mut PRProcess, exitCode: *mut PRInt32)
     -> PRStatus;
    pub fn PR_KillProcess(process: *mut PRProcess) -> PRStatus;
    pub fn PR_GetRandomNoise(buf: *mut ::std::os::raw::c_void, size: PRSize)
     -> PRSize;
    pub fn PR_NewRWLock(lock_rank: PRUint32,
                        lock_name: *const ::std::os::raw::c_char)
     -> *mut PRRWLock;
    pub fn PR_DestroyRWLock(lock: *mut PRRWLock);
    pub fn PR_RWLock_Rlock(lock: *mut PRRWLock);
    pub fn PR_RWLock_Wlock(lock: *mut PRRWLock);
    pub fn PR_RWLock_Unlock(lock: *mut PRRWLock);
    pub fn PR_OpenSharedMemory(name: *const ::std::os::raw::c_char,
                               size: PRSize, flags: PRIntn, mode: PRIntn)
     -> *mut PRSharedMemory;
    pub fn PR_AttachSharedMemory(shm: *mut PRSharedMemory, flags: PRIntn)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_DetachSharedMemory(shm: *mut PRSharedMemory,
                                 addr: *mut ::std::os::raw::c_void)
     -> PRStatus;
    pub fn PR_CloseSharedMemory(shm: *mut PRSharedMemory) -> PRStatus;
    pub fn PR_DeleteSharedMemory(name: *const ::std::os::raw::c_char)
     -> PRStatus;
    pub fn PR_OpenAnonFileMap(dirName: *const ::std::os::raw::c_char,
                              size: PRSize, prot: PRFileMapProtect)
     -> *mut PRFileMap;
    pub fn PR_ProcessAttrSetInheritableFileMap(attr: *mut PRProcessAttr,
                                               fm: *mut PRFileMap,
                                               shmname:
                                                   *const ::std::os::raw::c_char)
     -> PRStatus;
    pub fn PR_GetInheritedFileMap(shmname: *const ::std::os::raw::c_char)
     -> *mut PRFileMap;
    pub fn PR_ExportFileMapAsString(fm: *mut PRFileMap, bufsize: PRSize,
                                    buf: *mut ::std::os::raw::c_char)
     -> PRStatus;
    pub fn PR_ImportFileMapFromString(fmstring: *const ::std::os::raw::c_char)
     -> *mut PRFileMap;
    pub fn PR_GetDirectorySeparator() -> ::std::os::raw::c_char;
    pub fn PR_GetDirectorySepartor() -> ::std::os::raw::c_char;
    pub fn PR_GetPathSeparator() -> ::std::os::raw::c_char;
    pub fn PR_GetSystemInfo(cmd: PRSysInfo, buf: *mut ::std::os::raw::c_char,
                            buflen: PRUint32) -> PRStatus;
    pub fn PR_GetPageSize() -> PRInt32;
    pub fn PR_GetPageShift() -> PRInt32;
    pub fn PR_GetNumberOfProcessors() -> PRInt32;
    pub fn PR_GetPhysicalMemorySize() -> PRUint64;
    pub fn PR_CreateThreadPool(initial_threads: PRInt32, max_threads: PRInt32,
                               stacksize: PRUint32) -> *mut PRThreadPool;
    pub fn PR_QueueJob(tpool: *mut PRThreadPool, fn_: PRJobFn,
                       arg: *mut ::std::os::raw::c_void, joinable: PRBool)
     -> *mut PRJob;
    pub fn PR_QueueJob_Read(tpool: *mut PRThreadPool, iod: *mut PRJobIoDesc,
                            fn_: PRJobFn, arg: *mut ::std::os::raw::c_void,
                            joinable: PRBool) -> *mut PRJob;
    pub fn PR_QueueJob_Write(tpool: *mut PRThreadPool, iod: *mut PRJobIoDesc,
                             fn_: PRJobFn, arg: *mut ::std::os::raw::c_void,
                             joinable: PRBool) -> *mut PRJob;
    pub fn PR_QueueJob_Accept(tpool: *mut PRThreadPool, iod: *mut PRJobIoDesc,
                              fn_: PRJobFn, arg: *mut ::std::os::raw::c_void,
                              joinable: PRBool) -> *mut PRJob;
    pub fn PR_QueueJob_Connect(tpool: *mut PRThreadPool,
                               iod: *mut PRJobIoDesc, addr: *const PRNetAddr,
                               fn_: PRJobFn, arg: *mut ::std::os::raw::c_void,
                               joinable: PRBool) -> *mut PRJob;
    pub fn PR_QueueJob_Timer(tpool: *mut PRThreadPool,
                             timeout: PRIntervalTime, fn_: PRJobFn,
                             arg: *mut ::std::os::raw::c_void,
                             joinable: PRBool) -> *mut PRJob;
    pub fn PR_CancelJob(job: *mut PRJob) -> PRStatus;
    pub fn PR_JoinJob(job: *mut PRJob) -> PRStatus;
    pub fn PR_ShutdownThreadPool(tpool: *mut PRThreadPool) -> PRStatus;
    pub fn PR_JoinThreadPool(tpool: *mut PRThreadPool) -> PRStatus;
    pub fn PR_CreateTrace(qName: *const ::std::os::raw::c_char,
                          rName: *const ::std::os::raw::c_char,
                          description: *const ::std::os::raw::c_char)
     -> PRTraceHandle;
    pub fn PR_DestroyTrace(handle: PRTraceHandle);
    pub fn PR_Trace(handle: PRTraceHandle, userData0: PRUint32,
                    userData1: PRUint32, userData2: PRUint32,
                    userData3: PRUint32, userData4: PRUint32,
                    userData5: PRUint32, userData6: PRUint32,
                    userData7: PRUint32);
    pub fn PR_SetTraceOption(command: PRTraceOption,
                             value: *mut ::std::os::raw::c_void);
    pub fn PR_GetTraceOption(command: PRTraceOption,
                             value: *mut ::std::os::raw::c_void);
    pub fn PR_GetTraceHandleFromName(qName: *const ::std::os::raw::c_char,
                                     rName: *const ::std::os::raw::c_char)
     -> PRTraceHandle;
    pub fn PR_GetTraceNameFromHandle(handle: PRTraceHandle,
                                     qName:
                                         *mut *const ::std::os::raw::c_char,
                                     rName:
                                         *mut *const ::std::os::raw::c_char,
                                     description:
                                         *mut *const ::std::os::raw::c_char);
    pub fn PR_FindNextTraceQname(handle: PRTraceHandle) -> PRTraceHandle;
    pub fn PR_FindNextTraceRname(rhandle: PRTraceHandle,
                                 qhandle: PRTraceHandle) -> PRTraceHandle;
    pub fn PR_RecordTraceEntries();
    pub fn PR_GetTraceEntries(buffer: *mut PRTraceEntry, count: PRInt32,
                              found: *mut PRInt32) -> PRIntn;
}
