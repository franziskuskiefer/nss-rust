/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: ::std::os::raw::c_double,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRUint8 = ::std::os::raw::c_uchar;
pub type PRInt8 = ::std::os::raw::c_char;
pub type PRUint16 = ::std::os::raw::c_ushort;
pub type PRInt16 = ::std::os::raw::c_short;
pub type PRUint32 = ::std::os::raw::c_uint;
pub type PRInt32 = ::std::os::raw::c_int;
pub type PRInt64 = ::std::os::raw::c_long;
pub type PRUint64 = ::std::os::raw::c_ulong;
pub type PRIntn = ::std::os::raw::c_int;
pub type PRUintn = ::std::os::raw::c_uint;
pub type PRFloat64 = ::std::os::raw::c_double;
pub type PRSize = size_t;
pub type PROffset32 = PRInt32;
pub type PROffset64 = PRInt64;
pub type PRPtrdiff = ptrdiff_t;
pub type PRUptrdiff = ::std::os::raw::c_ulong;
pub type PRBool = PRIntn;
pub type PRPackedBool = PRUint8;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum PRStatus { PR_FAILURE = -1, PR_SUCCESS = 0, }
pub type PRUnichar = PRUint16;
pub type PRWord = ::std::os::raw::c_long;
pub type PRUword = ::std::os::raw::c_ulong;
pub type uintn = PRUintn;
pub type intn = PRIntn;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uint64 = PRUint64;
pub type uint32 = PRUint32;
pub type uint16 = PRUint16;
pub type uint8 = PRUint8;
pub type int64 = PRInt64;
pub type int32 = PRInt32;
pub type int16 = PRInt16;
pub type int8 = PRInt8;
pub type float64 = PRFloat64;
pub type uptrdiff_t = PRUptrdiff;
pub type uprword_t = PRUword;
pub type prword_t = PRWord;
pub enum PRLibrary { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRStaticLinkTable {
    pub name: *const ::std::os::raw::c_char,
    pub fp: ::std::option::Option<extern "C" fn()>,
}
impl ::std::default::Default for PRStaticLinkTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRLibSpecType {
    PR_LibSpec_Pathname = 0,
    PR_LibSpec_MacNamedFragment = 1,
    PR_LibSpec_MacIndexedFragment = 2,
    PR_LibSpec_PathnameU = 3,
}
pub enum FSSpec { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRLibSpec {
    pub type_: PRLibSpecType,
    pub value: Union_Unnamed3,
}
impl ::std::default::Default for PRLibSpec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed3 {
    pub unsafe fn pathname(&mut self) -> *mut *const ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mac_named_fragment(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mac_indexed_fragment(&mut self) -> *mut Struct_Unnamed5 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pathname_u(&mut self) -> *mut *const PRUnichar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed4 {
    pub fsspec: *const FSSpec,
    pub name: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed5 {
    pub fsspec: *const FSSpec,
    pub index: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRFuncPtr = ::std::option::Option<extern "C" fn()>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed6 {
    _ISupper = 256,
    _ISlower = 512,
    _ISalpha = 1024,
    _ISdigit = 2048,
    _ISxdigit = 4096,
    _ISspace = 8192,
    _ISprint = 16384,
    _ISgraph = 32768,
    _ISblank = 1,
    _IScntrl = 2,
    _ISpunct = 4,
    _ISalnum = 8,
}
pub enum __locale_data { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::default::Default for __locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed7 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed8 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __WAIT_STATUS {
    pub _bindgen_data_: [u64; 1usize],
}
impl __WAIT_STATUS {
    pub unsafe fn __uptr(&mut self) -> *mut *mut wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for __WAIT_STATUS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub const PR_LOG_NOTICE: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
pub const PR_LOG_WARN: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_WARNING;
pub const PR_LOG_MIN: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
pub const PR_LOG_MAX: PRLogModuleLevel = PRLogModuleLevel::PR_LOG_DEBUG;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRLogModuleLevel {
    PR_LOG_NONE = 0,
    PR_LOG_ALWAYS = 1,
    PR_LOG_ERROR = 2,
    PR_LOG_WARNING = 3,
    PR_LOG_DEBUG = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRLogModuleInfo {
    pub name: *const ::std::os::raw::c_char,
    pub level: PRLogModuleLevel,
    pub next: *mut PRLogModuleInfo,
}
impl ::std::default::Default for PRLogModuleInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLArena {
    pub next: *mut PLArena,
    pub base: PRUword,
    pub limit: PRUword,
    pub avail: PRUword,
}
impl ::std::default::Default for PLArena {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLArenaPool {
    pub first: PLArena,
    pub current: *mut PLArena,
    pub arenasize: PRUint32,
    pub mask: PRUword,
}
impl ::std::default::Default for PLArenaPool {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PLMallocSizeFn =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *const ::std::os::raw::c_void)
                              -> size_t>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PORTCheapArenaPool_str {
    pub arena: PLArenaPool,
    pub magic: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PORTCheapArenaPool_str {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PORTCheapArenaPool = PORTCheapArenaPool_str;
pub type PORTCharConversionWSwapFunc =
    ::std::option::Option<unsafe extern "C" fn(toUnicode: PRBool,
                                               inBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               inBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               maxOutBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBufLen:
                                                   *mut ::std::os::raw::c_uint,
                                               swapBytes: PRBool) -> PRBool>;
pub type PORTCharConversionFunc =
    ::std::option::Option<unsafe extern "C" fn(toUnicode: PRBool,
                                               inBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               inBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBuf:
                                                   *mut ::std::os::raw::c_uchar,
                                               maxOutBufLen:
                                                   ::std::os::raw::c_uint,
                                               outBufLen:
                                                   *mut ::std::os::raw::c_uint)
                              -> PRBool>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECItemType {
    siBuffer = 0,
    siClearDataBuffer = 1,
    siCipherDataBuffer = 2,
    siDERCertBuffer = 3,
    siEncodedCertBuffer = 4,
    siDERNameBuffer = 5,
    siEncodedNameBuffer = 6,
    siAsciiNameString = 7,
    siAsciiString = 8,
    siDEROID = 9,
    siUnsignedInteger = 10,
    siUTCTime = 11,
    siGeneralizedTime = 12,
    siVisibleString = 13,
    siUTF8String = 14,
    siBMPString = 15,
}
pub type SECItem = SECItemStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECItemStr {
    pub type_: SECItemType,
    pub data: *mut ::std::os::raw::c_uchar,
    pub len: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SECItemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECItemArray = SECItemArrayStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECItemArrayStr {
    pub items: *mut SECItem,
    pub len: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SECItemArrayStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum _SECStatus { SECWouldBlock = -2, SECFailure = -1, SECSuccess = 0, }
pub type SECStatus = _SECStatus;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum _SECComparison {
    SECLessThan = -1,
    SECEqual = 0,
    SECGreaterThan = 1,
}
pub type SECComparison = _SECComparison;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed9,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: size_t)
        -> __ssize_t;
pub type __io_write_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *const ::std::os::raw::c_char, __n: size_t)
        -> __ssize_t;
pub type __io_seek_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __pos: *mut __off64_t, __w: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
pub type __io_close_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type fpos_t = _G_fpos_t;
pub type PLHashNumber = PRUint32;
pub type PLHashFunction =
    ::std::option::Option<unsafe extern "C" fn(key:
                                                   *const ::std::os::raw::c_void)
                              -> PLHashNumber>;
pub type PLHashComparator =
    ::std::option::Option<unsafe extern "C" fn(v1:
                                                   *const ::std::os::raw::c_void,
                                               v2:
                                                   *const ::std::os::raw::c_void)
                              -> PRIntn>;
pub type PLHashEnumerator =
    ::std::option::Option<unsafe extern "C" fn(he: *mut PLHashEntry,
                                               i: PRIntn,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> PRIntn>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLHashAllocOps {
    pub allocTable: ::std::option::Option<unsafe extern "C" fn(pool:
                                                                   *mut ::std::os::raw::c_void,
                                                               size: PRSize)
                                              -> *mut ::std::os::raw::c_void>,
    pub freeTable: ::std::option::Option<unsafe extern "C" fn(pool:
                                                                  *mut ::std::os::raw::c_void,
                                                              item:
                                                                  *mut ::std::os::raw::c_void)>,
    pub allocEntry: ::std::option::Option<unsafe extern "C" fn(pool:
                                                                   *mut ::std::os::raw::c_void,
                                                               key:
                                                                   *const ::std::os::raw::c_void)
                                              -> *mut PLHashEntry>,
    pub freeEntry: ::std::option::Option<unsafe extern "C" fn(pool:
                                                                  *mut ::std::os::raw::c_void,
                                                              he:
                                                                  *mut PLHashEntry,
                                                              flag: PRUintn)>,
}
impl ::std::default::Default for PLHashAllocOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLHashEntry {
    pub next: *mut PLHashEntry,
    pub keyHash: PLHashNumber,
    pub key: *const ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for PLHashEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PLHashTable {
    pub buckets: *mut *mut PLHashEntry,
    pub nentries: PRUint32,
    pub shift: PRUint32,
    pub keyHash: PLHashFunction,
    pub keyCompare: PLHashComparator,
    pub valueCompare: PLHashComparator,
    pub allocOps: *const PLHashAllocOps,
    pub allocPriv: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for PLHashTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECOidData = SECOidDataStr;
pub type SECAlgorithmID = SECAlgorithmIDStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECAlgorithmIDStr {
    pub algorithm: SECItem,
    pub parameters: SECItem,
}
impl ::std::default::Default for SECAlgorithmIDStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECOidTag {
    SEC_OID_UNKNOWN = 0,
    SEC_OID_MD2 = 1,
    SEC_OID_MD4 = 2,
    SEC_OID_MD5 = 3,
    SEC_OID_SHA1 = 4,
    SEC_OID_RC2_CBC = 5,
    SEC_OID_RC4 = 6,
    SEC_OID_DES_EDE3_CBC = 7,
    SEC_OID_RC5_CBC_PAD = 8,
    SEC_OID_DES_ECB = 9,
    SEC_OID_DES_CBC = 10,
    SEC_OID_DES_OFB = 11,
    SEC_OID_DES_CFB = 12,
    SEC_OID_DES_MAC = 13,
    SEC_OID_DES_EDE = 14,
    SEC_OID_ISO_SHA_WITH_RSA_SIGNATURE = 15,
    SEC_OID_PKCS1_RSA_ENCRYPTION = 16,
    SEC_OID_PKCS1_MD2_WITH_RSA_ENCRYPTION = 17,
    SEC_OID_PKCS1_MD4_WITH_RSA_ENCRYPTION = 18,
    SEC_OID_PKCS1_MD5_WITH_RSA_ENCRYPTION = 19,
    SEC_OID_PKCS1_SHA1_WITH_RSA_ENCRYPTION = 20,
    SEC_OID_PKCS5_PBE_WITH_MD2_AND_DES_CBC = 21,
    SEC_OID_PKCS5_PBE_WITH_MD5_AND_DES_CBC = 22,
    SEC_OID_PKCS5_PBE_WITH_SHA1_AND_DES_CBC = 23,
    SEC_OID_PKCS7 = 24,
    SEC_OID_PKCS7_DATA = 25,
    SEC_OID_PKCS7_SIGNED_DATA = 26,
    SEC_OID_PKCS7_ENVELOPED_DATA = 27,
    SEC_OID_PKCS7_SIGNED_ENVELOPED_DATA = 28,
    SEC_OID_PKCS7_DIGESTED_DATA = 29,
    SEC_OID_PKCS7_ENCRYPTED_DATA = 30,
    SEC_OID_PKCS9_EMAIL_ADDRESS = 31,
    SEC_OID_PKCS9_UNSTRUCTURED_NAME = 32,
    SEC_OID_PKCS9_CONTENT_TYPE = 33,
    SEC_OID_PKCS9_MESSAGE_DIGEST = 34,
    SEC_OID_PKCS9_SIGNING_TIME = 35,
    SEC_OID_PKCS9_COUNTER_SIGNATURE = 36,
    SEC_OID_PKCS9_CHALLENGE_PASSWORD = 37,
    SEC_OID_PKCS9_UNSTRUCTURED_ADDRESS = 38,
    SEC_OID_PKCS9_EXTENDED_CERTIFICATE_ATTRIBUTES = 39,
    SEC_OID_PKCS9_SMIME_CAPABILITIES = 40,
    SEC_OID_AVA_COMMON_NAME = 41,
    SEC_OID_AVA_COUNTRY_NAME = 42,
    SEC_OID_AVA_LOCALITY = 43,
    SEC_OID_AVA_STATE_OR_PROVINCE = 44,
    SEC_OID_AVA_ORGANIZATION_NAME = 45,
    SEC_OID_AVA_ORGANIZATIONAL_UNIT_NAME = 46,
    SEC_OID_AVA_DN_QUALIFIER = 47,
    SEC_OID_AVA_DC = 48,
    SEC_OID_NS_TYPE_GIF = 49,
    SEC_OID_NS_TYPE_JPEG = 50,
    SEC_OID_NS_TYPE_URL = 51,
    SEC_OID_NS_TYPE_HTML = 52,
    SEC_OID_NS_TYPE_CERT_SEQUENCE = 53,
    SEC_OID_MISSI_KEA_DSS_OLD = 54,
    SEC_OID_MISSI_DSS_OLD = 55,
    SEC_OID_MISSI_KEA_DSS = 56,
    SEC_OID_MISSI_DSS = 57,
    SEC_OID_MISSI_KEA = 58,
    SEC_OID_MISSI_ALT_KEA = 59,
    SEC_OID_NS_CERT_EXT_NETSCAPE_OK = 60,
    SEC_OID_NS_CERT_EXT_ISSUER_LOGO = 61,
    SEC_OID_NS_CERT_EXT_SUBJECT_LOGO = 62,
    SEC_OID_NS_CERT_EXT_CERT_TYPE = 63,
    SEC_OID_NS_CERT_EXT_BASE_URL = 64,
    SEC_OID_NS_CERT_EXT_REVOCATION_URL = 65,
    SEC_OID_NS_CERT_EXT_CA_REVOCATION_URL = 66,
    SEC_OID_NS_CERT_EXT_CA_CRL_URL = 67,
    SEC_OID_NS_CERT_EXT_CA_CERT_URL = 68,
    SEC_OID_NS_CERT_EXT_CERT_RENEWAL_URL = 69,
    SEC_OID_NS_CERT_EXT_CA_POLICY_URL = 70,
    SEC_OID_NS_CERT_EXT_HOMEPAGE_URL = 71,
    SEC_OID_NS_CERT_EXT_ENTITY_LOGO = 72,
    SEC_OID_NS_CERT_EXT_USER_PICTURE = 73,
    SEC_OID_NS_CERT_EXT_SSL_SERVER_NAME = 74,
    SEC_OID_NS_CERT_EXT_COMMENT = 75,
    SEC_OID_NS_CERT_EXT_LOST_PASSWORD_URL = 76,
    SEC_OID_NS_CERT_EXT_CERT_RENEWAL_TIME = 77,
    SEC_OID_NS_KEY_USAGE_GOVT_APPROVED = 78,
    SEC_OID_X509_SUBJECT_DIRECTORY_ATTR = 79,
    SEC_OID_X509_SUBJECT_KEY_ID = 80,
    SEC_OID_X509_KEY_USAGE = 81,
    SEC_OID_X509_PRIVATE_KEY_USAGE_PERIOD = 82,
    SEC_OID_X509_SUBJECT_ALT_NAME = 83,
    SEC_OID_X509_ISSUER_ALT_NAME = 84,
    SEC_OID_X509_BASIC_CONSTRAINTS = 85,
    SEC_OID_X509_NAME_CONSTRAINTS = 86,
    SEC_OID_X509_CRL_DIST_POINTS = 87,
    SEC_OID_X509_CERTIFICATE_POLICIES = 88,
    SEC_OID_X509_POLICY_MAPPINGS = 89,
    SEC_OID_X509_POLICY_CONSTRAINTS = 90,
    SEC_OID_X509_AUTH_KEY_ID = 91,
    SEC_OID_X509_EXT_KEY_USAGE = 92,
    SEC_OID_X509_AUTH_INFO_ACCESS = 93,
    SEC_OID_X509_CRL_NUMBER = 94,
    SEC_OID_X509_REASON_CODE = 95,
    SEC_OID_X509_INVALID_DATE = 96,
    SEC_OID_X500_RSA_ENCRYPTION = 97,
    SEC_OID_RFC1274_UID = 98,
    SEC_OID_RFC1274_MAIL = 99,
    SEC_OID_PKCS12 = 100,
    SEC_OID_PKCS12_MODE_IDS = 101,
    SEC_OID_PKCS12_ESPVK_IDS = 102,
    SEC_OID_PKCS12_BAG_IDS = 103,
    SEC_OID_PKCS12_CERT_BAG_IDS = 104,
    SEC_OID_PKCS12_OIDS = 105,
    SEC_OID_PKCS12_PBE_IDS = 106,
    SEC_OID_PKCS12_SIGNATURE_IDS = 107,
    SEC_OID_PKCS12_ENVELOPING_IDS = 108,
    SEC_OID_PKCS12_PKCS8_KEY_SHROUDING = 109,
    SEC_OID_PKCS12_KEY_BAG_ID = 110,
    SEC_OID_PKCS12_CERT_AND_CRL_BAG_ID = 111,
    SEC_OID_PKCS12_SECRET_BAG_ID = 112,
    SEC_OID_PKCS12_X509_CERT_CRL_BAG = 113,
    SEC_OID_PKCS12_SDSI_CERT_BAG = 114,
    SEC_OID_PKCS12_PBE_WITH_SHA1_AND_128_BIT_RC4 = 115,
    SEC_OID_PKCS12_PBE_WITH_SHA1_AND_40_BIT_RC4 = 116,
    SEC_OID_PKCS12_PBE_WITH_SHA1_AND_TRIPLE_DES_CBC = 117,
    SEC_OID_PKCS12_PBE_WITH_SHA1_AND_128_BIT_RC2_CBC = 118,
    SEC_OID_PKCS12_PBE_WITH_SHA1_AND_40_BIT_RC2_CBC = 119,
    SEC_OID_PKCS12_RSA_ENCRYPTION_WITH_128_BIT_RC4 = 120,
    SEC_OID_PKCS12_RSA_ENCRYPTION_WITH_40_BIT_RC4 = 121,
    SEC_OID_PKCS12_RSA_ENCRYPTION_WITH_TRIPLE_DES = 122,
    SEC_OID_PKCS12_RSA_SIGNATURE_WITH_SHA1_DIGEST = 123,
    SEC_OID_ANSIX9_DSA_SIGNATURE = 124,
    SEC_OID_ANSIX9_DSA_SIGNATURE_WITH_SHA1_DIGEST = 125,
    SEC_OID_BOGUS_DSA_SIGNATURE_WITH_SHA1_DIGEST = 126,
    SEC_OID_VERISIGN_USER_NOTICES = 127,
    SEC_OID_PKIX_CPS_POINTER_QUALIFIER = 128,
    SEC_OID_PKIX_USER_NOTICE_QUALIFIER = 129,
    SEC_OID_PKIX_OCSP = 130,
    SEC_OID_PKIX_OCSP_BASIC_RESPONSE = 131,
    SEC_OID_PKIX_OCSP_NONCE = 132,
    SEC_OID_PKIX_OCSP_CRL = 133,
    SEC_OID_PKIX_OCSP_RESPONSE = 134,
    SEC_OID_PKIX_OCSP_NO_CHECK = 135,
    SEC_OID_PKIX_OCSP_ARCHIVE_CUTOFF = 136,
    SEC_OID_PKIX_OCSP_SERVICE_LOCATOR = 137,
    SEC_OID_PKIX_REGCTRL_REGTOKEN = 138,
    SEC_OID_PKIX_REGCTRL_AUTHENTICATOR = 139,
    SEC_OID_PKIX_REGCTRL_PKIPUBINFO = 140,
    SEC_OID_PKIX_REGCTRL_PKI_ARCH_OPTIONS = 141,
    SEC_OID_PKIX_REGCTRL_OLD_CERT_ID = 142,
    SEC_OID_PKIX_REGCTRL_PROTOCOL_ENC_KEY = 143,
    SEC_OID_PKIX_REGINFO_UTF8_PAIRS = 144,
    SEC_OID_PKIX_REGINFO_CERT_REQUEST = 145,
    SEC_OID_EXT_KEY_USAGE_SERVER_AUTH = 146,
    SEC_OID_EXT_KEY_USAGE_CLIENT_AUTH = 147,
    SEC_OID_EXT_KEY_USAGE_CODE_SIGN = 148,
    SEC_OID_EXT_KEY_USAGE_EMAIL_PROTECT = 149,
    SEC_OID_EXT_KEY_USAGE_TIME_STAMP = 150,
    SEC_OID_OCSP_RESPONDER = 151,
    SEC_OID_NETSCAPE_SMIME_KEA = 152,
    SEC_OID_FORTEZZA_SKIPJACK = 153,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_128_BIT_RC4 = 154,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_40_BIT_RC4 = 155,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_3KEY_TRIPLE_DES_CBC = 156,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_2KEY_TRIPLE_DES_CBC = 157,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_128_BIT_RC2_CBC = 158,
    SEC_OID_PKCS12_V2_PBE_WITH_SHA1_AND_40_BIT_RC2_CBC = 159,
    SEC_OID_PKCS12_SAFE_CONTENTS_ID = 160,
    SEC_OID_PKCS12_PKCS8_SHROUDED_KEY_BAG_ID = 161,
    SEC_OID_PKCS12_V1_KEY_BAG_ID = 162,
    SEC_OID_PKCS12_V1_PKCS8_SHROUDED_KEY_BAG_ID = 163,
    SEC_OID_PKCS12_V1_CERT_BAG_ID = 164,
    SEC_OID_PKCS12_V1_CRL_BAG_ID = 165,
    SEC_OID_PKCS12_V1_SECRET_BAG_ID = 166,
    SEC_OID_PKCS12_V1_SAFE_CONTENTS_BAG_ID = 167,
    SEC_OID_PKCS9_X509_CERT = 168,
    SEC_OID_PKCS9_SDSI_CERT = 169,
    SEC_OID_PKCS9_X509_CRL = 170,
    SEC_OID_PKCS9_FRIENDLY_NAME = 171,
    SEC_OID_PKCS9_LOCAL_KEY_ID = 172,
    SEC_OID_BOGUS_KEY_USAGE = 173,
    SEC_OID_X942_DIFFIE_HELMAN_KEY = 174,
    SEC_OID_NETSCAPE_NICKNAME = 175,
    SEC_OID_NETSCAPE_RECOVERY_REQUEST = 176,
    SEC_OID_CERT_RENEWAL_LOCATOR = 177,
    SEC_OID_NS_CERT_EXT_SCOPE_OF_USE = 178,
    SEC_OID_CMS_EPHEMERAL_STATIC_DIFFIE_HELLMAN = 179,
    SEC_OID_CMS_3DES_KEY_WRAP = 180,
    SEC_OID_CMS_RC2_KEY_WRAP = 181,
    SEC_OID_SMIME_ENCRYPTION_KEY_PREFERENCE = 182,
    SEC_OID_AES_128_ECB = 183,
    SEC_OID_AES_128_CBC = 184,
    SEC_OID_AES_192_ECB = 185,
    SEC_OID_AES_192_CBC = 186,
    SEC_OID_AES_256_ECB = 187,
    SEC_OID_AES_256_CBC = 188,
    SEC_OID_SDN702_DSA_SIGNATURE = 189,
    SEC_OID_MS_SMIME_ENCRYPTION_KEY_PREFERENCE = 190,
    SEC_OID_SHA256 = 191,
    SEC_OID_SHA384 = 192,
    SEC_OID_SHA512 = 193,
    SEC_OID_PKCS1_SHA256_WITH_RSA_ENCRYPTION = 194,
    SEC_OID_PKCS1_SHA384_WITH_RSA_ENCRYPTION = 195,
    SEC_OID_PKCS1_SHA512_WITH_RSA_ENCRYPTION = 196,
    SEC_OID_AES_128_KEY_WRAP = 197,
    SEC_OID_AES_192_KEY_WRAP = 198,
    SEC_OID_AES_256_KEY_WRAP = 199,
    SEC_OID_ANSIX962_EC_PUBLIC_KEY = 200,
    SEC_OID_ANSIX962_ECDSA_SHA1_SIGNATURE = 201,
    SEC_OID_ANSIX962_EC_PRIME192V1 = 202,
    SEC_OID_ANSIX962_EC_PRIME192V2 = 203,
    SEC_OID_ANSIX962_EC_PRIME192V3 = 204,
    SEC_OID_ANSIX962_EC_PRIME239V1 = 205,
    SEC_OID_ANSIX962_EC_PRIME239V2 = 206,
    SEC_OID_ANSIX962_EC_PRIME239V3 = 207,
    SEC_OID_ANSIX962_EC_PRIME256V1 = 208,
    SEC_OID_SECG_EC_SECP112R1 = 209,
    SEC_OID_SECG_EC_SECP112R2 = 210,
    SEC_OID_SECG_EC_SECP128R1 = 211,
    SEC_OID_SECG_EC_SECP128R2 = 212,
    SEC_OID_SECG_EC_SECP160K1 = 213,
    SEC_OID_SECG_EC_SECP160R1 = 214,
    SEC_OID_SECG_EC_SECP160R2 = 215,
    SEC_OID_SECG_EC_SECP192K1 = 216,
    SEC_OID_SECG_EC_SECP224K1 = 217,
    SEC_OID_SECG_EC_SECP224R1 = 218,
    SEC_OID_SECG_EC_SECP256K1 = 219,
    SEC_OID_SECG_EC_SECP384R1 = 220,
    SEC_OID_SECG_EC_SECP521R1 = 221,
    SEC_OID_ANSIX962_EC_C2PNB163V1 = 222,
    SEC_OID_ANSIX962_EC_C2PNB163V2 = 223,
    SEC_OID_ANSIX962_EC_C2PNB163V3 = 224,
    SEC_OID_ANSIX962_EC_C2PNB176V1 = 225,
    SEC_OID_ANSIX962_EC_C2TNB191V1 = 226,
    SEC_OID_ANSIX962_EC_C2TNB191V2 = 227,
    SEC_OID_ANSIX962_EC_C2TNB191V3 = 228,
    SEC_OID_ANSIX962_EC_C2ONB191V4 = 229,
    SEC_OID_ANSIX962_EC_C2ONB191V5 = 230,
    SEC_OID_ANSIX962_EC_C2PNB208W1 = 231,
    SEC_OID_ANSIX962_EC_C2TNB239V1 = 232,
    SEC_OID_ANSIX962_EC_C2TNB239V2 = 233,
    SEC_OID_ANSIX962_EC_C2TNB239V3 = 234,
    SEC_OID_ANSIX962_EC_C2ONB239V4 = 235,
    SEC_OID_ANSIX962_EC_C2ONB239V5 = 236,
    SEC_OID_ANSIX962_EC_C2PNB272W1 = 237,
    SEC_OID_ANSIX962_EC_C2PNB304W1 = 238,
    SEC_OID_ANSIX962_EC_C2TNB359V1 = 239,
    SEC_OID_ANSIX962_EC_C2PNB368W1 = 240,
    SEC_OID_ANSIX962_EC_C2TNB431R1 = 241,
    SEC_OID_SECG_EC_SECT113R1 = 242,
    SEC_OID_SECG_EC_SECT113R2 = 243,
    SEC_OID_SECG_EC_SECT131R1 = 244,
    SEC_OID_SECG_EC_SECT131R2 = 245,
    SEC_OID_SECG_EC_SECT163K1 = 246,
    SEC_OID_SECG_EC_SECT163R1 = 247,
    SEC_OID_SECG_EC_SECT163R2 = 248,
    SEC_OID_SECG_EC_SECT193R1 = 249,
    SEC_OID_SECG_EC_SECT193R2 = 250,
    SEC_OID_SECG_EC_SECT233K1 = 251,
    SEC_OID_SECG_EC_SECT233R1 = 252,
    SEC_OID_SECG_EC_SECT239K1 = 253,
    SEC_OID_SECG_EC_SECT283K1 = 254,
    SEC_OID_SECG_EC_SECT283R1 = 255,
    SEC_OID_SECG_EC_SECT409K1 = 256,
    SEC_OID_SECG_EC_SECT409R1 = 257,
    SEC_OID_SECG_EC_SECT571K1 = 258,
    SEC_OID_SECG_EC_SECT571R1 = 259,
    SEC_OID_NETSCAPE_AOLSCREENNAME = 260,
    SEC_OID_AVA_SURNAME = 261,
    SEC_OID_AVA_SERIAL_NUMBER = 262,
    SEC_OID_AVA_STREET_ADDRESS = 263,
    SEC_OID_AVA_TITLE = 264,
    SEC_OID_AVA_POSTAL_ADDRESS = 265,
    SEC_OID_AVA_POSTAL_CODE = 266,
    SEC_OID_AVA_POST_OFFICE_BOX = 267,
    SEC_OID_AVA_GIVEN_NAME = 268,
    SEC_OID_AVA_INITIALS = 269,
    SEC_OID_AVA_GENERATION_QUALIFIER = 270,
    SEC_OID_AVA_HOUSE_IDENTIFIER = 271,
    SEC_OID_AVA_PSEUDONYM = 272,
    SEC_OID_PKIX_CA_ISSUERS = 273,
    SEC_OID_PKCS9_EXTENSION_REQUEST = 274,
    SEC_OID_ANSIX962_ECDSA_SIGNATURE_RECOMMENDED_DIGEST = 275,
    SEC_OID_ANSIX962_ECDSA_SIGNATURE_SPECIFIED_DIGEST = 276,
    SEC_OID_ANSIX962_ECDSA_SHA224_SIGNATURE = 277,
    SEC_OID_ANSIX962_ECDSA_SHA256_SIGNATURE = 278,
    SEC_OID_ANSIX962_ECDSA_SHA384_SIGNATURE = 279,
    SEC_OID_ANSIX962_ECDSA_SHA512_SIGNATURE = 280,
    SEC_OID_X509_HOLD_INSTRUCTION_CODE = 281,
    SEC_OID_X509_DELTA_CRL_INDICATOR = 282,
    SEC_OID_X509_ISSUING_DISTRIBUTION_POINT = 283,
    SEC_OID_X509_CERT_ISSUER = 284,
    SEC_OID_X509_FRESHEST_CRL = 285,
    SEC_OID_X509_INHIBIT_ANY_POLICY = 286,
    SEC_OID_X509_SUBJECT_INFO_ACCESS = 287,
    SEC_OID_CAMELLIA_128_CBC = 288,
    SEC_OID_CAMELLIA_192_CBC = 289,
    SEC_OID_CAMELLIA_256_CBC = 290,
    SEC_OID_PKCS5_PBKDF2 = 291,
    SEC_OID_PKCS5_PBES2 = 292,
    SEC_OID_PKCS5_PBMAC1 = 293,
    SEC_OID_HMAC_SHA1 = 294,
    SEC_OID_HMAC_SHA224 = 295,
    SEC_OID_HMAC_SHA256 = 296,
    SEC_OID_HMAC_SHA384 = 297,
    SEC_OID_HMAC_SHA512 = 298,
    SEC_OID_PKIX_TIMESTAMPING = 299,
    SEC_OID_PKIX_CA_REPOSITORY = 300,
    SEC_OID_ISO_SHA1_WITH_RSA_SIGNATURE = 301,
    SEC_OID_SEED_CBC = 302,
    SEC_OID_X509_ANY_POLICY = 303,
    SEC_OID_PKCS1_RSA_OAEP_ENCRYPTION = 304,
    SEC_OID_PKCS1_MGF1 = 305,
    SEC_OID_PKCS1_PSPECIFIED = 306,
    SEC_OID_PKCS1_RSA_PSS_SIGNATURE = 307,
    SEC_OID_PKCS1_SHA224_WITH_RSA_ENCRYPTION = 308,
    SEC_OID_SHA224 = 309,
    SEC_OID_EV_INCORPORATION_LOCALITY = 310,
    SEC_OID_EV_INCORPORATION_STATE = 311,
    SEC_OID_EV_INCORPORATION_COUNTRY = 312,
    SEC_OID_BUSINESS_CATEGORY = 313,
    SEC_OID_NIST_DSA_SIGNATURE_WITH_SHA224_DIGEST = 314,
    SEC_OID_NIST_DSA_SIGNATURE_WITH_SHA256_DIGEST = 315,
    SEC_OID_MS_EXT_KEY_USAGE_CTL_SIGNING = 316,
    SEC_OID_AVA_NAME = 317,
    SEC_OID_AES_128_GCM = 318,
    SEC_OID_AES_192_GCM = 319,
    SEC_OID_AES_256_GCM = 320,
    SEC_OID_IDEA_CBC = 321,
    SEC_OID_RC2_40_CBC = 322,
    SEC_OID_DES_40_CBC = 323,
    SEC_OID_RC4_40 = 324,
    SEC_OID_RC4_56 = 325,
    SEC_OID_NULL_CIPHER = 326,
    SEC_OID_HMAC_MD5 = 327,
    SEC_OID_TLS_RSA = 328,
    SEC_OID_TLS_DHE_RSA = 329,
    SEC_OID_TLS_DHE_DSS = 330,
    SEC_OID_TLS_DH_RSA = 331,
    SEC_OID_TLS_DH_DSS = 332,
    SEC_OID_TLS_DH_ANON = 333,
    SEC_OID_TLS_ECDHE_ECDSA = 334,
    SEC_OID_TLS_ECDHE_RSA = 335,
    SEC_OID_TLS_ECDH_ECDSA = 336,
    SEC_OID_TLS_ECDH_RSA = 337,
    SEC_OID_TLS_ECDH_ANON = 338,
    SEC_OID_TLS_RSA_EXPORT = 339,
    SEC_OID_TLS_DHE_RSA_EXPORT = 340,
    SEC_OID_TLS_DHE_DSS_EXPORT = 341,
    SEC_OID_TLS_DH_RSA_EXPORT = 342,
    SEC_OID_TLS_DH_DSS_EXPORT = 343,
    SEC_OID_TLS_DH_ANON_EXPORT = 344,
    SEC_OID_APPLY_SSL_POLICY = 345,
    SEC_OID_CHACHA20_POLY1305 = 346,
    SEC_OID_TLS_ECDHE_PSK = 347,
    SEC_OID_TOTAL = 348,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECSupportExtenTag {
    INVALID_CERT_EXTENSION = 0,
    UNSUPPORTED_CERT_EXTENSION = 1,
    SUPPORTED_CERT_EXTENSION = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECOidDataStr {
    pub oid: SECItem,
    pub offset: SECOidTag,
    pub desc: *const ::std::os::raw::c_char,
    pub mechanism: ::std::os::raw::c_ulong,
    pub supportedExtension: SECSupportExtenTag,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SECOidDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_ASN1Template_struct {
    pub kind: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
    pub sub: *const ::std::os::raw::c_void,
    pub size: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for sec_ASN1Template_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SEC_ASN1Template = sec_ASN1Template_struct;
pub type SEC_ASN1TemplateChooser =
    unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void, enc: PRBool)
        -> *const SEC_ASN1Template;
pub type SEC_ASN1TemplateChooserPtr = *mut SEC_ASN1TemplateChooser;
pub enum sec_DecoderContext_struct { }
pub type SEC_ASN1DecoderContext = sec_DecoderContext_struct;
pub enum sec_EncoderContext_struct { }
pub type SEC_ASN1EncoderContext = sec_EncoderContext_struct;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SEC_ASN1EncodingPart {
    SEC_ASN1_Identifier = 0,
    SEC_ASN1_Length = 1,
    SEC_ASN1_Contents = 2,
    SEC_ASN1_EndOfContents = 3,
}
pub type SEC_ASN1NotifyProc =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               before: PRBool,
                                               dest:
                                                   *mut ::std::os::raw::c_void,
                                               real_depth:
                                                   ::std::os::raw::c_int)>;
pub type SEC_ASN1WriteProc =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               data:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_ulong,
                                               depth: ::std::os::raw::c_int,
                                               data_kind:
                                                   SEC_ASN1EncodingPart)>;
pub type DERTemplate = DERTemplateStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct DERTemplateStr {
    pub kind: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_uint,
    pub sub: *mut DERTemplate,
    pub arg: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for DERTemplateStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_BYTE = ::std::os::raw::c_uchar;
pub type CK_CHAR = CK_BYTE;
pub type CK_UTF8CHAR = CK_BYTE;
pub type CK_BBOOL = CK_BYTE;
pub type CK_ULONG = ::std::os::raw::c_ulong;
pub type CK_LONG = ::std::os::raw::c_long;
pub type CK_FLAGS = CK_ULONG;
pub type CK_BYTE_PTR = *mut CK_BYTE;
pub type CK_CHAR_PTR = *mut CK_CHAR;
pub type CK_UTF8CHAR_PTR = *mut CK_UTF8CHAR;
pub type CK_ULONG_PTR = *mut CK_ULONG;
pub type CK_VOID_PTR = *mut ::std::os::raw::c_void;
pub type CK_VOID_PTR_PTR = *mut CK_VOID_PTR;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_VERSION {
    pub major: CK_BYTE,
    pub minor: CK_BYTE,
}
impl ::std::default::Default for CK_VERSION {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_VERSION_PTR = *mut CK_VERSION;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_INFO {
    pub cryptokiVersion: CK_VERSION,
    pub manufacturerID: [CK_UTF8CHAR; 32usize],
    pub flags: CK_FLAGS,
    pub libraryDescription: [CK_UTF8CHAR; 32usize],
    pub libraryVersion: CK_VERSION,
}
impl ::std::default::Default for CK_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_INFO_PTR = *mut CK_INFO;
pub type CK_NOTIFICATION = CK_ULONG;
pub type CK_SLOT_ID = CK_ULONG;
pub type CK_SLOT_ID_PTR = *mut CK_SLOT_ID;
#[repr(C)]
#[derive(Copy)]
pub struct CK_SLOT_INFO {
    pub slotDescription: [CK_UTF8CHAR; 64usize],
    pub manufacturerID: [CK_UTF8CHAR; 32usize],
    pub flags: CK_FLAGS,
    pub hardwareVersion: CK_VERSION,
    pub firmwareVersion: CK_VERSION,
}
impl ::std::clone::Clone for CK_SLOT_INFO {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for CK_SLOT_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SLOT_INFO_PTR = *mut CK_SLOT_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TOKEN_INFO {
    pub label: [CK_UTF8CHAR; 32usize],
    pub manufacturerID: [CK_UTF8CHAR; 32usize],
    pub model: [CK_UTF8CHAR; 16usize],
    pub serialNumber: [CK_CHAR; 16usize],
    pub flags: CK_FLAGS,
    pub ulMaxSessionCount: CK_ULONG,
    pub ulSessionCount: CK_ULONG,
    pub ulMaxRwSessionCount: CK_ULONG,
    pub ulRwSessionCount: CK_ULONG,
    pub ulMaxPinLen: CK_ULONG,
    pub ulMinPinLen: CK_ULONG,
    pub ulTotalPublicMemory: CK_ULONG,
    pub ulFreePublicMemory: CK_ULONG,
    pub ulTotalPrivateMemory: CK_ULONG,
    pub ulFreePrivateMemory: CK_ULONG,
    pub hardwareVersion: CK_VERSION,
    pub firmwareVersion: CK_VERSION,
    pub utcTime: [CK_CHAR; 16usize],
}
impl ::std::default::Default for CK_TOKEN_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TOKEN_INFO_PTR = *mut CK_TOKEN_INFO;
pub type CK_SESSION_HANDLE = CK_ULONG;
pub type CK_SESSION_HANDLE_PTR = *mut CK_SESSION_HANDLE;
pub type CK_USER_TYPE = CK_ULONG;
pub type CK_STATE = CK_ULONG;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SESSION_INFO {
    pub slotID: CK_SLOT_ID,
    pub state: CK_STATE,
    pub flags: CK_FLAGS,
    pub ulDeviceError: CK_ULONG,
}
impl ::std::default::Default for CK_SESSION_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SESSION_INFO_PTR = *mut CK_SESSION_INFO;
pub type CK_OBJECT_HANDLE = CK_ULONG;
pub type CK_OBJECT_HANDLE_PTR = *mut CK_OBJECT_HANDLE;
pub type CK_OBJECT_CLASS = CK_ULONG;
pub type CK_OBJECT_CLASS_PTR = *mut CK_OBJECT_CLASS;
pub type CK_HW_FEATURE_TYPE = CK_ULONG;
pub type CK_KEY_TYPE = CK_ULONG;
pub type CK_CERTIFICATE_TYPE = CK_ULONG;
pub type CK_ATTRIBUTE_TYPE = CK_ULONG;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_ATTRIBUTE {
    pub type_: CK_ATTRIBUTE_TYPE,
    pub pValue: CK_VOID_PTR,
    pub ulValueLen: CK_ULONG,
}
impl ::std::default::Default for CK_ATTRIBUTE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_ATTRIBUTE_PTR = *mut CK_ATTRIBUTE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_DATE {
    pub year: [CK_CHAR; 4usize],
    pub month: [CK_CHAR; 2usize],
    pub day: [CK_CHAR; 2usize],
}
impl ::std::default::Default for CK_DATE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_MECHANISM_TYPE = CK_ULONG;
pub type CK_MECHANISM_TYPE_PTR = *mut CK_MECHANISM_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_MECHANISM {
    pub mechanism: CK_MECHANISM_TYPE,
    pub pParameter: CK_VOID_PTR,
    pub ulParameterLen: CK_ULONG,
}
impl ::std::default::Default for CK_MECHANISM {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_MECHANISM_PTR = *mut CK_MECHANISM;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_MECHANISM_INFO {
    pub ulMinKeySize: CK_ULONG,
    pub ulMaxKeySize: CK_ULONG,
    pub flags: CK_FLAGS,
}
impl ::std::default::Default for CK_MECHANISM_INFO {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_MECHANISM_INFO_PTR = *mut CK_MECHANISM_INFO;
pub type CK_RV = CK_ULONG;
pub type CK_NOTIFY =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        event: CK_NOTIFICATION,
                                        pApplication: CK_VOID_PTR) -> CK_RV>;
pub type CK_FUNCTION_LIST_PTR = *mut CK_FUNCTION_LIST;
pub type CK_FUNCTION_LIST_PTR_PTR = *mut CK_FUNCTION_LIST_PTR;
pub type CK_CREATEMUTEX =
    ::std::option::Option<extern "C" fn(ppMutex: CK_VOID_PTR_PTR) -> CK_RV>;
pub type CK_DESTROYMUTEX =
    ::std::option::Option<extern "C" fn(pMutex: CK_VOID_PTR) -> CK_RV>;
pub type CK_LOCKMUTEX =
    ::std::option::Option<extern "C" fn(pMutex: CK_VOID_PTR) -> CK_RV>;
pub type CK_UNLOCKMUTEX =
    ::std::option::Option<extern "C" fn(pMutex: CK_VOID_PTR) -> CK_RV>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_C_INITIALIZE_ARGS {
    pub CreateMutex: CK_CREATEMUTEX,
    pub DestroyMutex: CK_DESTROYMUTEX,
    pub LockMutex: CK_LOCKMUTEX,
    pub UnlockMutex: CK_UNLOCKMUTEX,
    pub flags: CK_FLAGS,
    pub LibraryParameters: *mut CK_CHAR_PTR,
    pub pReserved: CK_VOID_PTR,
}
impl ::std::default::Default for CK_C_INITIALIZE_ARGS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_C_INITIALIZE_ARGS_PTR = *mut CK_C_INITIALIZE_ARGS;
pub type CK_RSA_PKCS_MGF_TYPE = CK_ULONG;
pub type CK_RSA_PKCS_MGF_TYPE_PTR = *mut CK_RSA_PKCS_MGF_TYPE;
pub type CK_RSA_PKCS_OAEP_SOURCE_TYPE = CK_ULONG;
pub type CK_RSA_PKCS_OAEP_SOURCE_TYPE_PTR = *mut CK_RSA_PKCS_OAEP_SOURCE_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RSA_PKCS_OAEP_PARAMS {
    pub hashAlg: CK_MECHANISM_TYPE,
    pub mgf: CK_RSA_PKCS_MGF_TYPE,
    pub source: CK_RSA_PKCS_OAEP_SOURCE_TYPE,
    pub pSourceData: CK_VOID_PTR,
    pub ulSourceDataLen: CK_ULONG,
}
impl ::std::default::Default for CK_RSA_PKCS_OAEP_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RSA_PKCS_OAEP_PARAMS_PTR = *mut CK_RSA_PKCS_OAEP_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RSA_PKCS_PSS_PARAMS {
    pub hashAlg: CK_MECHANISM_TYPE,
    pub mgf: CK_RSA_PKCS_MGF_TYPE,
    pub sLen: CK_ULONG,
}
impl ::std::default::Default for CK_RSA_PKCS_PSS_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RSA_PKCS_PSS_PARAMS_PTR = *mut CK_RSA_PKCS_PSS_PARAMS;
pub type CK_EC_KDF_TYPE = CK_ULONG;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_ECDH1_DERIVE_PARAMS {
    pub kdf: CK_EC_KDF_TYPE,
    pub ulSharedDataLen: CK_ULONG,
    pub pSharedData: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_ECDH1_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_ECDH1_DERIVE_PARAMS_PTR = *mut CK_ECDH1_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_ECDH2_DERIVE_PARAMS {
    pub kdf: CK_EC_KDF_TYPE,
    pub ulSharedDataLen: CK_ULONG,
    pub pSharedData: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_ECDH2_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_ECDH2_DERIVE_PARAMS_PTR = *mut CK_ECDH2_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_ECMQV_DERIVE_PARAMS {
    pub kdf: CK_EC_KDF_TYPE,
    pub ulSharedDataLen: CK_ULONG,
    pub pSharedData: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
    pub publicKey: CK_OBJECT_HANDLE,
}
impl ::std::default::Default for CK_ECMQV_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_ECMQV_DERIVE_PARAMS_PTR = *mut CK_ECMQV_DERIVE_PARAMS;
pub type CK_X9_42_DH_KDF_TYPE = CK_ULONG;
pub type CK_X9_42_DH_KDF_TYPE_PTR = *mut CK_X9_42_DH_KDF_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_X9_42_DH1_DERIVE_PARAMS {
    pub kdf: CK_X9_42_DH_KDF_TYPE,
    pub ulOtherInfoLen: CK_ULONG,
    pub pOtherInfo: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_X9_42_DH1_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_X9_42_DH1_DERIVE_PARAMS_PTR = *mut CK_X9_42_DH1_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_X9_42_DH2_DERIVE_PARAMS {
    pub kdf: CK_X9_42_DH_KDF_TYPE,
    pub ulOtherInfoLen: CK_ULONG,
    pub pOtherInfo: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_X9_42_DH2_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_X9_42_DH2_DERIVE_PARAMS_PTR = *mut CK_X9_42_DH2_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_X9_42_MQV_DERIVE_PARAMS {
    pub kdf: CK_X9_42_DH_KDF_TYPE,
    pub ulOtherInfoLen: CK_ULONG,
    pub pOtherInfo: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
    pub publicKey: CK_OBJECT_HANDLE,
}
impl ::std::default::Default for CK_X9_42_MQV_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_X9_42_MQV_DERIVE_PARAMS_PTR = *mut CK_X9_42_MQV_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_KEA_DERIVE_PARAMS {
    pub isSender: CK_BBOOL,
    pub ulRandomLen: CK_ULONG,
    pub pRandomA: CK_BYTE_PTR,
    pub pRandomB: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_KEA_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_KEA_DERIVE_PARAMS_PTR = *mut CK_KEA_DERIVE_PARAMS;
pub type CK_RC2_PARAMS = CK_ULONG;
pub type CK_RC2_PARAMS_PTR = *mut CK_RC2_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RC2_CBC_PARAMS {
    pub ulEffectiveBits: CK_ULONG,
    pub iv: [CK_BYTE; 8usize],
}
impl ::std::default::Default for CK_RC2_CBC_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RC2_CBC_PARAMS_PTR = *mut CK_RC2_CBC_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RC2_MAC_GENERAL_PARAMS {
    pub ulEffectiveBits: CK_ULONG,
    pub ulMacLength: CK_ULONG,
}
impl ::std::default::Default for CK_RC2_MAC_GENERAL_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RC2_MAC_GENERAL_PARAMS_PTR = *mut CK_RC2_MAC_GENERAL_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RC5_PARAMS {
    pub ulWordsize: CK_ULONG,
    pub ulRounds: CK_ULONG,
}
impl ::std::default::Default for CK_RC5_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RC5_PARAMS_PTR = *mut CK_RC5_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RC5_CBC_PARAMS {
    pub ulWordsize: CK_ULONG,
    pub ulRounds: CK_ULONG,
    pub pIv: CK_BYTE_PTR,
    pub ulIvLen: CK_ULONG,
}
impl ::std::default::Default for CK_RC5_CBC_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RC5_CBC_PARAMS_PTR = *mut CK_RC5_CBC_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_RC5_MAC_GENERAL_PARAMS {
    pub ulWordsize: CK_ULONG,
    pub ulRounds: CK_ULONG,
    pub ulMacLength: CK_ULONG,
}
impl ::std::default::Default for CK_RC5_MAC_GENERAL_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_RC5_MAC_GENERAL_PARAMS_PTR = *mut CK_RC5_MAC_GENERAL_PARAMS;
pub type CK_MAC_GENERAL_PARAMS = CK_ULONG;
pub type CK_MAC_GENERAL_PARAMS_PTR = *mut CK_MAC_GENERAL_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_DES_CBC_ENCRYPT_DATA_PARAMS {
    pub iv: [CK_BYTE; 8usize],
    pub pData: CK_BYTE_PTR,
    pub length: CK_ULONG,
}
impl ::std::default::Default for CK_DES_CBC_ENCRYPT_DATA_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_DES_CBC_ENCRYPT_DATA_PARAMS_PTR =
    *mut CK_DES_CBC_ENCRYPT_DATA_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_AES_CBC_ENCRYPT_DATA_PARAMS {
    pub iv: [CK_BYTE; 16usize],
    pub pData: CK_BYTE_PTR,
    pub length: CK_ULONG,
}
impl ::std::default::Default for CK_AES_CBC_ENCRYPT_DATA_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_AES_CBC_ENCRYPT_DATA_PARAMS_PTR =
    *mut CK_AES_CBC_ENCRYPT_DATA_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_AES_CTR_PARAMS {
    pub ulCounterBits: CK_ULONG,
    pub cb: [CK_BYTE; 16usize],
}
impl ::std::default::Default for CK_AES_CTR_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_AES_CTR_PARAMS_PTR = *mut CK_AES_CTR_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_GCM_PARAMS {
    pub pIv: CK_BYTE_PTR,
    pub ulIvLen: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
    pub ulTagBits: CK_ULONG,
}
impl ::std::default::Default for CK_GCM_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_GCM_PARAMS_PTR = *mut CK_GCM_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_CCM_PARAMS {
    pub ulDataLen: CK_ULONG,
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceLen: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
    pub ulMACLen: CK_ULONG,
}
impl ::std::default::Default for CK_CCM_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_CCM_PARAMS_PTR = *mut CK_CCM_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SKIPJACK_PRIVATE_WRAP_PARAMS {
    pub ulPasswordLen: CK_ULONG,
    pub pPassword: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPAndGLen: CK_ULONG,
    pub ulQLen: CK_ULONG,
    pub ulRandomLen: CK_ULONG,
    pub pRandomA: CK_BYTE_PTR,
    pub pPrimeP: CK_BYTE_PTR,
    pub pBaseG: CK_BYTE_PTR,
    pub pSubprimeQ: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_SKIPJACK_PRIVATE_WRAP_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SKIPJACK_PRIVATE_WRAP_PTR = *mut CK_SKIPJACK_PRIVATE_WRAP_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SKIPJACK_RELAYX_PARAMS {
    pub ulOldWrappedXLen: CK_ULONG,
    pub pOldWrappedX: CK_BYTE_PTR,
    pub ulOldPasswordLen: CK_ULONG,
    pub pOldPassword: CK_BYTE_PTR,
    pub ulOldPublicDataLen: CK_ULONG,
    pub pOldPublicData: CK_BYTE_PTR,
    pub ulOldRandomLen: CK_ULONG,
    pub pOldRandomA: CK_BYTE_PTR,
    pub ulNewPasswordLen: CK_ULONG,
    pub pNewPassword: CK_BYTE_PTR,
    pub ulNewPublicDataLen: CK_ULONG,
    pub pNewPublicData: CK_BYTE_PTR,
    pub ulNewRandomLen: CK_ULONG,
    pub pNewRandomA: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_SKIPJACK_RELAYX_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SKIPJACK_RELAYX_PARAMS_PTR = *mut CK_SKIPJACK_RELAYX_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_PBE_PARAMS {
    pub pInitVector: CK_BYTE_PTR,
    pub pPassword: CK_UTF8CHAR_PTR,
    pub ulPasswordLen: CK_ULONG,
    pub pSalt: CK_BYTE_PTR,
    pub ulSaltLen: CK_ULONG,
    pub ulIteration: CK_ULONG,
}
impl ::std::default::Default for CK_PBE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_PBE_PARAMS_PTR = *mut CK_PBE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_KEY_WRAP_SET_OAEP_PARAMS {
    pub bBC: CK_BYTE,
    pub pX: CK_BYTE_PTR,
    pub ulXLen: CK_ULONG,
}
impl ::std::default::Default for CK_KEY_WRAP_SET_OAEP_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_KEY_WRAP_SET_OAEP_PARAMS_PTR = *mut CK_KEY_WRAP_SET_OAEP_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SSL3_RANDOM_DATA {
    pub pClientRandom: CK_BYTE_PTR,
    pub ulClientRandomLen: CK_ULONG,
    pub pServerRandom: CK_BYTE_PTR,
    pub ulServerRandomLen: CK_ULONG,
}
impl ::std::default::Default for CK_SSL3_RANDOM_DATA {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SSL3_MASTER_KEY_DERIVE_PARAMS {
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pVersion: CK_VERSION_PTR,
}
impl ::std::default::Default for CK_SSL3_MASTER_KEY_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SSL3_MASTER_KEY_DERIVE_PARAMS_PTR =
    *mut CK_SSL3_MASTER_KEY_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SSL3_KEY_MAT_OUT {
    pub hClientMacSecret: CK_OBJECT_HANDLE,
    pub hServerMacSecret: CK_OBJECT_HANDLE,
    pub hClientKey: CK_OBJECT_HANDLE,
    pub hServerKey: CK_OBJECT_HANDLE,
    pub pIVClient: CK_BYTE_PTR,
    pub pIVServer: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_SSL3_KEY_MAT_OUT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SSL3_KEY_MAT_OUT_PTR = *mut CK_SSL3_KEY_MAT_OUT;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_SSL3_KEY_MAT_PARAMS {
    pub ulMacSizeInBits: CK_ULONG,
    pub ulKeySizeInBits: CK_ULONG,
    pub ulIVSizeInBits: CK_ULONG,
    pub bIsExport: CK_BBOOL,
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pReturnedKeyMaterial: CK_SSL3_KEY_MAT_OUT_PTR,
}
impl ::std::default::Default for CK_SSL3_KEY_MAT_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_SSL3_KEY_MAT_PARAMS_PTR = *mut CK_SSL3_KEY_MAT_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TLS_PRF_PARAMS {
    pub pSeed: CK_BYTE_PTR,
    pub ulSeedLen: CK_ULONG,
    pub pLabel: CK_BYTE_PTR,
    pub ulLabelLen: CK_ULONG,
    pub pOutput: CK_BYTE_PTR,
    pub pulOutputLen: CK_ULONG_PTR,
}
impl ::std::default::Default for CK_TLS_PRF_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TLS_PRF_PARAMS_PTR = *mut CK_TLS_PRF_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TLS12_MASTER_KEY_DERIVE_PARAMS {
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pVersion: CK_VERSION_PTR,
    pub prfHashMechanism: CK_MECHANISM_TYPE,
}
impl ::std::default::Default for CK_TLS12_MASTER_KEY_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TLS12_MASTER_KEY_DERIVE_PARAMS_PTR =
    *mut CK_TLS12_MASTER_KEY_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TLS12_KEY_MAT_PARAMS {
    pub ulMacSizeInBits: CK_ULONG,
    pub ulKeySizeInBits: CK_ULONG,
    pub ulIVSizeInBits: CK_ULONG,
    pub bIsExport: CK_BBOOL,
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pReturnedKeyMaterial: CK_SSL3_KEY_MAT_OUT_PTR,
    pub prfHashMechanism: CK_MECHANISM_TYPE,
}
impl ::std::default::Default for CK_TLS12_KEY_MAT_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TLS12_KEY_MAT_PARAMS_PTR = *mut CK_TLS12_KEY_MAT_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TLS_KDF_PARAMS {
    pub prfMechanism: CK_MECHANISM_TYPE,
    pub pLabel: CK_BYTE_PTR,
    pub ulLabelLength: CK_ULONG,
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pContextData: CK_BYTE_PTR,
    pub ulContextDataLength: CK_ULONG,
}
impl ::std::default::Default for CK_TLS_KDF_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_TLS_MAC_PARAMS {
    pub prfMechanism: CK_MECHANISM_TYPE,
    pub ulMacLength: CK_ULONG,
    pub ulServerOrClient: CK_ULONG,
}
impl ::std::default::Default for CK_TLS_MAC_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TLS_MAC_PARAMS_PTR = *mut CK_TLS_MAC_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_WTLS_RANDOM_DATA {
    pub pClientRandom: CK_BYTE_PTR,
    pub ulClientRandomLen: CK_ULONG,
    pub pServerRandom: CK_BYTE_PTR,
    pub ulServerRandomLen: CK_ULONG,
}
impl ::std::default::Default for CK_WTLS_RANDOM_DATA {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_WTLS_RANDOM_DATA_PTR = *mut CK_WTLS_RANDOM_DATA;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_WTLS_MASTER_KEY_DERIVE_PARAMS {
    pub DigestMechanism: CK_MECHANISM_TYPE,
    pub RandomInfo: CK_WTLS_RANDOM_DATA,
    pub pVersion: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_WTLS_MASTER_KEY_DERIVE_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_WTLS_MASTER_KEY_DERIVE_PARAMS_PTR =
    *mut CK_WTLS_MASTER_KEY_DERIVE_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_WTLS_PRF_PARAMS {
    pub DigestMechanism: CK_MECHANISM_TYPE,
    pub pSeed: CK_BYTE_PTR,
    pub ulSeedLen: CK_ULONG,
    pub pLabel: CK_BYTE_PTR,
    pub ulLabelLen: CK_ULONG,
    pub pOutput: CK_BYTE_PTR,
    pub pulOutputLen: CK_ULONG_PTR,
}
impl ::std::default::Default for CK_WTLS_PRF_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_WTLS_PRF_PARAMS_PTR = *mut CK_WTLS_PRF_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_WTLS_KEY_MAT_OUT {
    pub hMacSecret: CK_OBJECT_HANDLE,
    pub hKey: CK_OBJECT_HANDLE,
    pub pIV: CK_BYTE_PTR,
}
impl ::std::default::Default for CK_WTLS_KEY_MAT_OUT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_WTLS_KEY_MAT_OUT_PTR = *mut CK_WTLS_KEY_MAT_OUT;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_WTLS_KEY_MAT_PARAMS {
    pub DigestMechanism: CK_MECHANISM_TYPE,
    pub ulMacSizeInBits: CK_ULONG,
    pub ulKeySizeInBits: CK_ULONG,
    pub ulIVSizeInBits: CK_ULONG,
    pub ulSequenceNumber: CK_ULONG,
    pub bIsExport: CK_BBOOL,
    pub RandomInfo: CK_WTLS_RANDOM_DATA,
    pub pReturnedKeyMaterial: CK_WTLS_KEY_MAT_OUT_PTR,
}
impl ::std::default::Default for CK_WTLS_KEY_MAT_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_WTLS_KEY_MAT_PARAMS_PTR = *mut CK_WTLS_KEY_MAT_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_CMS_SIG_PARAMS {
    pub certificateHandle: CK_OBJECT_HANDLE,
    pub pSigningMechanism: CK_MECHANISM_PTR,
    pub pDigestMechanism: CK_MECHANISM_PTR,
    pub pContentType: CK_UTF8CHAR_PTR,
    pub pRequestedAttributes: CK_BYTE_PTR,
    pub ulRequestedAttributesLen: CK_ULONG,
    pub pRequiredAttributes: CK_BYTE_PTR,
    pub ulRequiredAttributesLen: CK_ULONG,
}
impl ::std::default::Default for CK_CMS_SIG_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_CMS_SIG_PARAMS_PTR = *mut CK_CMS_SIG_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_KEY_DERIVATION_STRING_DATA {
    pub pData: CK_BYTE_PTR,
    pub ulLen: CK_ULONG,
}
impl ::std::default::Default for CK_KEY_DERIVATION_STRING_DATA {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_KEY_DERIVATION_STRING_DATA_PTR =
    *mut CK_KEY_DERIVATION_STRING_DATA;
pub type CK_EXTRACT_PARAMS = CK_ULONG;
pub type CK_EXTRACT_PARAMS_PTR = *mut CK_EXTRACT_PARAMS;
pub type CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE = CK_ULONG;
pub type CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE_PTR =
    *mut CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE;
pub type CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE = CK_ULONG;
pub type CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE_PTR =
    *mut CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_PKCS5_PBKD2_PARAMS {
    pub saltSource: CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE,
    pub pSaltSourceData: CK_VOID_PTR,
    pub ulSaltSourceDataLen: CK_ULONG,
    pub iterations: CK_ULONG,
    pub prf: CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE,
    pub pPrfData: CK_VOID_PTR,
    pub ulPrfDataLen: CK_ULONG,
    pub pPassword: CK_UTF8CHAR_PTR,
    pub ulPasswordLen: CK_ULONG_PTR,
}
impl ::std::default::Default for CK_PKCS5_PBKD2_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_PKCS5_PBKD2_PARAMS_PTR = *mut CK_PKCS5_PBKD2_PARAMS;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_JPAKEPublicValue {
    pub pGX: *mut CK_BYTE,
    pub ulGXLen: CK_ULONG,
    pub pGV: *mut CK_BYTE,
    pub ulGVLen: CK_ULONG,
    pub pR: *mut CK_BYTE,
    pub ulRLen: CK_ULONG,
}
impl ::std::default::Default for CK_NSS_JPAKEPublicValue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_JPAKERound1Params {
    pub gx1: CK_NSS_JPAKEPublicValue,
    pub gx2: CK_NSS_JPAKEPublicValue,
}
impl ::std::default::Default for CK_NSS_JPAKERound1Params {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_JPAKERound2Params {
    pub pSharedKey: *mut CK_BYTE,
    pub ulSharedKeyLen: CK_ULONG,
    pub gx3: CK_NSS_JPAKEPublicValue,
    pub gx4: CK_NSS_JPAKEPublicValue,
    pub A: CK_NSS_JPAKEPublicValue,
}
impl ::std::default::Default for CK_NSS_JPAKERound2Params {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_JPAKEFinalParams {
    pub B: CK_NSS_JPAKEPublicValue,
}
impl ::std::default::Default for CK_NSS_JPAKEFinalParams {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_MAC_CONSTANT_TIME_PARAMS {
    pub macAlg: CK_MECHANISM_TYPE,
    pub ulBodyTotalLen: CK_ULONG,
    pub pHeader: *mut CK_BYTE,
    pub ulHeaderLen: CK_ULONG,
}
impl ::std::default::Default for CK_NSS_MAC_CONSTANT_TIME_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_AEAD_PARAMS {
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceLen: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
    pub ulTagLen: CK_ULONG,
}
impl ::std::default::Default for CK_NSS_AEAD_PARAMS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_HKDFParams {
    pub bExtract: CK_BBOOL,
    pub pSalt: CK_BYTE_PTR,
    pub ulSaltLen: CK_ULONG,
    pub bExpand: CK_BBOOL,
    pub pInfo: CK_BYTE_PTR,
    pub ulInfoLen: CK_ULONG,
}
impl ::std::default::Default for CK_NSS_HKDFParams {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_NSS_TLS_EXTENDED_MASTER_KEY_DERIVE_PARAMS {
    pub prfHashMechanism: CK_MECHANISM_TYPE,
    pub pSessionHash: CK_BYTE_PTR,
    pub ulSessionHashLen: CK_ULONG,
    pub pVersion: CK_VERSION_PTR,
}
impl ::std::default::Default for CK_NSS_TLS_EXTENDED_MASTER_KEY_DERIVE_PARAMS
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_TRUST = CK_ULONG;
pub type __CKT_NSS_UNTRUSTED = CK_TRUST;
pub type __CKT_NSS_VALID = CK_TRUST;
pub type __CKT_NSS_MUST_VERIFY = CK_TRUST;
pub type SECMODModuleDBFunc =
    ::std::option::Option<unsafe extern "C" fn(function:
                                                   ::std::os::raw::c_ulong,
                                               parameters:
                                                   *mut ::std::os::raw::c_char,
                                               moduleSpec:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut *mut ::std::os::raw::c_char>;
pub type PRIntervalTime = PRUint32;
pub enum PRMonitor { }
pub enum PRLock { }
pub enum PRCondVar { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum nssILockType {
    nssILockArena = 0,
    nssILockSession = 1,
    nssILockObject = 2,
    nssILockRefLock = 3,
    nssILockCert = 4,
    nssILockCertDB = 5,
    nssILockDBM = 6,
    nssILockCache = 7,
    nssILockSSL = 8,
    nssILockList = 9,
    nssILockSlot = 10,
    nssILockFreelist = 11,
    nssILockOID = 12,
    nssILockAttribute = 13,
    nssILockPK11cxt = 14,
    nssILockRWLock = 15,
    nssILockOther = 16,
    nssILockSelfServ = 17,
    nssILockKeyDB = 18,
    nssILockLast = 19,
}
pub enum nssRWLockStr { }
pub type NSSRWLock = nssRWLockStr;
pub type SECMODModule = SECMODModuleStr;
pub type SECMODModuleList = SECMODModuleListStr;
pub type SECMODListLock = NSSRWLock;
pub enum PK11SlotInfoStr { }
pub type PK11SlotInfo = PK11SlotInfoStr;
pub enum NSSUTILPreSlotInfoStr { }
pub type PK11PreSlotInfo = NSSUTILPreSlotInfoStr;
pub enum PK11SymKeyStr { }
pub type PK11SymKey = PK11SymKeyStr;
pub enum PK11ContextStr { }
pub type PK11Context = PK11ContextStr;
pub type PK11SlotList = PK11SlotListStr;
pub type PK11SlotListElement = PK11SlotListElementStr;
pub type PK11RSAGenParams = PK11RSAGenParamsStr;
pub type SECMODModuleID = ::std::os::raw::c_ulong;
pub type PK11DefaultArrayEntry = PK11DefaultArrayEntryStr;
pub enum PK11GenericObjectStr { }
pub type PK11GenericObject = PK11GenericObjectStr;
pub type PK11FreeDataFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECMODModuleStr {
    pub arena: *mut PLArenaPool,
    pub internal: PRBool,
    pub loaded: PRBool,
    pub isFIPS: PRBool,
    pub dllName: *mut ::std::os::raw::c_char,
    pub commonName: *mut ::std::os::raw::c_char,
    pub library: *mut ::std::os::raw::c_void,
    pub functionList: *mut ::std::os::raw::c_void,
    pub refLock: *mut PRLock,
    pub refCount: ::std::os::raw::c_int,
    pub slots: *mut *mut PK11SlotInfo,
    pub slotCount: ::std::os::raw::c_int,
    pub slotInfo: *mut PK11PreSlotInfo,
    pub slotInfoCount: ::std::os::raw::c_int,
    pub moduleID: SECMODModuleID,
    pub isThreadSafe: PRBool,
    pub ssl: [::std::os::raw::c_ulong; 2usize],
    pub libraryParams: *mut ::std::os::raw::c_char,
    pub moduleDBFunc: *mut ::std::os::raw::c_void,
    pub parent: *mut SECMODModule,
    pub isCritical: PRBool,
    pub isModuleDB: PRBool,
    pub moduleDBOnly: PRBool,
    pub trustOrder: ::std::os::raw::c_int,
    pub cipherOrder: ::std::os::raw::c_int,
    pub evControlMask: ::std::os::raw::c_ulong,
    pub cryptokiVersion: CK_VERSION,
}
impl ::std::default::Default for SECMODModuleStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECMODModuleListStr {
    pub next: *mut SECMODModuleList,
    pub module: *mut SECMODModule,
}
impl ::std::default::Default for SECMODModuleListStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11SlotListStr {
    pub head: *mut PK11SlotListElement,
    pub tail: *mut PK11SlotListElement,
    pub lock: *mut PRLock,
}
impl ::std::default::Default for PK11SlotListStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11SlotListElementStr {
    pub next: *mut PK11SlotListElement,
    pub prev: *mut PK11SlotListElement,
    pub slot: *mut PK11SlotInfo,
    pub refCount: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PK11SlotListElementStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11RSAGenParamsStr {
    pub keySizeInBits: ::std::os::raw::c_int,
    pub pe: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for PK11RSAGenParamsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11CertListType {
    PK11CertListUnique = 0,
    PK11CertListUser = 1,
    PK11CertListRootUnique = 2,
    PK11CertListCA = 3,
    PK11CertListCAUnique = 4,
    PK11CertListUserUnique = 5,
    PK11CertListAll = 6,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11DefaultArrayEntryStr {
    pub name: *const ::std::os::raw::c_char,
    pub flag: ::std::os::raw::c_ulong,
    pub mechanism: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for PK11DefaultArrayEntryStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PK11AttrFlags = PRUint32;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11Origin {
    PK11_OriginNULL = 0,
    PK11_OriginDerive = 1,
    PK11_OriginGenerated = 2,
    PK11_OriginFortezzaHack = 3,
    PK11_OriginUnwrap = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11DisableReasons {
    PK11_DIS_NONE = 0,
    PK11_DIS_USER_SELECTED = 1,
    PK11_DIS_COULD_NOT_INIT_TOKEN = 2,
    PK11_DIS_TOKEN_VERIFY_FAILED = 3,
    PK11_DIS_TOKEN_NOT_PRESENT = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11ObjectType {
    PK11_TypeGeneric = 0,
    PK11_TypePrivKey = 1,
    PK11_TypePubKey = 2,
    PK11_TypeCert = 3,
    PK11_TypeSymKey = 4,
}
pub type PK11PasswordFunc =
    ::std::option::Option<unsafe extern "C" fn(slot: *mut PK11SlotInfo,
                                               retry: PRBool,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_char>;
pub type PK11VerifyPasswordFunc =
    ::std::option::Option<unsafe extern "C" fn(slot: *mut PK11SlotInfo,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> PRBool>;
pub type PK11IsLoggedInFunc =
    ::std::option::Option<unsafe extern "C" fn(slot: *mut PK11SlotInfo,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> PRBool>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYAttributeStr {
    pub attrType: SECItem,
    pub attrValue: *mut *mut SECItem,
}
impl ::std::default::Default for SECKEYAttributeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYAttribute = SECKEYAttributeStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYPrivateKeyInfoStr {
    pub arena: *mut PLArenaPool,
    pub version: SECItem,
    pub algorithm: SECAlgorithmID,
    pub privateKey: SECItem,
    pub attributes: *mut *mut SECKEYAttribute,
}
impl ::std::default::Default for SECKEYPrivateKeyInfoStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYPrivateKeyInfo = SECKEYPrivateKeyInfoStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYEncryptedPrivateKeyInfoStr {
    pub arena: *mut PLArenaPool,
    pub algorithm: SECAlgorithmID,
    pub encryptedData: SECItem,
}
impl ::std::default::Default for SECKEYEncryptedPrivateKeyInfoStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYEncryptedPrivateKeyInfo = SECKEYEncryptedPrivateKeyInfoStr;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11TokenStatus {
    PK11TokenNotRemovable = 0,
    PK11TokenPresent = 1,
    PK11TokenChanged = 2,
    PK11TokenRemoved = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PK11TokenEvent {
    PK11TokenRemovedOrChangedEvent = 0,
    PK11TokenPresentEvent = 1,
}
pub type PK11MergeLog = PK11MergeLogStr;
pub type PK11MergeLogNode = PK11MergeLogNodeStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11MergeLogNodeStr {
    pub next: *mut PK11MergeLogNode,
    pub prev: *mut PK11MergeLogNode,
    pub object: *mut PK11GenericObject,
    pub error: ::std::os::raw::c_int,
    pub reserved1: CK_RV,
    pub reserved2: ::std::os::raw::c_ulong,
    pub reserved3: ::std::os::raw::c_ulong,
    pub reserved4: *mut ::std::os::raw::c_void,
    pub reserved5: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for PK11MergeLogNodeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PK11MergeLogStr {
    pub head: *mut PK11MergeLogNode,
    pub tail: *mut PK11MergeLogNode,
    pub arena: *mut PLArenaPool,
    pub version: ::std::os::raw::c_int,
    pub reserved1: ::std::os::raw::c_ulong,
    pub reserved2: ::std::os::raw::c_ulong,
    pub reserved3: ::std::os::raw::c_ulong,
    pub reserverd4: *mut ::std::os::raw::c_void,
    pub reserverd5: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for PK11MergeLogStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRCList = PRCListStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRCListStr {
    pub next: *mut PRCList,
    pub prev: *mut PRCList,
}
impl ::std::default::Default for PRCListStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum KeyType {
    nullKey = 0,
    rsaKey = 1,
    dsaKey = 2,
    fortezzaKey = 3,
    dhKey = 4,
    keaKey = 5,
    ecKey = 6,
    rsaPssKey = 7,
    rsaOaepKey = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYRSAPublicKeyStr {
    pub arena: *mut PLArenaPool,
    pub modulus: SECItem,
    pub publicExponent: SECItem,
}
impl ::std::default::Default for SECKEYRSAPublicKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYRSAPublicKey = SECKEYRSAPublicKeyStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYRSAPSSParamsStr {
    pub hashAlg: *mut SECAlgorithmID,
    pub maskAlg: *mut SECAlgorithmID,
    pub saltLength: SECItem,
    pub trailerField: SECItem,
}
impl ::std::default::Default for SECKEYRSAPSSParamsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYRSAPSSParams = SECKEYRSAPSSParamsStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYPQGParamsStr {
    pub arena: *mut PLArenaPool,
    pub prime: SECItem,
    pub subPrime: SECItem,
    pub base: SECItem,
}
impl ::std::default::Default for SECKEYPQGParamsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYPQGParams = SECKEYPQGParamsStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYDSAPublicKeyStr {
    pub params: SECKEYPQGParams,
    pub publicValue: SECItem,
}
impl ::std::default::Default for SECKEYDSAPublicKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYDSAPublicKey = SECKEYDSAPublicKeyStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYDHParamsStr {
    pub arena: *mut PLArenaPool,
    pub prime: SECItem,
    pub base: SECItem,
}
impl ::std::default::Default for SECKEYDHParamsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYDHParams = SECKEYDHParamsStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYDHPublicKeyStr {
    pub arena: *mut PLArenaPool,
    pub prime: SECItem,
    pub base: SECItem,
    pub publicValue: SECItem,
}
impl ::std::default::Default for SECKEYDHPublicKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYDHPublicKey = SECKEYDHPublicKeyStr;
pub type SECKEYECParams = SECItem;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYECPublicKeyStr {
    pub DEREncodedParams: SECKEYECParams,
    pub size: ::std::os::raw::c_int,
    pub publicValue: SECItem,
}
impl ::std::default::Default for SECKEYECPublicKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYECPublicKey = SECKEYECPublicKeyStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYFortezzaPublicKeyStr {
    pub KEAversion: ::std::os::raw::c_int,
    pub DSSversion: ::std::os::raw::c_int,
    pub KMID: [::std::os::raw::c_uchar; 8usize],
    pub clearance: SECItem,
    pub KEApriviledge: SECItem,
    pub DSSpriviledge: SECItem,
    pub KEAKey: SECItem,
    pub DSSKey: SECItem,
    pub params: SECKEYPQGParams,
    pub keaParams: SECKEYPQGParams,
}
impl ::std::default::Default for SECKEYFortezzaPublicKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYFortezzaPublicKey = SECKEYFortezzaPublicKeyStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYDiffPQGParamsStr {
    pub DiffKEAParams: SECKEYPQGParams,
    pub DiffDSAParams: SECKEYPQGParams,
}
impl ::std::default::Default for SECKEYDiffPQGParamsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYDiffPQGParams = SECKEYDiffPQGParamsStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYPQGDualParamsStr {
    pub CommParams: SECKEYPQGParams,
    pub DiffParams: SECKEYDiffPQGParams,
}
impl ::std::default::Default for SECKEYPQGDualParamsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYPQGDualParams = SECKEYPQGDualParamsStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYKEAParamsStr {
    pub arena: *mut PLArenaPool,
    pub hash: SECItem,
}
impl ::std::default::Default for SECKEYKEAParamsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYKEAParams = SECKEYKEAParamsStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYKEAPublicKeyStr {
    pub params: SECKEYKEAParams,
    pub publicValue: SECItem,
}
impl ::std::default::Default for SECKEYKEAPublicKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYKEAPublicKey = SECKEYKEAPublicKeyStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYPublicKeyStr {
    pub arena: *mut PLArenaPool,
    pub keyType: KeyType,
    pub pkcs11Slot: *mut PK11SlotInfo,
    pub pkcs11ID: CK_OBJECT_HANDLE,
    pub u: Union_Unnamed10,
}
impl ::std::default::Default for SECKEYPublicKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u64; 37usize],
}
impl Union_Unnamed10 {
    pub unsafe fn rsa(&mut self) -> *mut SECKEYRSAPublicKey {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn dsa(&mut self) -> *mut SECKEYDSAPublicKey {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn dh(&mut self) -> *mut SECKEYDHPublicKey {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn kea(&mut self) -> *mut SECKEYKEAPublicKey {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fortezza(&mut self) -> *mut SECKEYFortezzaPublicKey {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ec(&mut self) -> *mut SECKEYECPublicKey {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYPublicKey = SECKEYPublicKeyStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYPrivateKeyStr {
    pub arena: *mut PLArenaPool,
    pub keyType: KeyType,
    pub pkcs11Slot: *mut PK11SlotInfo,
    pub pkcs11ID: CK_OBJECT_HANDLE,
    pub pkcs11IsTemp: PRBool,
    pub wincx: *mut ::std::os::raw::c_void,
    pub staticflags: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SECKEYPrivateKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SECKEYPrivateKey = SECKEYPrivateKeyStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYPrivateKeyListNode {
    pub links: PRCList,
    pub key: *mut SECKEYPrivateKey,
}
impl ::std::default::Default for SECKEYPrivateKeyListNode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYPrivateKeyList {
    pub list: PRCList,
    pub arena: *mut PLArenaPool,
}
impl ::std::default::Default for SECKEYPrivateKeyList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYPublicKeyListNode {
    pub links: PRCList,
    pub key: *mut SECKEYPublicKey,
}
impl ::std::default::Default for SECKEYPublicKeyListNode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECKEYPublicKeyList {
    pub list: PRCList,
    pub arena: *mut PLArenaPool,
}
impl ::std::default::Default for SECKEYPublicKeyList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRTime = PRInt64;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRTimeParameters {
    pub tp_gmt_offset: PRInt32,
    pub tp_dst_offset: PRInt32,
}
impl ::std::default::Default for PRTimeParameters {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRExplodedTime {
    pub tm_usec: PRInt32,
    pub tm_sec: PRInt32,
    pub tm_min: PRInt32,
    pub tm_hour: PRInt32,
    pub tm_mday: PRInt32,
    pub tm_month: PRInt32,
    pub tm_year: PRInt16,
    pub tm_wday: PRInt8,
    pub tm_yday: PRInt16,
    pub tm_params: PRTimeParameters,
}
impl ::std::default::Default for PRExplodedTime {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PRTimeParamFn =
    ::std::option::Option<unsafe extern "C" fn(gmt: *const PRExplodedTime)
                              -> PRTimeParameters>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
impl ::std::default::Default for iovec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type socklen_t = __socklen_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __socket_type {
    SOCK_STREAM = 1,
    SOCK_DGRAM = 2,
    SOCK_RAW = 3,
    SOCK_RDM = 4,
    SOCK_SEQPACKET = 5,
    SOCK_DCCP = 6,
    SOCK_PACKET = 10,
    SOCK_CLOEXEC = 524288,
    SOCK_NONBLOCK = 2048,
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
impl ::std::default::Default for sockaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_align: ::std::os::raw::c_ulong,
    pub __ss_padding: [::std::os::raw::c_char; 112usize],
}
impl ::std::clone::Clone for sockaddr_storage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for sockaddr_storage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed11 {
    MSG_OOB = 1,
    MSG_PEEK = 2,
    MSG_DONTROUTE = 4,
    MSG_CTRUNC = 8,
    MSG_PROXY = 16,
    MSG_TRUNC = 32,
    MSG_DONTWAIT = 64,
    MSG_EOR = 128,
    MSG_WAITALL = 256,
    MSG_FIN = 512,
    MSG_SYN = 1024,
    MSG_CONFIRM = 2048,
    MSG_RST = 4096,
    MSG_ERRQUEUE = 8192,
    MSG_NOSIGNAL = 16384,
    MSG_MORE = 32768,
    MSG_WAITFORONE = 65536,
    MSG_FASTOPEN = 536870912,
    MSG_CMSG_CLOEXEC = 1073741824,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for msghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: [::std::os::raw::c_uchar; 0usize],
}
impl ::std::default::Default for cmsghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed12 { SCM_RIGHTS = 1, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
impl ::std::default::Default for linger {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
impl ::std::default::Default for osockaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed13 { SHUT_RD = 0, SHUT_WR = 1, SHUT_RDWR = 2, }
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type in_addr_t = uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
impl ::std::default::Default for in_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for ip_opts {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for ip_opts {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
impl ::std::default::Default for ip_mreqn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
impl ::std::default::Default for in_pktinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed14 {
    IPPROTO_IP = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_IPIP = 4,
    IPPROTO_TCP = 6,
    IPPROTO_EGP = 8,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_TP = 29,
    IPPROTO_DCCP = 33,
    IPPROTO_IPV6 = 41,
    IPPROTO_RSVP = 46,
    IPPROTO_GRE = 47,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_MTP = 92,
    IPPROTO_BEETPH = 94,
    IPPROTO_ENCAP = 98,
    IPPROTO_PIM = 103,
    IPPROTO_COMP = 108,
    IPPROTO_SCTP = 132,
    IPPROTO_UDPLITE = 136,
    IPPROTO_MPLS = 137,
    IPPROTO_RAW = 255,
    IPPROTO_MAX = 256,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed15 {
    IPPROTO_HOPOPTS = 0,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,
    IPPROTO_MH = 135,
}
pub type in_port_t = uint16_t;
pub const IPPORT_BIFFUDP: Enum_Unnamed16 = Enum_Unnamed16::IPPORT_EXECSERVER;
pub const IPPORT_WHOSERVER: Enum_Unnamed16 =
    Enum_Unnamed16::IPPORT_LOGINSERVER;
pub const IPPORT_ROUTESERVER: Enum_Unnamed16 =
    Enum_Unnamed16::IPPORT_EFSSERVER;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed16 {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,
    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,
    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,
    IPPORT_RESERVED = 1024,
    IPPORT_USERRESERVED = 5000,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct in6_addr {
    pub __in6_u: Union_Unnamed17,
}
impl ::std::default::Default for in6_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed17 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed17 {
    pub unsafe fn __u6_addr8(&mut self) -> *mut [uint8_t; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr16(&mut self) -> *mut [uint16_t; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr32(&mut self) -> *mut [uint32_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
impl ::std::default::Default for sockaddr_in {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: uint32_t,
}
impl ::std::default::Default for sockaddr_in6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
impl ::std::default::Default for ip_mreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
impl ::std::default::Default for ip_mreq_source {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
impl ::std::default::Default for ipv6_mreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct group_req {
    pub gr_interface: uint32_t,
    pub gr_group: sockaddr_storage,
}
impl ::std::clone::Clone for group_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for group_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct group_source_req {
    pub gsr_interface: uint32_t,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
impl ::std::clone::Clone for group_source_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for group_source_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: uint32_t,
    pub imsf_numsrc: uint32_t,
    pub imsf_slist: [in_addr; 1usize],
}
impl ::std::default::Default for ip_msfilter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct group_filter {
    pub gf_interface: uint32_t,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: uint32_t,
    pub gf_numsrc: uint32_t,
    pub gf_slist: [sockaddr_storage; 1usize],
}
impl ::std::clone::Clone for group_filter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for group_filter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for rpcent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: uint32_t,
}
impl ::std::default::Default for netent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for hostent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for servent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for protoent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
impl ::std::default::Default for addrinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRDir { }
pub enum PRFilePrivate { }
pub type PRDescIdentity = PRIntn;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRFileDesc {
    pub methods: *const PRIOMethods,
    pub secret: *mut PRFilePrivate,
    pub lower: *mut PRFileDesc,
    pub higher: *mut PRFileDesc,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(fd:
                                                             *mut PRFileDesc)>,
    pub identity: PRDescIdentity,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PRFileDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRTransmitFileFlags {
    PR_TRANSMITFILE_KEEP_OPEN = 0,
    PR_TRANSMITFILE_CLOSE_SOCKET = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRIPv6Addr {
    pub _S6_un: Union_Unnamed18,
}
impl ::std::default::Default for PRIPv6Addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed18 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed18 {
    pub unsafe fn _S6_u8(&mut self) -> *mut [PRUint8; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _S6_u16(&mut self) -> *mut [PRUint16; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _S6_u32(&mut self) -> *mut [PRUint32; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _S6_u64(&mut self) -> *mut [PRUint64; 2usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct PRNetAddr {
    pub _bindgen_data_: [u64; 14usize],
}
impl PRNetAddr {
    pub unsafe fn raw(&mut self) -> *mut Struct_Unnamed19 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn inet(&mut self) -> *mut Struct_Unnamed20 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ipv6(&mut self) -> *mut Struct_Unnamed21 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn local(&mut self) -> *mut Struct_Unnamed22 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for PRNetAddr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for PRNetAddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed19 {
    pub family: PRUint16,
    pub data: [::std::os::raw::c_char; 14usize],
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed20 {
    pub family: PRUint16,
    pub port: PRUint16,
    pub ip: PRUint32,
    pub pad: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed21 {
    pub family: PRUint16,
    pub port: PRUint16,
    pub flowinfo: PRUint32,
    pub ip: PRIPv6Addr,
    pub scope_id: PRUint32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub family: PRUint16,
    pub path: [::std::os::raw::c_char; 104usize],
}
impl ::std::clone::Clone for Struct_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRSockOption {
    PR_SockOpt_Nonblocking = 0,
    PR_SockOpt_Linger = 1,
    PR_SockOpt_Reuseaddr = 2,
    PR_SockOpt_Keepalive = 3,
    PR_SockOpt_RecvBufferSize = 4,
    PR_SockOpt_SendBufferSize = 5,
    PR_SockOpt_IpTimeToLive = 6,
    PR_SockOpt_IpTypeOfService = 7,
    PR_SockOpt_AddMember = 8,
    PR_SockOpt_DropMember = 9,
    PR_SockOpt_McastInterface = 10,
    PR_SockOpt_McastTimeToLive = 11,
    PR_SockOpt_McastLoopback = 12,
    PR_SockOpt_NoDelay = 13,
    PR_SockOpt_MaxSegment = 14,
    PR_SockOpt_Broadcast = 15,
    PR_SockOpt_Reuseport = 16,
    PR_SockOpt_Last = 17,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRLinger {
    pub polarity: PRBool,
    pub linger: PRIntervalTime,
}
impl ::std::default::Default for PRLinger {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRMcastRequest {
    pub mcaddr: PRNetAddr,
    pub ifaddr: PRNetAddr,
}
impl ::std::default::Default for PRMcastRequest {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRSocketOptionData {
    pub option: PRSockOption,
    pub value: Union_Unnamed23,
}
impl ::std::default::Default for PRSocketOptionData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed23 {
    pub _bindgen_data_: [u64; 28usize],
}
impl Union_Unnamed23 {
    pub unsafe fn ip_ttl(&mut self) -> *mut PRUintn {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mcast_ttl(&mut self) -> *mut PRUintn {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn tos(&mut self) -> *mut PRUintn {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn non_blocking(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn reuse_addr(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn reuse_port(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn keep_alive(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mcast_loopback(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn no_delay(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn broadcast(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn max_segment(&mut self) -> *mut PRSize {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn recv_buffer_size(&mut self) -> *mut PRSize {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn send_buffer_size(&mut self) -> *mut PRSize {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn linger(&mut self) -> *mut PRLinger {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn add_member(&mut self) -> *mut PRMcastRequest {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn drop_member(&mut self) -> *mut PRMcastRequest {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mcast_if(&mut self) -> *mut PRNetAddr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRIOVec {
    pub iov_base: *mut ::std::os::raw::c_char,
    pub iov_len: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PRIOVec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRDescType {
    PR_DESC_FILE = 1,
    PR_DESC_SOCKET_TCP = 2,
    PR_DESC_SOCKET_UDP = 3,
    PR_DESC_LAYERED = 4,
    PR_DESC_PIPE = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRSeekWhence { PR_SEEK_SET = 0, PR_SEEK_CUR = 1, PR_SEEK_END = 2, }
pub type PRCloseFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc)
                              -> PRStatus>;
pub type PRReadFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *mut ::std::os::raw::c_void,
                                               amount: PRInt32) -> PRInt32>;
pub type PRWriteFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *const ::std::os::raw::c_void,
                                               amount: PRInt32) -> PRInt32>;
pub type PRAvailableFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc)
                              -> PRInt32>;
pub type PRAvailable64FN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc)
                              -> PRInt64>;
pub type PRFsyncFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc)
                              -> PRStatus>;
pub type PRSeekFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               offset: PROffset32,
                                               how: PRSeekWhence)
                              -> PROffset32>;
pub type PRSeek64FN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               offset: PROffset64,
                                               how: PRSeekWhence)
                              -> PROffset64>;
pub type PRFileInfoFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               info: *mut PRFileInfo)
                              -> PRStatus>;
pub type PRFileInfo64FN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               info: *mut PRFileInfo64)
                              -> PRStatus>;
pub type PRWritevFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               iov: *const PRIOVec,
                                               iov_size: PRInt32,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRConnectFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               addr: *const PRNetAddr,
                                               timeout: PRIntervalTime)
                              -> PRStatus>;
pub type PRAcceptFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               addr: *mut PRNetAddr,
                                               timeout: PRIntervalTime)
                              -> *mut PRFileDesc>;
pub type PRBindFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               addr: *const PRNetAddr)
                              -> PRStatus>;
pub type PRListenFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               backlog: PRIntn) -> PRStatus>;
pub type PRShutdownFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               how: PRIntn) -> PRStatus>;
pub type PRRecvFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *mut ::std::os::raw::c_void,
                                               amount: PRInt32, flags: PRIntn,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRSendFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *const ::std::os::raw::c_void,
                                               amount: PRInt32, flags: PRIntn,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRRecvfromFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *mut ::std::os::raw::c_void,
                                               amount: PRInt32, flags: PRIntn,
                                               addr: *mut PRNetAddr,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRSendtoFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               buf:
                                                   *const ::std::os::raw::c_void,
                                               amount: PRInt32, flags: PRIntn,
                                               addr: *const PRNetAddr,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRPollFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               in_flags: PRInt16,
                                               out_flags: *mut PRInt16)
                              -> PRInt16>;
pub type PRAcceptreadFN =
    ::std::option::Option<unsafe extern "C" fn(sd: *mut PRFileDesc,
                                               nd: *mut *mut PRFileDesc,
                                               raddr: *mut *mut PRNetAddr,
                                               buf:
                                                   *mut ::std::os::raw::c_void,
                                               amount: PRInt32,
                                               t: PRIntervalTime) -> PRInt32>;
pub type PRTransmitfileFN =
    ::std::option::Option<unsafe extern "C" fn(sd: *mut PRFileDesc,
                                               fd: *mut PRFileDesc,
                                               headers:
                                                   *const ::std::os::raw::c_void,
                                               hlen: PRInt32,
                                               flags: PRTransmitFileFlags,
                                               t: PRIntervalTime) -> PRInt32>;
pub type PRGetsocknameFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               addr: *mut PRNetAddr)
                              -> PRStatus>;
pub type PRGetpeernameFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               addr: *mut PRNetAddr)
                              -> PRStatus>;
pub type PRGetsocketoptionFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               data: *mut PRSocketOptionData)
                              -> PRStatus>;
pub type PRSetsocketoptionFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               data:
                                                   *const PRSocketOptionData)
                              -> PRStatus>;
pub type PRSendfileFN =
    ::std::option::Option<unsafe extern "C" fn(networkSocket: *mut PRFileDesc,
                                               sendData: *mut PRSendFileData,
                                               flags: PRTransmitFileFlags,
                                               timeout: PRIntervalTime)
                              -> PRInt32>;
pub type PRConnectcontinueFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc,
                                               out_flags: PRInt16)
                              -> PRStatus>;
pub type PRReservedFN =
    ::std::option::Option<unsafe extern "C" fn(fd: *mut PRFileDesc)
                              -> PRIntn>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRIOMethods {
    pub file_type: PRDescType,
    pub close: PRCloseFN,
    pub read: PRReadFN,
    pub write: PRWriteFN,
    pub available: PRAvailableFN,
    pub available64: PRAvailable64FN,
    pub fsync: PRFsyncFN,
    pub seek: PRSeekFN,
    pub seek64: PRSeek64FN,
    pub fileInfo: PRFileInfoFN,
    pub fileInfo64: PRFileInfo64FN,
    pub writev: PRWritevFN,
    pub connect: PRConnectFN,
    pub accept: PRAcceptFN,
    pub bind: PRBindFN,
    pub listen: PRListenFN,
    pub shutdown: PRShutdownFN,
    pub recv: PRRecvFN,
    pub send: PRSendFN,
    pub recvfrom: PRRecvfromFN,
    pub sendto: PRSendtoFN,
    pub poll: PRPollFN,
    pub acceptread: PRAcceptreadFN,
    pub transmitfile: PRTransmitfileFN,
    pub getsockname: PRGetsocknameFN,
    pub getpeername: PRGetpeernameFN,
    pub reserved_fn_6: PRReservedFN,
    pub reserved_fn_5: PRReservedFN,
    pub getsocketoption: PRGetsocketoptionFN,
    pub setsocketoption: PRSetsocketoptionFN,
    pub sendfile: PRSendfileFN,
    pub connectcontinue: PRConnectcontinueFN,
    pub reserved_fn_3: PRReservedFN,
    pub reserved_fn_2: PRReservedFN,
    pub reserved_fn_1: PRReservedFN,
    pub reserved_fn_0: PRReservedFN,
}
impl ::std::default::Default for PRIOMethods {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRSpecialFD {
    PR_StandardInput = 0,
    PR_StandardOutput = 1,
    PR_StandardError = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRFileType {
    PR_FILE_FILE = 1,
    PR_FILE_DIRECTORY = 2,
    PR_FILE_OTHER = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRFileInfo {
    pub type_: PRFileType,
    pub size: PROffset32,
    pub creationTime: PRTime,
    pub modifyTime: PRTime,
}
impl ::std::default::Default for PRFileInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRFileInfo64 {
    pub type_: PRFileType,
    pub size: PROffset64,
    pub creationTime: PRTime,
    pub modifyTime: PRTime,
}
impl ::std::default::Default for PRFileInfo64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRAccessHow {
    PR_ACCESS_EXISTS = 1,
    PR_ACCESS_WRITE_OK = 2,
    PR_ACCESS_READ_OK = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRDirEntry {
    pub name: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for PRDirEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRDirFlags {
    PR_SKIP_NONE = 0,
    PR_SKIP_DOT = 1,
    PR_SKIP_DOT_DOT = 2,
    PR_SKIP_BOTH = 3,
    PR_SKIP_HIDDEN = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRShutdownHow {
    PR_SHUTDOWN_RCV = 0,
    PR_SHUTDOWN_SEND = 1,
    PR_SHUTDOWN_BOTH = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRSendFileData {
    pub fd: *mut PRFileDesc,
    pub file_offset: PRUint32,
    pub file_nbytes: PRSize,
    pub header: *const ::std::os::raw::c_void,
    pub hlen: PRInt32,
    pub trailer: *const ::std::os::raw::c_void,
    pub tlen: PRInt32,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PRSendFileData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum PRFileMap { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum PRFileMapProtect {
    PR_PROT_READONLY = 0,
    PR_PROT_READWRITE = 1,
    PR_PROT_WRITECOPY = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct PRPollDesc {
    pub fd: *mut PRFileDesc,
    pub in_flags: PRInt16,
    pub out_flags: PRInt16,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for PRPollDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum NSSCertificateStr { }
pub enum NSSTrustDomainStr { }
pub type CERTAVA = CERTAVAStr;
pub type CERTAttribute = CERTAttributeStr;
pub type CERTAuthInfoAccess = CERTAuthInfoAccessStr;
pub type CERTAuthKeyID = CERTAuthKeyIDStr;
pub type CERTBasicConstraints = CERTBasicConstraintsStr;
pub type CERTCertDBHandle = NSSTrustDomainStr;
pub type CERTCertExtension = CERTCertExtensionStr;
pub type CERTCertKey = CERTCertKeyStr;
pub type CERTCertList = CERTCertListStr;
pub type CERTCertListNode = CERTCertListNodeStr;
pub type CERTCertNicknames = CERTCertNicknamesStr;
pub type CERTCertTrust = CERTCertTrustStr;
pub type CERTCertificate = CERTCertificateStr;
pub type CERTCertificateList = CERTCertificateListStr;
pub type CERTCertificateRequest = CERTCertificateRequestStr;
pub type CERTCrl = CERTCrlStr;
pub type CERTCrlDistributionPoints = CERTCrlDistributionPointsStr;
pub type CERTCrlEntry = CERTCrlEntryStr;
pub type CERTCrlHeadNode = CERTCrlHeadNodeStr;
pub type CERTCrlKey = CERTCrlKeyStr;
pub type CERTCrlNode = CERTCrlNodeStr;
pub type CERTDERCerts = CERTDERCertsStr;
pub type CERTDistNames = CERTDistNamesStr;
pub type CERTGeneralName = CERTGeneralNameStr;
pub type CERTGeneralNameList = CERTGeneralNameListStr;
pub type CERTIssuerAndSN = CERTIssuerAndSNStr;
pub type CERTName = CERTNameStr;
pub type CERTNameConstraint = CERTNameConstraintStr;
pub type CERTNameConstraints = CERTNameConstraintsStr;
pub type CERTOKDomainName = CERTOKDomainNameStr;
pub type CERTPrivKeyUsagePeriod = CERTPrivKeyUsagePeriodStr;
pub type CERTPublicKeyAndChallenge = CERTPublicKeyAndChallengeStr;
pub type CERTRDN = CERTRDNStr;
pub type CERTSignedCrl = CERTSignedCrlStr;
pub type CERTSignedData = CERTSignedDataStr;
pub type CERTStatusConfig = CERTStatusConfigStr;
pub type CERTSubjectList = CERTSubjectListStr;
pub type CERTSubjectNode = CERTSubjectNodeStr;
pub type CERTSubjectPublicKeyInfo = CERTSubjectPublicKeyInfoStr;
pub type CERTValidity = CERTValidityStr;
pub type CERTVerifyLog = CERTVerifyLogStr;
pub type CERTVerifyLogNode = CERTVerifyLogNodeStr;
pub type CRLDistributionPoint = CRLDistributionPointStr;
pub type CERTCrlNumber = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTAVAStr {
    pub type_: SECItem,
    pub value: SECItem,
}
impl ::std::default::Default for CERTAVAStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTRDNStr {
    pub avas: *mut *mut CERTAVA,
}
impl ::std::default::Default for CERTRDNStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTNameStr {
    pub arena: *mut PLArenaPool,
    pub rdns: *mut *mut CERTRDN,
}
impl ::std::default::Default for CERTNameStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTValidityStr {
    pub arena: *mut PLArenaPool,
    pub notBefore: SECItem,
    pub notAfter: SECItem,
}
impl ::std::default::Default for CERTValidityStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertKeyStr {
    pub serialNumber: SECItem,
    pub derIssuer: SECItem,
}
impl ::std::default::Default for CERTCertKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTSignedDataStr {
    pub data: SECItem,
    pub signatureAlgorithm: SECAlgorithmID,
    pub signature: SECItem,
}
impl ::std::default::Default for CERTSignedDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTSubjectPublicKeyInfoStr {
    pub arena: *mut PLArenaPool,
    pub algorithm: SECAlgorithmID,
    pub subjectPublicKey: SECItem,
}
impl ::std::default::Default for CERTSubjectPublicKeyInfoStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTPublicKeyAndChallengeStr {
    pub spki: SECItem,
    pub challenge: SECItem,
}
impl ::std::default::Default for CERTPublicKeyAndChallengeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertTrustStr {
    pub sslFlags: ::std::os::raw::c_uint,
    pub emailFlags: ::std::os::raw::c_uint,
    pub objectSigningFlags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for CERTCertTrustStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECTrustTypeEnum {
    trustSSL = 0,
    trustEmail = 1,
    trustObjectSigning = 2,
    trustTypeNone = 3,
}
pub type SECTrustType = SECTrustTypeEnum;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertExtensionStr {
    pub id: SECItem,
    pub critical: SECItem,
    pub value: SECItem,
}
impl ::std::default::Default for CERTCertExtensionStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTSubjectNodeStr {
    pub next: *mut CERTSubjectNodeStr,
    pub prev: *mut CERTSubjectNodeStr,
    pub certKey: SECItem,
    pub keyID: SECItem,
}
impl ::std::default::Default for CERTSubjectNodeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTSubjectListStr {
    pub arena: *mut PLArenaPool,
    pub ncerts: ::std::os::raw::c_int,
    pub emailAddr: *mut ::std::os::raw::c_char,
    pub head: *mut CERTSubjectNode,
    pub tail: *mut CERTSubjectNode,
    pub entry: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for CERTSubjectListStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertificateStr {
    pub arena: *mut PLArenaPool,
    pub subjectName: *mut ::std::os::raw::c_char,
    pub issuerName: *mut ::std::os::raw::c_char,
    pub signatureWrap: CERTSignedData,
    pub derCert: SECItem,
    pub derIssuer: SECItem,
    pub derSubject: SECItem,
    pub derPublicKey: SECItem,
    pub certKey: SECItem,
    pub version: SECItem,
    pub serialNumber: SECItem,
    pub signature: SECAlgorithmID,
    pub issuer: CERTName,
    pub validity: CERTValidity,
    pub subject: CERTName,
    pub subjectPublicKeyInfo: CERTSubjectPublicKeyInfo,
    pub issuerID: SECItem,
    pub subjectID: SECItem,
    pub extensions: *mut *mut CERTCertExtension,
    pub emailAddr: *mut ::std::os::raw::c_char,
    pub dbhandle: *mut CERTCertDBHandle,
    pub subjectKeyID: SECItem,
    pub keyIDGenerated: PRBool,
    pub keyUsage: ::std::os::raw::c_uint,
    pub rawKeyUsage: ::std::os::raw::c_uint,
    pub keyUsagePresent: PRBool,
    pub nsCertType: PRUint32,
    pub keepSession: PRBool,
    pub timeOK: PRBool,
    pub domainOK: *mut CERTOKDomainName,
    pub isperm: PRBool,
    pub istemp: PRBool,
    pub nickname: *mut ::std::os::raw::c_char,
    pub dbnickname: *mut ::std::os::raw::c_char,
    pub nssCertificate: *mut NSSCertificateStr,
    pub trust: *mut CERTCertTrust,
    pub referenceCount: ::std::os::raw::c_int,
    pub subjectList: *mut CERTSubjectList,
    pub authKeyID: *mut CERTAuthKeyID,
    pub isRoot: PRBool,
    pub options: Union_Unnamed24,
    pub series: ::std::os::raw::c_int,
    pub slot: *mut PK11SlotInfo,
    pub pkcs11ID: CK_OBJECT_HANDLE,
    pub ownSlot: PRBool,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for CERTCertificateStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed24 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed24 {
    pub unsafe fn apointer(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn bits(&mut self) -> *mut Struct_Unnamed25 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed25 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTDERCertsStr {
    pub arena: *mut PLArenaPool,
    pub numcerts: ::std::os::raw::c_int,
    pub rawCerts: *mut SECItem,
}
impl ::std::default::Default for CERTDERCertsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTAttributeStr {
    pub attrType: SECItem,
    pub attrValue: *mut *mut SECItem,
}
impl ::std::default::Default for CERTAttributeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertificateRequestStr {
    pub arena: *mut PLArenaPool,
    pub version: SECItem,
    pub subject: CERTName,
    pub subjectPublicKeyInfo: CERTSubjectPublicKeyInfo,
    pub attributes: *mut *mut CERTAttribute,
}
impl ::std::default::Default for CERTCertificateRequestStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertificateListStr {
    pub certs: *mut SECItem,
    pub len: ::std::os::raw::c_int,
    pub arena: *mut PLArenaPool,
}
impl ::std::default::Default for CERTCertificateListStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertListNodeStr {
    pub links: PRCList,
    pub cert: *mut CERTCertificate,
    pub appData: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for CERTCertListNodeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertListStr {
    pub list: PRCList,
    pub arena: *mut PLArenaPool,
}
impl ::std::default::Default for CERTCertListStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCrlEntryStr {
    pub serialNumber: SECItem,
    pub revocationDate: SECItem,
    pub extensions: *mut *mut CERTCertExtension,
}
impl ::std::default::Default for CERTCrlEntryStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCrlStr {
    pub arena: *mut PLArenaPool,
    pub version: SECItem,
    pub signatureAlg: SECAlgorithmID,
    pub derName: SECItem,
    pub name: CERTName,
    pub lastUpdate: SECItem,
    pub nextUpdate: SECItem,
    pub entries: *mut *mut CERTCrlEntry,
    pub extensions: *mut *mut CERTCertExtension,
}
impl ::std::default::Default for CERTCrlStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCrlKeyStr {
    pub derName: SECItem,
    pub dummy: SECItem,
}
impl ::std::default::Default for CERTCrlKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTSignedCrlStr {
    pub arena: *mut PLArenaPool,
    pub crl: CERTCrl,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: PRBool,
    pub isperm: PRBool,
    pub istemp: PRBool,
    pub referenceCount: ::std::os::raw::c_int,
    pub dbhandle: *mut CERTCertDBHandle,
    pub signatureWrap: CERTSignedData,
    pub url: *mut ::std::os::raw::c_char,
    pub derCrl: *mut SECItem,
    pub slot: *mut PK11SlotInfo,
    pub pkcs11ID: CK_OBJECT_HANDLE,
    pub opaque: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for CERTSignedCrlStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCrlHeadNodeStr {
    pub arena: *mut PLArenaPool,
    pub dbhandle: *mut CERTCertDBHandle,
    pub first: *mut CERTCrlNode,
    pub last: *mut CERTCrlNode,
}
impl ::std::default::Default for CERTCrlHeadNodeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCrlNodeStr {
    pub next: *mut CERTCrlNode,
    pub type_: ::std::os::raw::c_int,
    pub crl: *mut CERTSignedCrl,
}
impl ::std::default::Default for CERTCrlNodeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTDistNamesStr {
    pub arena: *mut PLArenaPool,
    pub nnames: ::std::os::raw::c_int,
    pub names: *mut SECItem,
    pub head: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for CERTDistNamesStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECCertUsageEnum {
    certUsageSSLClient = 0,
    certUsageSSLServer = 1,
    certUsageSSLServerWithStepUp = 2,
    certUsageSSLCA = 3,
    certUsageEmailSigner = 4,
    certUsageEmailRecipient = 5,
    certUsageObjectSigner = 6,
    certUsageUserCertImport = 7,
    certUsageVerifyCA = 8,
    certUsageProtectedObjectSigner = 9,
    certUsageStatusResponder = 10,
    certUsageAnyCA = 11,
}
pub type SECCertUsage = SECCertUsageEnum;
pub type SECCertificateUsage = PRInt64;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CERTCertOwnerEnum {
    certOwnerUser = 0,
    certOwnerPeer = 1,
    certOwnerCA = 2,
}
pub type CERTCertOwner = CERTCertOwnerEnum;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECCertTimeValidityEnum {
    secCertTimeValid = 0,
    secCertTimeExpired = 1,
    secCertTimeNotValidYet = 2,
    secCertTimeUndetermined = 3,
}
pub type SECCertTimeValidity = SECCertTimeValidityEnum;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CERTCompareValidityStatusEnum {
    certValidityUndetermined = 0,
    certValidityChooseB = 1,
    certValidityEqual = 2,
    certValidityChooseA = 3,
}
pub type CERTCompareValidityStatus = CERTCompareValidityStatusEnum;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertNicknamesStr {
    pub arena: *mut PLArenaPool,
    pub head: *mut ::std::os::raw::c_void,
    pub numnicknames: ::std::os::raw::c_int,
    pub nicknames: *mut *mut ::std::os::raw::c_char,
    pub what: ::std::os::raw::c_int,
    pub totallen: ::std::os::raw::c_int,
}
impl ::std::default::Default for CERTCertNicknamesStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTIssuerAndSNStr {
    pub derIssuer: SECItem,
    pub issuer: CERTName,
    pub serialNumber: SECItem,
}
impl ::std::default::Default for CERTIssuerAndSNStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTBasicConstraintsStr {
    pub isCA: PRBool,
    pub pathLenConstraint: ::std::os::raw::c_int,
}
impl ::std::default::Default for CERTBasicConstraintsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CERTCRLEntryReasonCodeEnum {
    crlEntryReasonUnspecified = 0,
    crlEntryReasonKeyCompromise = 1,
    crlEntryReasonCaCompromise = 2,
    crlEntryReasonAffiliationChanged = 3,
    crlEntryReasonSuperseded = 4,
    crlEntryReasonCessationOfOperation = 5,
    crlEntryReasoncertificatedHold = 6,
    crlEntryReasonRemoveFromCRL = 8,
    crlEntryReasonPrivilegeWithdrawn = 9,
    crlEntryReasonAaCompromise = 10,
}
pub type CERTCRLEntryReasonCode = CERTCRLEntryReasonCodeEnum;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CERTGeneralNameTypeEnum {
    certOtherName = 1,
    certRFC822Name = 2,
    certDNSName = 3,
    certX400Address = 4,
    certDirectoryName = 5,
    certEDIPartyName = 6,
    certURI = 7,
    certIPAddress = 8,
    certRegisterID = 9,
}
pub type CERTGeneralNameType = CERTGeneralNameTypeEnum;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct OtherNameStr {
    pub name: SECItem,
    pub oid: SECItem,
}
impl ::std::default::Default for OtherNameStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type OtherName = OtherNameStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTGeneralNameStr {
    pub type_: CERTGeneralNameType,
    pub name: Union_Unnamed26,
    pub derDirectoryName: SECItem,
    pub l: PRCList,
}
impl ::std::default::Default for CERTGeneralNameStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed26 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed26 {
    pub unsafe fn directoryName(&mut self) -> *mut CERTName {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn OthName(&mut self) -> *mut OtherName {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn other(&mut self) -> *mut SECItem {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed26 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTGeneralNameListStr {
    pub arena: *mut PLArenaPool,
    pub name: *mut CERTGeneralName,
    pub refCount: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
    pub lock: *mut PRLock,
}
impl ::std::default::Default for CERTGeneralNameListStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTNameConstraintStr {
    pub name: CERTGeneralName,
    pub DERName: SECItem,
    pub min: SECItem,
    pub max: SECItem,
    pub l: PRCList,
}
impl ::std::default::Default for CERTNameConstraintStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTNameConstraintsStr {
    pub permited: *mut CERTNameConstraint,
    pub excluded: *mut CERTNameConstraint,
    pub DERPermited: *mut *mut SECItem,
    pub DERExcluded: *mut *mut SECItem,
}
impl ::std::default::Default for CERTNameConstraintsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTPrivKeyUsagePeriodStr {
    pub notBefore: SECItem,
    pub notAfter: SECItem,
    pub arena: *mut PLArenaPool,
}
impl ::std::default::Default for CERTPrivKeyUsagePeriodStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTAuthKeyIDStr {
    pub keyID: SECItem,
    pub authCertIssuer: *mut CERTGeneralName,
    pub authCertSerialNumber: SECItem,
    pub DERAuthCertIssuer: *mut *mut SECItem,
}
impl ::std::default::Default for CERTAuthKeyIDStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum DistributionPointTypesEnum {
    generalName = 1,
    relativeDistinguishedName = 2,
}
pub type DistributionPointTypes = DistributionPointTypesEnum;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CRLDistributionPointStr {
    pub distPointType: DistributionPointTypes,
    pub distPoint: Union_Unnamed27,
    pub reasons: SECItem,
    pub crlIssuer: *mut CERTGeneralName,
    pub derDistPoint: SECItem,
    pub derRelativeName: SECItem,
    pub derCrlIssuer: *mut *mut SECItem,
    pub derFullName: *mut *mut SECItem,
    pub bitsmap: SECItem,
}
impl ::std::default::Default for CRLDistributionPointStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed27 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed27 {
    pub unsafe fn fullName(&mut self) -> *mut *mut CERTGeneralName {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn relativeName(&mut self) -> *mut CERTRDN {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCrlDistributionPointsStr {
    pub distPoints: *mut *mut CRLDistributionPoint,
}
impl ::std::default::Default for CERTCrlDistributionPointsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTVerifyLogNodeStr {
    pub cert: *mut CERTCertificate,
    pub error: ::std::os::raw::c_long,
    pub depth: ::std::os::raw::c_uint,
    pub arg: *mut ::std::os::raw::c_void,
    pub next: *mut CERTVerifyLogNodeStr,
    pub prev: *mut CERTVerifyLogNodeStr,
}
impl ::std::default::Default for CERTVerifyLogNodeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTVerifyLogStr {
    pub arena: *mut PLArenaPool,
    pub count: ::std::os::raw::c_uint,
    pub head: *mut CERTVerifyLogNodeStr,
    pub tail: *mut CERTVerifyLogNodeStr,
}
impl ::std::default::Default for CERTVerifyLogStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTOKDomainNameStr {
    pub next: *mut CERTOKDomainName,
    pub name: [::std::os::raw::c_char; 1usize],
    _bindgen_padding_0_: [u8; 7usize],
}
impl ::std::default::Default for CERTOKDomainNameStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CERTStatusChecker =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut CERTCertDBHandle,
                                               cert: *mut CERTCertificate,
                                               time: PRTime,
                                               pwArg:
                                                   *mut ::std::os::raw::c_void)
                              -> SECStatus>;
pub type CERTStatusDestroy =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut CERTStatusConfig)
                              -> SECStatus>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTStatusConfigStr {
    pub statusChecker: CERTStatusChecker,
    pub statusDestroy: CERTStatusDestroy,
    pub statusContext: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for CERTStatusConfigStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTAuthInfoAccessStr {
    pub method: SECItem,
    pub derLocation: SECItem,
    pub location: *mut CERTGeneralName,
}
impl ::std::default::Default for CERTAuthInfoAccessStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CERTDBNameFunc =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               dbVersion:
                                                   ::std::os::raw::c_int)
                              -> *mut ::std::os::raw::c_char>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CERTPackageTypeEnum {
    certPackageNone = 0,
    certPackageCert = 1,
    certPackagePKCS7 = 2,
    certPackageNSCertSeq = 3,
    certPackageNSCertWrap = 4,
}
pub type CERTPackageType = CERTPackageTypeEnum;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTPolicyQualifier {
    pub oid: SECOidTag,
    pub qualifierID: SECItem,
    pub qualifierValue: SECItem,
}
impl ::std::default::Default for CERTPolicyQualifier {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTPolicyInfo {
    pub oid: SECOidTag,
    pub policyID: SECItem,
    pub policyQualifiers: *mut *mut CERTPolicyQualifier,
}
impl ::std::default::Default for CERTPolicyInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertificatePolicies {
    pub arena: *mut PLArenaPool,
    pub policyInfos: *mut *mut CERTPolicyInfo,
}
impl ::std::default::Default for CERTCertificatePolicies {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTNoticeReference {
    pub organization: SECItem,
    pub noticeNumbers: *mut *mut SECItem,
}
impl ::std::default::Default for CERTNoticeReference {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTUserNotice {
    pub arena: *mut PLArenaPool,
    pub noticeReference: CERTNoticeReference,
    pub derNoticeReference: SECItem,
    pub displayText: SECItem,
}
impl ::std::default::Default for CERTUserNotice {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTOidSequence {
    pub arena: *mut PLArenaPool,
    pub oids: *mut *mut SECItem,
}
impl ::std::default::Default for CERTOidSequence {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTPolicyMap {
    pub issuerDomainPolicy: SECItem,
    pub subjectDomainPolicy: SECItem,
}
impl ::std::default::Default for CERTPolicyMap {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertificatePolicyMappings {
    pub arena: *mut PLArenaPool,
    pub policyMaps: *mut *mut CERTPolicyMap,
}
impl ::std::default::Default for CERTCertificatePolicyMappings {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertificateInhibitAny {
    pub inhibitAnySkipCerts: SECItem,
}
impl ::std::default::Default for CERTCertificateInhibitAny {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTCertificatePolicyConstraints {
    pub explicitPolicySkipCerts: SECItem,
    pub inhibitMappingSkipCerts: SECItem,
}
impl ::std::default::Default for CERTCertificatePolicyConstraints {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CERTChainVerifyCallbackFunc =
    ::std::option::Option<unsafe extern "C" fn(isChainValidArg:
                                                   *mut ::std::os::raw::c_void,
                                               currentChain:
                                                   *const CERTCertList,
                                               chainOK: *mut PRBool)
                              -> SECStatus>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTChainVerifyCallback {
    pub isChainValid: CERTChainVerifyCallbackFunc,
    pub isChainValidArg: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for CERTChainVerifyCallback {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CERTValParamInType {
    cert_pi_end = 0,
    cert_pi_nbioContext = 1,
    cert_pi_nbioAbort = 2,
    cert_pi_certList = 3,
    cert_pi_policyOID = 4,
    cert_pi_policyFlags = 5,
    cert_pi_keyusage = 6,
    cert_pi_extendedKeyusage = 7,
    cert_pi_date = 8,
    cert_pi_revocationFlags = 9,
    cert_pi_certStores = 10,
    cert_pi_trustAnchors = 11,
    cert_pi_useAIACertFetch = 12,
    cert_pi_chainVerifyCallback = 13,
    cert_pi_useOnlyTrustAnchors = 14,
    cert_pi_max = 15,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CERTValParamOutType {
    cert_po_end = 0,
    cert_po_nbioContext = 1,
    cert_po_trustAnchor = 2,
    cert_po_certList = 3,
    cert_po_policyOID = 4,
    cert_po_errorLog = 5,
    cert_po_usages = 6,
    cert_po_keyUsage = 7,
    cert_po_extendedKeyusage = 8,
    cert_po_max = 9,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CERTRevocationMethodIndex {
    cert_revocation_method_crl = 0,
    cert_revocation_method_ocsp = 1,
    cert_revocation_method_count = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTRevocationTests {
    pub number_of_defined_methods: PRUint32,
    pub cert_rev_flags_per_method: *mut PRUint64,
    pub number_of_preferred_methods: PRUint32,
    pub preferred_methods: *mut CERTRevocationMethodIndex,
    pub cert_rev_method_independent_flags: PRUint64,
}
impl ::std::default::Default for CERTRevocationTests {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTRevocationFlags {
    pub leafTests: CERTRevocationTests,
    pub chainTests: CERTRevocationTests,
}
impl ::std::default::Default for CERTRevocationFlags {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTValParamInValueStr {
    pub scalar: Union_Unnamed28,
    pub pointer: Union_Unnamed29,
    pub array: Union_Unnamed30,
    pub arraySize: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for CERTValParamInValueStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed28 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed28 {
    pub unsafe fn b(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut PRInt32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ui(&mut self) -> *mut PRUint32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn l(&mut self) -> *mut PRInt64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ul(&mut self) -> *mut PRUint64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn time(&mut self) -> *mut PRTime {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed28 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed29 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed29 {
    pub unsafe fn p(&mut self) -> *mut *const ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut *const ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cert(&mut self) -> *mut *const CERTCertificate {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn chain(&mut self) -> *mut *const CERTCertList {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn revocation(&mut self) -> *mut *const CERTRevocationFlags {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn chainVerifyCallback(&mut self)
     -> *mut *const CERTChainVerifyCallback {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed30 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed30 {
    pub unsafe fn pi(&mut self) -> *mut *const PRInt32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pui(&mut self) -> *mut *const PRUint32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pl(&mut self) -> *mut *const PRInt64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pul(&mut self) -> *mut *const PRUint64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn oids(&mut self) -> *mut *const SECOidTag {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed30 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CERTValParamInValue = CERTValParamInValueStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTValParamOutValueStr {
    pub scalar: Union_Unnamed31,
    pub pointer: Union_Unnamed32,
    pub array: Union_Unnamed33,
    pub arraySize: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for CERTValParamOutValueStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed31 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed31 {
    pub unsafe fn b(&mut self) -> *mut PRBool {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut PRInt32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ui(&mut self) -> *mut PRUint32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn l(&mut self) -> *mut PRInt64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ul(&mut self) -> *mut PRUint64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn usages(&mut self) -> *mut SECCertificateUsage {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed31 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed32 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed32 {
    pub unsafe fn p(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn log(&mut self) -> *mut *mut CERTVerifyLog {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cert(&mut self) -> *mut *mut CERTCertificate {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn chain(&mut self) -> *mut *mut CERTCertList {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed33 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed33 {
    pub unsafe fn p(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn oids(&mut self) -> *mut *mut SECOidTag {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CERTValParamOutValue = CERTValParamOutValueStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTValInParam {
    pub type_: CERTValParamInType,
    pub value: CERTValParamInValue,
}
impl ::std::default::Default for CERTValInParam {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CERTValOutParam {
    pub type_: CERTValParamOutType,
    pub value: CERTValParamOutValue,
}
impl ::std::default::Default for CERTValOutParam {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CertStrictnessLevels {
    CERT_N2A_READABLE = 0,
    CERT_N2A_STRICT = 10,
    CERT_N2A_INVERTIBLE = 20,
}
pub type CertStrictnessLevel = CertStrictnessLevels;
pub type CERT_StringFromCertFcn =
    ::std::option::Option<unsafe extern "C" fn(cert: *mut CERTCertificate)
                              -> *mut ::std::os::raw::c_char>;
pub type CERTImportCertificateFunc =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               certs: *mut *mut SECItem,
                                               numcerts:
                                                   ::std::os::raw::c_int)
                              -> SECStatus>;
pub type CERTPolicyStringCallback =
    ::std::option::Option<unsafe extern "C" fn(org:
                                                   *mut ::std::os::raw::c_char,
                                               noticeNumber:
                                                   ::std::os::raw::c_ulong,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_char>;
pub type CERTSortCallback =
    ::std::option::Option<unsafe extern "C" fn(certa: *mut CERTCertificate,
                                               certb: *mut CERTCertificate,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> PRBool>;
pub type SECHashObject = SECHashObjectStr;
pub type HASHContext = HASHContextStr;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HASH_HashType {
    HASH_AlgNULL = 0,
    HASH_AlgMD2 = 1,
    HASH_AlgMD5 = 2,
    HASH_AlgSHA1 = 3,
    HASH_AlgSHA256 = 4,
    HASH_AlgSHA384 = 5,
    HASH_AlgSHA512 = 6,
    HASH_AlgSHA224 = 7,
    HASH_AlgTOTAL = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SECHashObjectStr {
    pub length: ::std::os::raw::c_uint,
    pub create: ::std::option::Option<extern "C" fn()
                                          -> *mut ::std::os::raw::c_void>,
    pub clone: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void)
                                         -> *mut ::std::os::raw::c_void>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                *mut ::std::os::raw::c_void,
                                                            arg2: PRBool)>,
    pub begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void)>,
    pub update: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void,
                                                           arg2:
                                                               *const ::std::os::raw::c_uchar,
                                                           arg3:
                                                               ::std::os::raw::c_uint)>,
    pub end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                            *mut ::std::os::raw::c_void,
                                                        arg2:
                                                            *mut ::std::os::raw::c_uchar,
                                                        arg3:
                                                            *mut ::std::os::raw::c_uint,
                                                        arg4:
                                                            ::std::os::raw::c_uint)>,
    pub blocklength: ::std::os::raw::c_uint,
    pub type_: HASH_HashType,
    pub end_raw: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                *mut ::std::os::raw::c_void,
                                                            arg2:
                                                                *mut ::std::os::raw::c_uchar,
                                                            arg3:
                                                                *mut ::std::os::raw::c_uint,
                                                            arg4:
                                                                ::std::os::raw::c_uint)>,
}
impl ::std::default::Default for SECHashObjectStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct HASHContextStr {
    pub hashobj: *const SECHashObjectStr,
    pub hash_context: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for HASHContextStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum SEC_PKCS7DecoderContextStr { }
pub type SEC_PKCS7DecoderContext = SEC_PKCS7DecoderContextStr;
pub enum SEC_PKCS7EncoderContextStr { }
pub type SEC_PKCS7EncoderContext = SEC_PKCS7EncoderContextStr;
pub type SECKEYGetPasswordKey =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               handle:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
pub type SEC_PKCS7ContentInfo = SEC_PKCS7ContentInfoStr;
pub type SEC_PKCS7SignedData = SEC_PKCS7SignedDataStr;
pub type SEC_PKCS7EncryptedContentInfo = SEC_PKCS7EncryptedContentInfoStr;
pub type SEC_PKCS7EnvelopedData = SEC_PKCS7EnvelopedDataStr;
pub type SEC_PKCS7SignedAndEnvelopedData = SEC_PKCS7SignedAndEnvelopedDataStr;
pub type SEC_PKCS7SignerInfo = SEC_PKCS7SignerInfoStr;
pub type SEC_PKCS7RecipientInfo = SEC_PKCS7RecipientInfoStr;
pub type SEC_PKCS7DigestedData = SEC_PKCS7DigestedDataStr;
pub type SEC_PKCS7EncryptedData = SEC_PKCS7EncryptedDataStr;
pub type SEC_PKCS7Attribute = SEC_PKCS7AttributeStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS7ContentInfoStr {
    pub poolp: *mut PLArenaPool,
    pub created: PRBool,
    pub refCount: ::std::os::raw::c_int,
    pub contentTypeTag: *mut SECOidData,
    pub pwfn: SECKEYGetPasswordKey,
    pub pwfn_arg: *mut ::std::os::raw::c_void,
    pub contentType: SECItem,
    pub content: Union_Unnamed34,
}
impl ::std::default::Default for SEC_PKCS7ContentInfoStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed34 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed34 {
    pub unsafe fn data(&mut self) -> *mut *mut SECItem {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn digestedData(&mut self) -> *mut *mut SEC_PKCS7DigestedData {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn encryptedData(&mut self)
     -> *mut *mut SEC_PKCS7EncryptedData {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn envelopedData(&mut self)
     -> *mut *mut SEC_PKCS7EnvelopedData {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn signedData(&mut self) -> *mut *mut SEC_PKCS7SignedData {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn signedAndEnvelopedData(&mut self)
     -> *mut *mut SEC_PKCS7SignedAndEnvelopedData {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed34 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS7SignedDataStr {
    pub version: SECItem,
    pub digestAlgorithms: *mut *mut SECAlgorithmID,
    pub contentInfo: SEC_PKCS7ContentInfo,
    pub rawCerts: *mut *mut SECItem,
    pub crls: *mut *mut CERTSignedCrl,
    pub signerInfos: *mut *mut SEC_PKCS7SignerInfo,
    pub digests: *mut *mut SECItem,
    pub certs: *mut *mut CERTCertificate,
    pub certLists: *mut *mut CERTCertificateList,
}
impl ::std::default::Default for SEC_PKCS7SignedDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS7EncryptedContentInfoStr {
    pub contentTypeTag: *mut SECOidData,
    pub contentType: SECItem,
    pub contentEncAlg: SECAlgorithmID,
    pub encContent: SECItem,
    pub plainContent: SECItem,
    pub keysize: ::std::os::raw::c_int,
    pub encalg: SECOidTag,
}
impl ::std::default::Default for SEC_PKCS7EncryptedContentInfoStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS7EnvelopedDataStr {
    pub version: SECItem,
    pub recipientInfos: *mut *mut SEC_PKCS7RecipientInfo,
    pub encContentInfo: SEC_PKCS7EncryptedContentInfo,
}
impl ::std::default::Default for SEC_PKCS7EnvelopedDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS7SignedAndEnvelopedDataStr {
    pub version: SECItem,
    pub recipientInfos: *mut *mut SEC_PKCS7RecipientInfo,
    pub digestAlgorithms: *mut *mut SECAlgorithmID,
    pub encContentInfo: SEC_PKCS7EncryptedContentInfo,
    pub rawCerts: *mut *mut SECItem,
    pub crls: *mut *mut CERTSignedCrl,
    pub signerInfos: *mut *mut SEC_PKCS7SignerInfo,
    pub digests: *mut *mut SECItem,
    pub certs: *mut *mut CERTCertificate,
    pub certLists: *mut *mut CERTCertificateList,
    pub sigKey: *mut PK11SymKey,
}
impl ::std::default::Default for SEC_PKCS7SignedAndEnvelopedDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS7SignerInfoStr {
    pub version: SECItem,
    pub issuerAndSN: *mut CERTIssuerAndSN,
    pub digestAlg: SECAlgorithmID,
    pub authAttr: *mut *mut SEC_PKCS7Attribute,
    pub digestEncAlg: SECAlgorithmID,
    pub encDigest: SECItem,
    pub unAuthAttr: *mut *mut SEC_PKCS7Attribute,
    pub cert: *mut CERTCertificate,
    pub certList: *mut CERTCertificateList,
}
impl ::std::default::Default for SEC_PKCS7SignerInfoStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS7RecipientInfoStr {
    pub version: SECItem,
    pub issuerAndSN: *mut CERTIssuerAndSN,
    pub keyEncAlg: SECAlgorithmID,
    pub encKey: SECItem,
    pub cert: *mut CERTCertificate,
}
impl ::std::default::Default for SEC_PKCS7RecipientInfoStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS7DigestedDataStr {
    pub version: SECItem,
    pub digestAlg: SECAlgorithmID,
    pub contentInfo: SEC_PKCS7ContentInfo,
    pub digest: SECItem,
}
impl ::std::default::Default for SEC_PKCS7DigestedDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS7EncryptedDataStr {
    pub version: SECItem,
    pub encContentInfo: SEC_PKCS7EncryptedContentInfo,
}
impl ::std::default::Default for SEC_PKCS7EncryptedDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS7AttributeStr {
    pub type_: SECItem,
    pub values: *mut *mut SECItem,
    pub typeTag: *mut SECOidData,
    pub encoded: PRBool,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SEC_PKCS7AttributeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SEC_PKCS7DecoderContentCallback =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               buf:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_ulong)>;
pub type SEC_PKCS7EncoderOutputCallback =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               buf:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_ulong)>;
pub type SEC_PKCS7GetDecryptKeyCallback =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               algid: *mut SECAlgorithmID)
                              -> *mut PK11SymKey>;
pub type SEC_PKCS7DecryptionAllowedCallback =
    ::std::option::Option<unsafe extern "C" fn(algid: *mut SECAlgorithmID,
                                               bulkkey: *mut PK11SymKey)
                              -> PRBool>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SGNDigestInfoStr {
    pub arena: *mut PLArenaPool,
    pub digestAlgorithm: SECAlgorithmID,
    pub digest: SECItem,
}
impl ::std::default::Default for SGNDigestInfoStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SGNDigestInfo = SGNDigestInfoStr;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum SECPKCS12TargetTokenCAs {
    SECPKCS12TargetTokenNoCAs = 0,
    SECPKCS12TargetTokenIntermediateCAs = 1,
    SECPKCS12TargetTokenAllCAs = 2,
}
pub type SEC_PKCS12PFXItem = SEC_PKCS12PFXItemStr;
pub type SEC_PKCS12MacData = SEC_PKCS12MacDataStr;
pub type SEC_PKCS12AuthenticatedSafe = SEC_PKCS12AuthenticatedSafeStr;
pub type SEC_PKCS12BaggageItem = SEC_PKCS12BaggageItemStr;
pub type SEC_PKCS12Baggage = SEC_PKCS12BaggageStr;
pub type SEC_PKCS12Baggage_OLD = SEC_PKCS12Baggage_OLDStr;
pub type SEC_PKCS12ESPVKItem = SEC_PKCS12ESPVKItemStr;
pub type SEC_PKCS12PVKSupportingData = SEC_PKCS12PVKSupportingDataStr;
pub type SEC_PKCS12PVKAdditionalData = SEC_PKCS12PVKAdditionalDataStr;
pub type SEC_PKCS12SafeContents = SEC_PKCS12SafeContentsStr;
pub type SEC_PKCS12SafeBag = SEC_PKCS12SafeBagStr;
pub type SEC_PKCS12PrivateKey = SEC_PKCS12PrivateKeyStr;
pub type SEC_PKCS12PrivateKeyBag = SEC_PKCS12PrivateKeyBagStr;
pub type SEC_PKCS12CertAndCRLBag = SEC_PKCS12CertAndCRLBagStr;
pub type SEC_PKCS12CertAndCRL = SEC_PKCS12CertAndCRLStr;
pub type SEC_PKCS12X509CertCRL = SEC_PKCS12X509CertCRLStr;
pub type SEC_PKCS12SDSICert = SEC_PKCS12SDSICertStr;
pub type SEC_PKCS12Secret = SEC_PKCS12SecretStr;
pub type SEC_PKCS12SecretAdditional = SEC_PKCS12SecretAdditionalStr;
pub type SEC_PKCS12SecretItem = SEC_PKCS12SecretItemStr;
pub type SEC_PKCS12SecretBag = SEC_PKCS12SecretBagStr;
pub type SEC_PKCS12PasswordFunc =
    ::std::option::Option<unsafe extern "C" fn(args: *mut SECItem)
                              -> *mut SECItem>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12BaggageStr {
    pub poolp: *mut PLArenaPool,
    pub bags: *mut *mut SEC_PKCS12BaggageItem,
    pub luggage_size: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SEC_PKCS12BaggageStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12PVKAdditionalDataStr {
    pub poolp: *mut PLArenaPool,
    pub pvkAdditionalTypeTag: *mut SECOidData,
    pub pvkAdditionalType: SECItem,
    pub pvkAdditionalContent: SECItem,
}
impl ::std::default::Default for SEC_PKCS12PVKAdditionalDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12PVKSupportingDataStr {
    pub poolp: *mut PLArenaPool,
    pub assocCerts: *mut *mut SGNDigestInfo,
    pub regenerable: SECItem,
    pub nickname: SECItem,
    pub pvkAdditional: SEC_PKCS12PVKAdditionalData,
    pub pvkAdditionalDER: SECItem,
    pub uniNickName: SECItem,
    pub nThumbs: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SEC_PKCS12PVKSupportingDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12ESPVKItemStr {
    pub poolp: *mut PLArenaPool,
    pub espvkTag: *mut SECOidData,
    pub espvkOID: SECItem,
    pub espvkData: SEC_PKCS12PVKSupportingData,
    pub espvkCipherText: Union_Unnamed35,
    pub duplicate: PRBool,
    pub problem_cert: PRBool,
    pub single_cert: PRBool,
    pub nCerts: ::std::os::raw::c_int,
    pub derCert: SECItem,
}
impl ::std::default::Default for SEC_PKCS12ESPVKItemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed35 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed35 {
    pub unsafe fn pkcs8KeyShroud(&mut self)
     -> *mut *mut SECKEYEncryptedPrivateKeyInfo {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed35 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12SafeBagStr {
    pub poolp: *mut PLArenaPool,
    pub safeBagTypeTag: *mut SECOidData,
    pub safeBagType: SECItem,
    pub safeContent: Union_Unnamed36,
    pub derSafeContent: SECItem,
    pub safeBagName: SECItem,
    pub uniSafeBagName: SECItem,
}
impl ::std::default::Default for SEC_PKCS12SafeBagStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed36 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed36 {
    pub unsafe fn keyBag(&mut self) -> *mut *mut SEC_PKCS12PrivateKeyBag {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn certAndCRLBag(&mut self)
     -> *mut *mut SEC_PKCS12CertAndCRLBag {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn secretBag(&mut self) -> *mut *mut SEC_PKCS12SecretBag {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed36 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12SafeContentsStr {
    pub poolp: *mut PLArenaPool,
    pub contents: *mut *mut SEC_PKCS12SafeBag,
    pub safe_size: ::std::os::raw::c_int,
    pub old: PRBool,
    pub swapUnicode: PRBool,
    pub possibleSwapUnicode: PRBool,
}
impl ::std::default::Default for SEC_PKCS12SafeContentsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12PrivateKeyStr {
    pub poolp: *mut PLArenaPool,
    pub pvkData: SEC_PKCS12PVKSupportingData,
    pub pkcs8data: SECKEYPrivateKeyInfo,
    pub duplicate: PRBool,
    pub problem_cert: PRBool,
    pub single_cert: PRBool,
    pub nCerts: ::std::os::raw::c_int,
    pub derCert: SECItem,
}
impl ::std::default::Default for SEC_PKCS12PrivateKeyStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12PrivateKeyBagStr {
    pub poolp: *mut PLArenaPool,
    pub privateKeys: *mut *mut SEC_PKCS12PrivateKey,
    pub bag_size: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SEC_PKCS12PrivateKeyBagStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12CertAndCRLStr {
    pub poolp: *mut PLArenaPool,
    pub BagTypeTag: *mut SECOidData,
    pub BagID: SECItem,
    pub value: Union_Unnamed37,
    pub derValue: SECItem,
    pub nickname: SECItem,
    pub duplicate: PRBool,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SEC_PKCS12CertAndCRLStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed37 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed37 {
    pub unsafe fn x509(&mut self) -> *mut *mut SEC_PKCS12X509CertCRL {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sdsi(&mut self) -> *mut *mut SEC_PKCS12SDSICert {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed37 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12X509CertCRLStr {
    pub poolp: *mut PLArenaPool,
    pub certOrCRL: SEC_PKCS7ContentInfo,
    pub thumbprint: SGNDigestInfo,
    pub derLeafCert: *mut SECItem,
}
impl ::std::default::Default for SEC_PKCS12X509CertCRLStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12SDSICertStr {
    pub poolp: *mut PLArenaPool,
    pub value: SECItem,
    pub thumbprint: SGNDigestInfo,
}
impl ::std::default::Default for SEC_PKCS12SDSICertStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12CertAndCRLBagStr {
    pub poolp: *mut PLArenaPool,
    pub certAndCRLs: *mut *mut SEC_PKCS12CertAndCRL,
    pub bag_size: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SEC_PKCS12CertAndCRLBagStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12SecretAdditionalStr {
    pub poolp: *mut PLArenaPool,
    pub secretTypeTag: *mut SECOidData,
    pub secretAdditionalType: SECItem,
    pub secretAdditionalContent: SECItem,
}
impl ::std::default::Default for SEC_PKCS12SecretAdditionalStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12SecretStr {
    pub poolp: *mut PLArenaPool,
    pub secretName: SECItem,
    pub value: SECItem,
    pub secretAdditional: SEC_PKCS12SecretAdditional,
    pub uniSecretName: SECItem,
}
impl ::std::default::Default for SEC_PKCS12SecretStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12SecretItemStr {
    pub poolp: *mut PLArenaPool,
    pub secret: SEC_PKCS12Secret,
    pub subFolder: SEC_PKCS12SafeBag,
}
impl ::std::default::Default for SEC_PKCS12SecretItemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12SecretBagStr {
    pub poolp: *mut PLArenaPool,
    pub secrets: *mut *mut SEC_PKCS12SecretItem,
    pub bag_size: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SEC_PKCS12SecretBagStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12MacDataStr {
    pub safeMac: SGNDigestInfo,
    pub macSalt: SECItem,
}
impl ::std::default::Default for SEC_PKCS12MacDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12PFXItemStr {
    pub poolp: *mut PLArenaPool,
    pub macData: SEC_PKCS12MacData,
    pub authSafe: SEC_PKCS7ContentInfo,
    pub old: PRBool,
    pub old_safeMac: SGNDigestInfo,
    pub old_macSalt: SECItem,
    pub swapUnicode: PRBool,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SEC_PKCS12PFXItemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12BaggageItemStr {
    pub poolp: *mut PLArenaPool,
    pub espvks: *mut *mut SEC_PKCS12ESPVKItem,
    pub unencSecrets: *mut *mut SEC_PKCS12SafeBag,
    pub nEspvks: ::std::os::raw::c_int,
    pub nSecrets: ::std::os::raw::c_int,
}
impl ::std::default::Default for SEC_PKCS12BaggageItemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12Baggage_OLDStr {
    pub poolp: *mut PLArenaPool,
    pub espvks: *mut *mut SEC_PKCS12ESPVKItem,
    pub luggage_size: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SEC_PKCS12Baggage_OLDStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12AuthenticatedSafeStr {
    pub poolp: *mut PLArenaPool,
    pub version: SECItem,
    pub transportTypeTag: *mut SECOidData,
    pub transportMode: SECItem,
    pub privacySalt: SECItem,
    pub baggage: SEC_PKCS12Baggage,
    pub safe: *mut SEC_PKCS7ContentInfo,
    pub old: PRBool,
    pub emptySafe: PRBool,
    pub old_baggage: SEC_PKCS12Baggage_OLD,
    pub old_safe: SEC_PKCS7ContentInfo,
    pub swapUnicode: PRBool,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for SEC_PKCS12AuthenticatedSafeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CK_C_Initialize =
    ::std::option::Option<extern "C" fn(pInitArgs: CK_VOID_PTR) -> CK_RV>;
pub type CK_C_Finalize =
    ::std::option::Option<extern "C" fn(pReserved: CK_VOID_PTR) -> CK_RV>;
pub type CK_C_GetInfo =
    ::std::option::Option<extern "C" fn(pInfo: CK_INFO_PTR) -> CK_RV>;
pub type CK_C_GetFunctionList =
    ::std::option::Option<extern "C" fn(ppFunctionList:
                                            CK_FUNCTION_LIST_PTR_PTR)
                              -> CK_RV>;
pub type CK_C_GetSlotList =
    ::std::option::Option<extern "C" fn(tokenPresent: CK_BBOOL,
                                        pSlotList: CK_SLOT_ID_PTR,
                                        pulCount: CK_ULONG_PTR) -> CK_RV>;
pub type CK_C_GetSlotInfo =
    ::std::option::Option<extern "C" fn(slotID: CK_SLOT_ID,
                                        pInfo: CK_SLOT_INFO_PTR) -> CK_RV>;
pub type CK_C_GetTokenInfo =
    ::std::option::Option<extern "C" fn(slotID: CK_SLOT_ID,
                                        pInfo: CK_TOKEN_INFO_PTR) -> CK_RV>;
pub type CK_C_GetMechanismList =
    ::std::option::Option<extern "C" fn(slotID: CK_SLOT_ID,
                                        pMechanismList: CK_MECHANISM_TYPE_PTR,
                                        pulCount: CK_ULONG_PTR) -> CK_RV>;
pub type CK_C_GetMechanismInfo =
    ::std::option::Option<extern "C" fn(slotID: CK_SLOT_ID,
                                        type_: CK_MECHANISM_TYPE,
                                        pInfo: CK_MECHANISM_INFO_PTR)
                              -> CK_RV>;
pub type CK_C_InitToken =
    ::std::option::Option<extern "C" fn(slotID: CK_SLOT_ID,
                                        pPin: CK_UTF8CHAR_PTR,
                                        ulPinLen: CK_ULONG,
                                        pLabel: CK_UTF8CHAR_PTR) -> CK_RV>;
pub type CK_C_InitPIN =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pPin: CK_UTF8CHAR_PTR,
                                        ulPinLen: CK_ULONG) -> CK_RV>;
pub type CK_C_SetPIN =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pOldPin: CK_UTF8CHAR_PTR,
                                        ulOldLen: CK_ULONG,
                                        pNewPin: CK_UTF8CHAR_PTR,
                                        ulNewLen: CK_ULONG) -> CK_RV>;
pub type CK_C_OpenSession =
    ::std::option::Option<extern "C" fn(slotID: CK_SLOT_ID, flags: CK_FLAGS,
                                        pApplication: CK_VOID_PTR,
                                        Notify: CK_NOTIFY,
                                        phSession: CK_SESSION_HANDLE_PTR)
                              -> CK_RV>;
pub type CK_C_CloseSession =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE)
                              -> CK_RV>;
pub type CK_C_CloseAllSessions =
    ::std::option::Option<extern "C" fn(slotID: CK_SLOT_ID) -> CK_RV>;
pub type CK_C_GetSessionInfo =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pInfo: CK_SESSION_INFO_PTR) -> CK_RV>;
pub type CK_C_GetOperationState =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pOperationState: CK_BYTE_PTR,
                                        pulOperationStateLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_SetOperationState =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pOperationState: CK_BYTE_PTR,
                                        ulOperationStateLen: CK_ULONG,
                                        hEncryptionKey: CK_OBJECT_HANDLE,
                                        hAuthenticationKey: CK_OBJECT_HANDLE)
                              -> CK_RV>;
pub type CK_C_Login =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        userType: CK_USER_TYPE,
                                        pPin: CK_UTF8CHAR_PTR,
                                        ulPinLen: CK_ULONG) -> CK_RV>;
pub type CK_C_Logout =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE)
                              -> CK_RV>;
pub type CK_C_CreateObject =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pTemplate: CK_ATTRIBUTE_PTR,
                                        ulCount: CK_ULONG,
                                        phObject: CK_OBJECT_HANDLE_PTR)
                              -> CK_RV>;
pub type CK_C_CopyObject =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        hObject: CK_OBJECT_HANDLE,
                                        pTemplate: CK_ATTRIBUTE_PTR,
                                        ulCount: CK_ULONG,
                                        phNewObject: CK_OBJECT_HANDLE_PTR)
                              -> CK_RV>;
pub type CK_C_DestroyObject =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        hObject: CK_OBJECT_HANDLE) -> CK_RV>;
pub type CK_C_GetObjectSize =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        hObject: CK_OBJECT_HANDLE,
                                        pulSize: CK_ULONG_PTR) -> CK_RV>;
pub type CK_C_GetAttributeValue =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        hObject: CK_OBJECT_HANDLE,
                                        pTemplate: CK_ATTRIBUTE_PTR,
                                        ulCount: CK_ULONG) -> CK_RV>;
pub type CK_C_SetAttributeValue =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        hObject: CK_OBJECT_HANDLE,
                                        pTemplate: CK_ATTRIBUTE_PTR,
                                        ulCount: CK_ULONG) -> CK_RV>;
pub type CK_C_FindObjectsInit =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pTemplate: CK_ATTRIBUTE_PTR,
                                        ulCount: CK_ULONG) -> CK_RV>;
pub type CK_C_FindObjects =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        phObject: CK_OBJECT_HANDLE_PTR,
                                        ulMaxObjectCount: CK_ULONG,
                                        pulObjectCount: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_FindObjectsFinal =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE)
                              -> CK_RV>;
pub type CK_C_EncryptInit =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        hKey: CK_OBJECT_HANDLE) -> CK_RV>;
pub type CK_C_Encrypt =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pData: CK_BYTE_PTR,
                                        ulDataLen: CK_ULONG,
                                        pEncryptedData: CK_BYTE_PTR,
                                        pulEncryptedDataLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_EncryptUpdate =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pPart: CK_BYTE_PTR,
                                        ulPartLen: CK_ULONG,
                                        pEncryptedPart: CK_BYTE_PTR,
                                        pulEncryptedPartLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_EncryptFinal =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pLastEncryptedPart: CK_BYTE_PTR,
                                        pulLastEncryptedPartLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_DecryptInit =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        hKey: CK_OBJECT_HANDLE) -> CK_RV>;
pub type CK_C_Decrypt =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pEncryptedData: CK_BYTE_PTR,
                                        ulEncryptedDataLen: CK_ULONG,
                                        pData: CK_BYTE_PTR,
                                        pulDataLen: CK_ULONG_PTR) -> CK_RV>;
pub type CK_C_DecryptUpdate =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pEncryptedPart: CK_BYTE_PTR,
                                        ulEncryptedPartLen: CK_ULONG,
                                        pPart: CK_BYTE_PTR,
                                        pulPartLen: CK_ULONG_PTR) -> CK_RV>;
pub type CK_C_DecryptFinal =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pLastPart: CK_BYTE_PTR,
                                        pulLastPartLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_DigestInit =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR)
                              -> CK_RV>;
pub type CK_C_Digest =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pData: CK_BYTE_PTR,
                                        ulDataLen: CK_ULONG,
                                        pDigest: CK_BYTE_PTR,
                                        pulDigestLen: CK_ULONG_PTR) -> CK_RV>;
pub type CK_C_DigestUpdate =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pPart: CK_BYTE_PTR,
                                        ulPartLen: CK_ULONG) -> CK_RV>;
pub type CK_C_DigestKey =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        hKey: CK_OBJECT_HANDLE) -> CK_RV>;
pub type CK_C_DigestFinal =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pDigest: CK_BYTE_PTR,
                                        pulDigestLen: CK_ULONG_PTR) -> CK_RV>;
pub type CK_C_SignInit =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        hKey: CK_OBJECT_HANDLE) -> CK_RV>;
pub type CK_C_Sign =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pData: CK_BYTE_PTR,
                                        ulDataLen: CK_ULONG,
                                        pSignature: CK_BYTE_PTR,
                                        pulSignatureLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_SignUpdate =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pPart: CK_BYTE_PTR,
                                        ulPartLen: CK_ULONG) -> CK_RV>;
pub type CK_C_SignFinal =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pSignature: CK_BYTE_PTR,
                                        pulSignatureLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_SignRecoverInit =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        hKey: CK_OBJECT_HANDLE) -> CK_RV>;
pub type CK_C_SignRecover =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pData: CK_BYTE_PTR,
                                        ulDataLen: CK_ULONG,
                                        pSignature: CK_BYTE_PTR,
                                        pulSignatureLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_VerifyInit =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        hKey: CK_OBJECT_HANDLE) -> CK_RV>;
pub type CK_C_Verify =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pData: CK_BYTE_PTR,
                                        ulDataLen: CK_ULONG,
                                        pSignature: CK_BYTE_PTR,
                                        ulSignatureLen: CK_ULONG) -> CK_RV>;
pub type CK_C_VerifyUpdate =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pPart: CK_BYTE_PTR,
                                        ulPartLen: CK_ULONG) -> CK_RV>;
pub type CK_C_VerifyFinal =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pSignature: CK_BYTE_PTR,
                                        ulSignatureLen: CK_ULONG) -> CK_RV>;
pub type CK_C_VerifyRecoverInit =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        hKey: CK_OBJECT_HANDLE) -> CK_RV>;
pub type CK_C_VerifyRecover =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pSignature: CK_BYTE_PTR,
                                        ulSignatureLen: CK_ULONG,
                                        pData: CK_BYTE_PTR,
                                        pulDataLen: CK_ULONG_PTR) -> CK_RV>;
pub type CK_C_DigestEncryptUpdate =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pPart: CK_BYTE_PTR,
                                        ulPartLen: CK_ULONG,
                                        pEncryptedPart: CK_BYTE_PTR,
                                        pulEncryptedPartLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_DecryptDigestUpdate =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pEncryptedPart: CK_BYTE_PTR,
                                        ulEncryptedPartLen: CK_ULONG,
                                        pPart: CK_BYTE_PTR,
                                        pulPartLen: CK_ULONG_PTR) -> CK_RV>;
pub type CK_C_SignEncryptUpdate =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pPart: CK_BYTE_PTR,
                                        ulPartLen: CK_ULONG,
                                        pEncryptedPart: CK_BYTE_PTR,
                                        pulEncryptedPartLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_DecryptVerifyUpdate =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pEncryptedPart: CK_BYTE_PTR,
                                        ulEncryptedPartLen: CK_ULONG,
                                        pPart: CK_BYTE_PTR,
                                        pulPartLen: CK_ULONG_PTR) -> CK_RV>;
pub type CK_C_GenerateKey =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        pTemplate: CK_ATTRIBUTE_PTR,
                                        ulCount: CK_ULONG,
                                        phKey: CK_OBJECT_HANDLE_PTR)
                              -> CK_RV>;
pub type CK_C_GenerateKeyPair =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        pPublicKeyTemplate: CK_ATTRIBUTE_PTR,
                                        ulPublicKeyAttributeCount: CK_ULONG,
                                        pPrivateKeyTemplate: CK_ATTRIBUTE_PTR,
                                        ulPrivateKeyAttributeCount: CK_ULONG,
                                        phPublicKey: CK_OBJECT_HANDLE_PTR,
                                        phPrivateKey: CK_OBJECT_HANDLE_PTR)
                              -> CK_RV>;
pub type CK_C_WrapKey =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        hWrappingKey: CK_OBJECT_HANDLE,
                                        hKey: CK_OBJECT_HANDLE,
                                        pWrappedKey: CK_BYTE_PTR,
                                        pulWrappedKeyLen: CK_ULONG_PTR)
                              -> CK_RV>;
pub type CK_C_UnwrapKey =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        hUnwrappingKey: CK_OBJECT_HANDLE,
                                        pWrappedKey: CK_BYTE_PTR,
                                        ulWrappedKeyLen: CK_ULONG,
                                        pTemplate: CK_ATTRIBUTE_PTR,
                                        ulAttributeCount: CK_ULONG,
                                        phKey: CK_OBJECT_HANDLE_PTR)
                              -> CK_RV>;
pub type CK_C_DeriveKey =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pMechanism: CK_MECHANISM_PTR,
                                        hBaseKey: CK_OBJECT_HANDLE,
                                        pTemplate: CK_ATTRIBUTE_PTR,
                                        ulAttributeCount: CK_ULONG,
                                        phKey: CK_OBJECT_HANDLE_PTR)
                              -> CK_RV>;
pub type CK_C_SeedRandom =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        pSeed: CK_BYTE_PTR,
                                        ulSeedLen: CK_ULONG) -> CK_RV>;
pub type CK_C_GenerateRandom =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE,
                                        RandomData: CK_BYTE_PTR,
                                        ulRandomLen: CK_ULONG) -> CK_RV>;
pub type CK_C_GetFunctionStatus =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE)
                              -> CK_RV>;
pub type CK_C_CancelFunction =
    ::std::option::Option<extern "C" fn(hSession: CK_SESSION_HANDLE)
                              -> CK_RV>;
pub type CK_C_WaitForSlotEvent =
    ::std::option::Option<extern "C" fn(flags: CK_FLAGS,
                                        pSlot: CK_SLOT_ID_PTR,
                                        pRserved: CK_VOID_PTR) -> CK_RV>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct CK_FUNCTION_LIST {
    pub version: CK_VERSION,
    pub C_Initialize: CK_C_Initialize,
    pub C_Finalize: CK_C_Finalize,
    pub C_GetInfo: CK_C_GetInfo,
    pub C_GetFunctionList: CK_C_GetFunctionList,
    pub C_GetSlotList: CK_C_GetSlotList,
    pub C_GetSlotInfo: CK_C_GetSlotInfo,
    pub C_GetTokenInfo: CK_C_GetTokenInfo,
    pub C_GetMechanismList: CK_C_GetMechanismList,
    pub C_GetMechanismInfo: CK_C_GetMechanismInfo,
    pub C_InitToken: CK_C_InitToken,
    pub C_InitPIN: CK_C_InitPIN,
    pub C_SetPIN: CK_C_SetPIN,
    pub C_OpenSession: CK_C_OpenSession,
    pub C_CloseSession: CK_C_CloseSession,
    pub C_CloseAllSessions: CK_C_CloseAllSessions,
    pub C_GetSessionInfo: CK_C_GetSessionInfo,
    pub C_GetOperationState: CK_C_GetOperationState,
    pub C_SetOperationState: CK_C_SetOperationState,
    pub C_Login: CK_C_Login,
    pub C_Logout: CK_C_Logout,
    pub C_CreateObject: CK_C_CreateObject,
    pub C_CopyObject: CK_C_CopyObject,
    pub C_DestroyObject: CK_C_DestroyObject,
    pub C_GetObjectSize: CK_C_GetObjectSize,
    pub C_GetAttributeValue: CK_C_GetAttributeValue,
    pub C_SetAttributeValue: CK_C_SetAttributeValue,
    pub C_FindObjectsInit: CK_C_FindObjectsInit,
    pub C_FindObjects: CK_C_FindObjects,
    pub C_FindObjectsFinal: CK_C_FindObjectsFinal,
    pub C_EncryptInit: CK_C_EncryptInit,
    pub C_Encrypt: CK_C_Encrypt,
    pub C_EncryptUpdate: CK_C_EncryptUpdate,
    pub C_EncryptFinal: CK_C_EncryptFinal,
    pub C_DecryptInit: CK_C_DecryptInit,
    pub C_Decrypt: CK_C_Decrypt,
    pub C_DecryptUpdate: CK_C_DecryptUpdate,
    pub C_DecryptFinal: CK_C_DecryptFinal,
    pub C_DigestInit: CK_C_DigestInit,
    pub C_Digest: CK_C_Digest,
    pub C_DigestUpdate: CK_C_DigestUpdate,
    pub C_DigestKey: CK_C_DigestKey,
    pub C_DigestFinal: CK_C_DigestFinal,
    pub C_SignInit: CK_C_SignInit,
    pub C_Sign: CK_C_Sign,
    pub C_SignUpdate: CK_C_SignUpdate,
    pub C_SignFinal: CK_C_SignFinal,
    pub C_SignRecoverInit: CK_C_SignRecoverInit,
    pub C_SignRecover: CK_C_SignRecover,
    pub C_VerifyInit: CK_C_VerifyInit,
    pub C_Verify: CK_C_Verify,
    pub C_VerifyUpdate: CK_C_VerifyUpdate,
    pub C_VerifyFinal: CK_C_VerifyFinal,
    pub C_VerifyRecoverInit: CK_C_VerifyRecoverInit,
    pub C_VerifyRecover: CK_C_VerifyRecover,
    pub C_DigestEncryptUpdate: CK_C_DigestEncryptUpdate,
    pub C_DecryptDigestUpdate: CK_C_DecryptDigestUpdate,
    pub C_SignEncryptUpdate: CK_C_SignEncryptUpdate,
    pub C_DecryptVerifyUpdate: CK_C_DecryptVerifyUpdate,
    pub C_GenerateKey: CK_C_GenerateKey,
    pub C_GenerateKeyPair: CK_C_GenerateKeyPair,
    pub C_WrapKey: CK_C_WrapKey,
    pub C_UnwrapKey: CK_C_UnwrapKey,
    pub C_DeriveKey: CK_C_DeriveKey,
    pub C_SeedRandom: CK_C_SeedRandom,
    pub C_GenerateRandom: CK_C_GenerateRandom,
    pub C_GetFunctionStatus: CK_C_GetFunctionStatus,
    pub C_CancelFunction: CK_C_CancelFunction,
    pub C_WaitForSlotEvent: CK_C_WaitForSlotEvent,
}
impl ::std::default::Default for CK_FUNCTION_LIST {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sec_PKCS12PFXItem = sec_PKCS12PFXItemStr;
pub type sec_PKCS12MacData = sec_PKCS12MacDataStr;
pub type sec_PKCS12AuthenticatedSafe = sec_PKCS12AuthenticatedSafeStr;
pub type sec_PKCS12SafeContents = sec_PKCS12SafeContentsStr;
pub type sec_PKCS12SafeBag = sec_PKCS12SafeBagStr;
pub enum sec_PKCS12PKCS8ShroudedKeyBagStr { }
pub type sec_PKCS12PKCS8ShroudedKeyBag = sec_PKCS12PKCS8ShroudedKeyBagStr;
pub type sec_PKCS12CertBag = sec_PKCS12CertBagStr;
pub type sec_PKCS12CRLBag = sec_PKCS12CRLBagStr;
pub type sec_PKCS12Attribute = sec_PKCS12AttributeStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12CertBagStr {
    pub bagID: SECItem,
    pub value: Union_Unnamed38,
}
impl ::std::default::Default for sec_PKCS12CertBagStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed38 {
    pub _bindgen_data_: [u64; 3usize],
}
impl Union_Unnamed38 {
    pub unsafe fn x509Cert(&mut self) -> *mut SECItem {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn SDSICert(&mut self) -> *mut SECItem {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed38 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12CRLBagStr {
    pub bagID: SECItem,
    pub value: Union_Unnamed39,
}
impl ::std::default::Default for sec_PKCS12CRLBagStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed39 {
    pub _bindgen_data_: [u64; 3usize],
}
impl Union_Unnamed39 {
    pub unsafe fn x509CRL(&mut self) -> *mut SECItem {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed39 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12SecretBag {
    pub secretType: SECItem,
    pub secretContent: SECItem,
}
impl ::std::default::Default for sec_PKCS12SecretBag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12AttributeStr {
    pub attrType: SECItem,
    pub attrValue: *mut *mut SECItem,
}
impl ::std::default::Default for sec_PKCS12AttributeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12SafeBagStr {
    pub safeBagType: SECItem,
    pub safeBagContent: Union_Unnamed40,
    pub attribs: *mut *mut sec_PKCS12Attribute,
    pub bagTypeTag: *mut SECOidData,
    pub arena: *mut PLArenaPool,
    pub nAttribs: ::std::os::raw::c_uint,
    pub problem: PRBool,
    pub noInstall: PRBool,
    pub validated: PRBool,
    pub hasKey: PRBool,
    pub unused: PRBool,
    pub installed: PRBool,
    pub error: ::std::os::raw::c_int,
    pub swapUnicodeBytes: PRBool,
    pub slot: *mut PK11SlotInfo,
    pub pwitem: *mut SECItem,
    pub oldBagType: PRBool,
    pub tokenCAs: SECPKCS12TargetTokenCAs,
}
impl ::std::default::Default for sec_PKCS12SafeBagStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed40 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed40 {
    pub unsafe fn pkcs8KeyBag(&mut self) -> *mut *mut SECKEYPrivateKeyInfo {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pkcs8ShroudedKeyBag(&mut self)
     -> *mut *mut SECKEYEncryptedPrivateKeyInfo {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn certBag(&mut self) -> *mut *mut sec_PKCS12CertBag {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn crlBag(&mut self) -> *mut *mut sec_PKCS12CRLBag {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn secretBag(&mut self) -> *mut *mut sec_PKCS12SecretBag {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn safeContents(&mut self)
     -> *mut *mut sec_PKCS12SafeContents {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed40 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12SafeContentsStr {
    pub safeBags: *mut *mut sec_PKCS12SafeBag,
    pub encodedSafeBags: *mut *mut SECItem,
    pub arena: *mut PLArenaPool,
    pub bagCount: ::std::os::raw::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for sec_PKCS12SafeContentsStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12MacDataStr {
    pub safeMac: SGNDigestInfo,
    pub macSalt: SECItem,
    pub iter: SECItem,
}
impl ::std::default::Default for sec_PKCS12MacDataStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12PFXItemStr {
    pub version: SECItem,
    pub authSafe: *mut SEC_PKCS7ContentInfo,
    pub encodedAuthSafe: SECItem,
    pub macData: sec_PKCS12MacData,
    pub encodedMacData: SECItem,
}
impl ::std::default::Default for sec_PKCS12PFXItemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12AuthenticatedSafeStr {
    pub safes: *mut *mut SEC_PKCS7ContentInfo,
    pub encodedSafes: *mut *mut SECItem,
    pub safeCount: ::std::os::raw::c_uint,
    pub dummySafe: SECItem,
}
impl ::std::default::Default for sec_PKCS12AuthenticatedSafeStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PKCS12OpenFunction =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type PKCS12ReadFunction =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               buffer:
                                                   *mut ::std::os::raw::c_uchar,
                                               lenRead:
                                                   *mut ::std::os::raw::c_uint,
                                               maxLen: ::std::os::raw::c_uint)
                              -> ::std::os::raw::c_int>;
pub type PKCS12WriteFunction =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               buffer:
                                                   *mut ::std::os::raw::c_uchar,
                                               bufLen:
                                                   *mut ::std::os::raw::c_uint,
                                               lenWritten:
                                                   *mut ::std::os::raw::c_uint)
                              -> ::std::os::raw::c_int>;
pub type PKCS12CloseFunction =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type PKCS12UnicodeConvertFunction =
    ::std::option::Option<unsafe extern "C" fn(arena: *mut PLArenaPool,
                                               dest: *mut SECItem,
                                               src: *mut SECItem,
                                               toUnicode: PRBool,
                                               swapBytes: PRBool)
                              -> SECStatus>;
pub type SEC_PKCS12EncoderOutputCallback =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               buf:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_ulong)>;
pub type SEC_PKCS12DecoderOutputCallback =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               buf:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_ulong)>;
pub type SEC_PKCS12NicknameCollisionCallback =
    ::std::option::Option<unsafe extern "C" fn(old_nickname: *mut SECItem,
                                               cancel: *mut PRBool,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut SECItem>;
pub type SEC_PKCS12NicknameRenameCallback =
    ::std::option::Option<unsafe extern "C" fn(cert: *const CERTCertificate,
                                               default_nickname:
                                                   *const SECItem,
                                               new_nickname:
                                                   *mut *mut SECItem,
                                               arg:
                                                   *mut ::std::os::raw::c_void)
                              -> SECStatus>;
pub type digestOpenFn =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               readData: PRBool)
                              -> SECStatus>;
pub type digestCloseFn =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               removeFile: PRBool)
                              -> SECStatus>;
pub type digestIOFn =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void,
                                               buf:
                                                   *mut ::std::os::raw::c_uchar,
                                               len: ::std::os::raw::c_ulong)
                              -> ::std::os::raw::c_int>;
pub enum SEC_PKCS12ExportContextStr { }
pub type SEC_PKCS12ExportContext = SEC_PKCS12ExportContextStr;
pub enum SEC_PKCS12SafeInfoStr { }
pub type SEC_PKCS12SafeInfo = SEC_PKCS12SafeInfoStr;
pub enum SEC_PKCS12DecoderContextStr { }
pub type SEC_PKCS12DecoderContext = SEC_PKCS12DecoderContextStr;
pub type SEC_PKCS12DecoderItem = SEC_PKCS12DecoderItemStr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12PasswordModeInfo {
    pub password: *mut SECItem,
    pub algorithm: SECOidTag,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for sec_PKCS12PasswordModeInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sec_PKCS12PublicKeyModeInfo {
    pub cert: *mut CERTCertificate,
    pub certDb: *mut CERTCertDBHandle,
    pub algorithm: SECOidTag,
    pub keySize: ::std::os::raw::c_int,
}
impl ::std::default::Default for sec_PKCS12PublicKeyModeInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct SEC_PKCS12DecoderItemStr {
    pub der: *mut SECItem,
    pub type_: SECOidTag,
    pub hasKey: PRBool,
    pub friendlyName: *mut SECItem,
    pub shroudAlg: *mut SECAlgorithmID,
}
impl ::std::default::Default for SEC_PKCS12DecoderItemStr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SEC_PKCS12GetPassword =
    ::std::option::Option<unsafe extern "C" fn(arg:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut SECItem>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut SECOID_AlgorithmIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_AnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_BitStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_BMPStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_BooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_EnumeratedTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_GeneralizedTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_IA5StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_IntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_NullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_ObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_OctetStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PrintableStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_T61StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_UniversalStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_UTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_UTF8StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_VisibleStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToAnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToBitStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToBMPStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToBooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToEnumeratedTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToGeneralizedTimeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToIA5StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToIntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToNullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToOctetStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToPrintableStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToT61StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToUniversalStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToUTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToUTF8StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToVisibleStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfAnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfBitStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfBMPStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfBooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfEnumeratedTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfGeneralizedTimeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfIA5StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfIntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfNullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfOctetStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfPrintableStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfT61StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfUniversalStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfUTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfUTF8StringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SequenceOfVisibleStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfAnyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfBitStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfBMPStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfBooleanTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfEnumeratedTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfGeneralizedTimeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfIA5StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfIntegerTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfNullTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfObjectIDTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfOctetStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfPrintableStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfT61StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfUniversalStringTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfUTCTimeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfUTF8StringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SetOfVisibleStringTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SkipTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_PointerToEncryptedPrivateKeyInfoTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_EncryptedPrivateKeyInfoTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_PrivateKeyInfoTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_PointerToPrivateKeyInfoTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_RSAPublicKeyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_RSAPSSParamsTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_DSAPublicKeyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_DHPublicKeyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_DHParamKeyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_PQGParamsTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_DSAPrivateKeyExportTemplate:
               [SEC_ASN1Template; 0usize];
    pub static in6addr_any: in6_addr;
    pub static in6addr_loopback: in6_addr;
    pub static mut CERT_CertificateRequestTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut CERT_CertificateTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_SignedCertificateTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_CertExtensionTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_SequenceOfCertExtensionTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SECKEY_PublicKeyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_SubjectPublicKeyInfoTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut CERT_TimeChoiceTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_ValidityTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_PublicKeyAndChallengeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_CertSequenceTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_IssuerAndSNTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_NameTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_SetOfSignedCrlTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_RDNTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_SignedDataTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_CrlTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_SignedCrlTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_AttributeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut CERT_SetOfAttributeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS7ContentInfoTemplate: [SEC_ASN1Template; 0usize];
    pub static mut sgn_DigestInfoTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12PFXItemTemplate_OLD: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12AuthenticatedSafeTemplate_OLD:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12BaggageTemplate_OLD: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12PFXItemTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12MacDataTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12AuthenticatedSafeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12BaggageTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12ESPVKItemTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12PVKSupportingDataTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12PVKAdditionalTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12SafeContentsTemplate_OLD:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12SafeContentsTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12SafeBagTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12PrivateKeyTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12PrivateKeyBagTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12CertAndCRLTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12CertAndCRLBagTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12X509CertCRLTemplate_OLD:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12X509CertCRLTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12SDSICertTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12SecretBagTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12SecretTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12SecretItemTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12SecretAdditionalTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SGN_DigestInfoTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToPKCS12KeyBagTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToPKCS12CertAndCRLBagTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToPKCS12CertAndCRLBagTemplate_OLD:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToPKCS12SecretBagTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToPKCS12X509CertCRLTemplate_OLD:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToPKCS12X509CertCRLTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PointerToPKCS12SDSICertTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12CodedSafeBagTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12CodedCertBagTemplate: [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12CodedCertAndCRLBagTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12PVKSupportingDataTemplate_OLD:
               [SEC_ASN1Template; 0usize];
    pub static mut SEC_PKCS12ESPVKItemTemplate_OLD:
               [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12PFXItemTemplate: [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12MacDataTemplate: [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12AuthenticatedSafeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12SafeContentsTemplate: [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12SafeContentsDecodeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12NestedSafeContentsDecodeTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12CertBagTemplate: [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12CRLBagTemplate: [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12SecretBagTemplate: [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12PointerToCertBagTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12PointerToCRLBagTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12PointerToSecretBagTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12PointerToSafeContentsTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12AttributeTemplate: [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12PointerToContentInfoTemplate:
               [SEC_ASN1Template; 0usize];
    pub static mut sec_PKCS12SafeBagTemplate: [SEC_ASN1Template; 0usize];
}
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn PR_SetLibraryPath(path: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_GetLibraryPath() -> *mut ::std::os::raw::c_char;
    pub fn PR_GetLibraryName(dir: *const ::std::os::raw::c_char,
                             lib: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PR_FreeLibraryName(mem: *mut ::std::os::raw::c_char);
    pub fn PR_LoadLibrary(name: *const ::std::os::raw::c_char)
     -> *mut PRLibrary;
    pub fn PR_LoadLibraryWithFlags(libSpec: PRLibSpec, flags: PRIntn)
     -> *mut PRLibrary;
    pub fn PR_UnloadLibrary(lib: *mut PRLibrary) -> PRStatus;
    pub fn PR_FindSymbol(lib: *mut PRLibrary,
                         name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_FindFunctionSymbol(lib: *mut PRLibrary,
                                 name: *const ::std::os::raw::c_char)
     -> PRFuncPtr;
    pub fn PR_FindSymbolAndLibrary(name: *const ::std::os::raw::c_char,
                                   lib: *mut *mut PRLibrary)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_FindFunctionSymbolAndLibrary(name:
                                               *const ::std::os::raw::c_char,
                                           lib: *mut *mut PRLibrary)
     -> PRFuncPtr;
    pub fn PR_LoadStaticLibrary(name: *const ::std::os::raw::c_char,
                                table: *const PRStaticLinkTable)
     -> *mut PRLibrary;
    pub fn PR_GetLibraryFilePathname(name: *const ::std::os::raw::c_char,
                                     addr: PRFuncPtr)
     -> *mut ::std::os::raw::c_char;
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: size_t)
     -> ::std::os::raw::c_int;
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut random_data, __result: *mut int32_t)
     -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut ::std::os::raw::c_double,
                      __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn PR_NewLogModule(name: *const ::std::os::raw::c_char)
     -> *mut PRLogModuleInfo;
    pub fn PR_SetLogFile(name: *const ::std::os::raw::c_char) -> PRBool;
    pub fn PR_SetLogBuffering(buffer_size: PRIntn);
    pub fn PR_LogPrint(fmt: *const ::std::os::raw::c_char, ...);
    pub fn PR_LogFlush();
    pub fn PR_Assert(s: *const ::std::os::raw::c_char,
                     file: *const ::std::os::raw::c_char, ln: PRIntn);
    pub fn PL_InitArenaPool(pool: *mut PLArenaPool,
                            name: *const ::std::os::raw::c_char,
                            size: PRUint32, align: PRUint32);
    pub fn PL_ArenaFinish();
    pub fn PL_FreeArenaPool(pool: *mut PLArenaPool);
    pub fn PL_FinishArenaPool(pool: *mut PLArenaPool);
    pub fn PL_CompactArenaPool(pool: *mut PLArenaPool);
    pub fn PL_ArenaAllocate(pool: *mut PLArenaPool, nb: PRUint32)
     -> *mut ::std::os::raw::c_void;
    pub fn PL_ArenaGrow(pool: *mut PLArenaPool,
                        p: *mut ::std::os::raw::c_void, size: PRUint32,
                        incr: PRUint32) -> *mut ::std::os::raw::c_void;
    pub fn PL_ArenaRelease(pool: *mut PLArenaPool,
                           mark: *mut ::std::os::raw::c_char);
    pub fn PL_ClearArenaPool(pool: *mut PLArenaPool, pattern: PRInt32);
    pub fn PL_SizeOfArenaPoolExcludingPool(pool: *const PLArenaPool,
                                           mallocSizeOf: PLMallocSizeFn)
     -> size_t;
    pub fn PL_strlen(str: *const ::std::os::raw::c_char) -> PRUint32;
    pub fn PL_strnlen(str: *const ::std::os::raw::c_char, max: PRUint32)
     -> PRUint32;
    pub fn PL_strcpy(dest: *mut ::std::os::raw::c_char,
                     src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncpy(dest: *mut ::std::os::raw::c_char,
                      src: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncpyz(dest: *mut ::std::os::raw::c_char,
                       src: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strfree(s: *mut ::std::os::raw::c_char);
    pub fn PL_strndup(s: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcat(dst: *mut ::std::os::raw::c_char,
                     src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncat(dst: *mut ::std::os::raw::c_char,
                      src: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcatn(dst: *mut ::std::os::raw::c_char, max: PRUint32,
                      src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcmp(a: *const ::std::os::raw::c_char,
                     b: *const ::std::os::raw::c_char) -> PRIntn;
    pub fn PL_strncmp(a: *const ::std::os::raw::c_char,
                      b: *const ::std::os::raw::c_char, max: PRUint32)
     -> PRIntn;
    pub fn PL_strcasecmp(a: *const ::std::os::raw::c_char,
                         b: *const ::std::os::raw::c_char) -> PRIntn;
    pub fn PL_strncasecmp(a: *const ::std::os::raw::c_char,
                          b: *const ::std::os::raw::c_char, max: PRUint32)
     -> PRIntn;
    pub fn PL_strchr(s: *const ::std::os::raw::c_char,
                     c: ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strrchr(s: *const ::std::os::raw::c_char,
                      c: ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnchr(s: *const ::std::os::raw::c_char,
                      c: ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnrchr(s: *const ::std::os::raw::c_char,
                       c: ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strpbrk(s: *const ::std::os::raw::c_char,
                      list: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strprbrk(s: *const ::std::os::raw::c_char,
                       list: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnpbrk(s: *const ::std::os::raw::c_char,
                       list: *const ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnprbrk(s: *const ::std::os::raw::c_char,
                        list: *const ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strstr(big: *const ::std::os::raw::c_char,
                     little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strrstr(big: *const ::std::os::raw::c_char,
                      little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnstr(big: *const ::std::os::raw::c_char,
                      little: *const ::std::os::raw::c_char, n: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strnrstr(big: *const ::std::os::raw::c_char,
                       little: *const ::std::os::raw::c_char, max: PRUint32)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcasestr(big: *const ::std::os::raw::c_char,
                         little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strcaserstr(big: *const ::std::os::raw::c_char,
                          little: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PL_strncasestr(big: *const ::std::os::raw::c_char,
                          little: *const ::std::os::raw::c_char,
                          max: PRUint32) -> *mut ::std::os::raw::c_char;
    pub fn PL_strncaserstr(big: *const ::std::os::raw::c_char,
                           little: *const ::std::os::raw::c_char,
                           max: PRUint32) -> *mut ::std::os::raw::c_char;
    pub fn PL_strtok_r(s1: *mut ::std::os::raw::c_char,
                       s2: *const ::std::os::raw::c_char,
                       lasts: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PORT_Alloc(len: size_t) -> *mut ::std::os::raw::c_void;
    pub fn PORT_Realloc(old: *mut ::std::os::raw::c_void, len: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ZAlloc(len: size_t) -> *mut ::std::os::raw::c_void;
    pub fn PORT_Free(ptr: *mut ::std::os::raw::c_void);
    pub fn PORT_ZFree(ptr: *mut ::std::os::raw::c_void, len: size_t);
    pub fn PORT_Strdup(s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PORT_SetError(value: ::std::os::raw::c_int);
    pub fn PORT_GetError() -> ::std::os::raw::c_int;
    pub fn PORT_NewArena(chunksize: ::std::os::raw::c_ulong)
     -> *mut PLArenaPool;
    pub fn PORT_FreeArena(arena: *mut PLArenaPool, zero: PRBool);
    pub fn PORT_InitCheapArena(arena: *mut PORTCheapArenaPool,
                               chunksize: ::std::os::raw::c_ulong);
    pub fn PORT_DestroyCheapArena(arena: *mut PORTCheapArenaPool);
    pub fn PORT_ArenaAlloc(arena: *mut PLArenaPool, size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaZAlloc(arena: *mut PLArenaPool, size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaGrow(arena: *mut PLArenaPool,
                          ptr: *mut ::std::os::raw::c_void, oldsize: size_t,
                          newsize: size_t) -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaMark(arena: *mut PLArenaPool)
     -> *mut ::std::os::raw::c_void;
    pub fn PORT_ArenaRelease(arena: *mut PLArenaPool,
                             mark: *mut ::std::os::raw::c_void);
    pub fn PORT_ArenaZRelease(arena: *mut PLArenaPool,
                              mark: *mut ::std::os::raw::c_void);
    pub fn PORT_ArenaUnmark(arena: *mut PLArenaPool,
                            mark: *mut ::std::os::raw::c_void);
    pub fn PORT_ArenaStrdup(arena: *mut PLArenaPool,
                            str: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn PORT_SetUCS4_UTF8ConversionFunction(convFunc:
                                                   PORTCharConversionFunc);
    pub fn PORT_SetUCS2_ASCIIConversionFunction(convFunc:
                                                    PORTCharConversionWSwapFunc);
    pub fn PORT_UCS4_UTF8Conversion(toUnicode: PRBool,
                                    inBuf: *mut ::std::os::raw::c_uchar,
                                    inBufLen: ::std::os::raw::c_uint,
                                    outBuf: *mut ::std::os::raw::c_uchar,
                                    maxOutBufLen: ::std::os::raw::c_uint,
                                    outBufLen: *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn PORT_UCS2_ASCIIConversion(toUnicode: PRBool,
                                     inBuf: *mut ::std::os::raw::c_uchar,
                                     inBufLen: ::std::os::raw::c_uint,
                                     outBuf: *mut ::std::os::raw::c_uchar,
                                     maxOutBufLen: ::std::os::raw::c_uint,
                                     outBufLen: *mut ::std::os::raw::c_uint,
                                     swapBytes: PRBool) -> PRBool;
    pub fn PORT_SetUCS2_UTF8ConversionFunction(convFunc:
                                                   PORTCharConversionFunc);
    pub fn PORT_UCS2_UTF8Conversion(toUnicode: PRBool,
                                    inBuf: *mut ::std::os::raw::c_uchar,
                                    inBufLen: ::std::os::raw::c_uint,
                                    outBuf: *mut ::std::os::raw::c_uchar,
                                    maxOutBufLen: ::std::os::raw::c_uint,
                                    outBufLen: *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn PORT_ISO88591_UTF8Conversion(inBuf: *const ::std::os::raw::c_uchar,
                                        inBufLen: ::std::os::raw::c_uint,
                                        outBuf: *mut ::std::os::raw::c_uchar,
                                        maxOutBufLen: ::std::os::raw::c_uint,
                                        outBufLen:
                                            *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn sec_port_ucs4_utf8_conversion_function(toUnicode: PRBool,
                                                  inBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  inBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  maxOutBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBufLen:
                                                      *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn sec_port_ucs2_utf8_conversion_function(toUnicode: PRBool,
                                                  inBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  inBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBuf:
                                                      *mut ::std::os::raw::c_uchar,
                                                  maxOutBufLen:
                                                      ::std::os::raw::c_uint,
                                                  outBufLen:
                                                      *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn sec_port_iso88591_utf8_conversion_function(inBuf:
                                                          *const ::std::os::raw::c_uchar,
                                                      inBufLen:
                                                          ::std::os::raw::c_uint,
                                                      outBuf:
                                                          *mut ::std::os::raw::c_uchar,
                                                      maxOutBufLen:
                                                          ::std::os::raw::c_uint,
                                                      outBufLen:
                                                          *mut ::std::os::raw::c_uint)
     -> PRBool;
    pub fn NSS_PutEnv(envVarName: *const ::std::os::raw::c_char,
                      envValue: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn NSS_SecureMemcmp(a: *const ::std::os::raw::c_void,
                            b: *const ::std::os::raw::c_void, n: size_t)
     -> ::std::os::raw::c_int;
    pub fn PORT_LoadLibraryFromOrigin(existingShLibName:
                                          *const ::std::os::raw::c_char,
                                      staticShLibFunc: PRFuncPtr,
                                      newShLibName:
                                          *const ::std::os::raw::c_char)
     -> *mut PRLibrary;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn PL_NewHashTable(numBuckets: PRUint32, keyHash: PLHashFunction,
                           keyCompare: PLHashComparator,
                           valueCompare: PLHashComparator,
                           allocOps: *const PLHashAllocOps,
                           allocPriv: *mut ::std::os::raw::c_void)
     -> *mut PLHashTable;
    pub fn PL_HashTableDestroy(ht: *mut PLHashTable);
    pub fn PL_HashTableAdd(ht: *mut PLHashTable,
                           key: *const ::std::os::raw::c_void,
                           value: *mut ::std::os::raw::c_void)
     -> *mut PLHashEntry;
    pub fn PL_HashTableRemove(ht: *mut PLHashTable,
                              key: *const ::std::os::raw::c_void) -> PRBool;
    pub fn PL_HashTableLookup(ht: *mut PLHashTable,
                              key: *const ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn PL_HashTableLookupConst(ht: *mut PLHashTable,
                                   key: *const ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn PL_HashTableEnumerateEntries(ht: *mut PLHashTable,
                                        f: PLHashEnumerator,
                                        arg: *mut ::std::os::raw::c_void)
     -> PRIntn;
    pub fn PL_HashString(key: *const ::std::os::raw::c_void) -> PLHashNumber;
    pub fn PL_CompareStrings(v1: *const ::std::os::raw::c_void,
                             v2: *const ::std::os::raw::c_void) -> PRIntn;
    pub fn PL_CompareValues(v1: *const ::std::os::raw::c_void,
                            v2: *const ::std::os::raw::c_void) -> PRIntn;
    pub fn PL_HashTableRawLookup(ht: *mut PLHashTable, keyHash: PLHashNumber,
                                 key: *const ::std::os::raw::c_void)
     -> *mut *mut PLHashEntry;
    pub fn PL_HashTableRawLookupConst(ht: *mut PLHashTable,
                                      keyHash: PLHashNumber,
                                      key: *const ::std::os::raw::c_void)
     -> *mut *mut PLHashEntry;
    pub fn PL_HashTableRawAdd(ht: *mut PLHashTable,
                              hep: *mut *mut PLHashEntry,
                              keyHash: PLHashNumber,
                              key: *const ::std::os::raw::c_void,
                              value: *mut ::std::os::raw::c_void)
     -> *mut PLHashEntry;
    pub fn PL_HashTableRawRemove(ht: *mut PLHashTable,
                                 hep: *mut *mut PLHashEntry,
                                 he: *mut PLHashEntry);
    pub fn PL_HashTableDump(ht: *mut PLHashTable, dump: PLHashEnumerator,
                            fp: *mut FILE) -> PRIntn;
    pub fn SECITEM_AllocItem(arena: *mut PLArenaPool, item: *mut SECItem,
                             len: ::std::os::raw::c_uint) -> *mut SECItem;
    pub fn SECITEM_ReallocItem(arena: *mut PLArenaPool, item: *mut SECItem,
                               oldlen: ::std::os::raw::c_uint,
                               newlen: ::std::os::raw::c_uint) -> SECStatus;
    pub fn SECITEM_ReallocItemV2(arena: *mut PLArenaPool, item: *mut SECItem,
                                 newlen: ::std::os::raw::c_uint) -> SECStatus;
    pub fn SECITEM_CompareItem(a: *const SECItem, b: *const SECItem)
     -> SECComparison;
    pub fn SECITEM_ItemsAreEqual(a: *const SECItem, b: *const SECItem)
     -> PRBool;
    pub fn SECITEM_CopyItem(arena: *mut PLArenaPool, to: *mut SECItem,
                            from: *const SECItem) -> SECStatus;
    pub fn SECITEM_DupItem(from: *const SECItem) -> *mut SECItem;
    pub fn SECITEM_ArenaDupItem(arena: *mut PLArenaPool, from: *const SECItem)
     -> *mut SECItem;
    pub fn SECITEM_FreeItem(zap: *mut SECItem, freeit: PRBool);
    pub fn SECITEM_ZfreeItem(zap: *mut SECItem, freeit: PRBool);
    pub fn SECITEM_Hash(key: *const ::std::os::raw::c_void) -> PLHashNumber;
    pub fn SECITEM_HashCompare(k1: *const ::std::os::raw::c_void,
                               k2: *const ::std::os::raw::c_void) -> PRIntn;
    pub fn SECITEM_AllocArray(arena: *mut PLArenaPool,
                              array: *mut SECItemArray,
                              len: ::std::os::raw::c_uint)
     -> *mut SECItemArray;
    pub fn SECITEM_DupArray(arena: *mut PLArenaPool,
                            from: *const SECItemArray) -> *mut SECItemArray;
    pub fn SECITEM_FreeArray(array: *mut SECItemArray, freeit: PRBool);
    pub fn SECITEM_ZfreeArray(array: *mut SECItemArray, freeit: PRBool);
    pub fn NSS_Get_SECOID_AlgorithmIDTemplate(arg:
                                                  *mut ::std::os::raw::c_void,
                                              enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn SECOID_FindOID(oid: *const SECItem) -> *mut SECOidData;
    pub fn SECOID_FindOIDTag(oid: *const SECItem) -> SECOidTag;
    pub fn SECOID_FindOIDByTag(tagnum: SECOidTag) -> *mut SECOidData;
    pub fn SECOID_FindOIDByMechanism(mechanism: ::std::os::raw::c_ulong)
     -> *mut SECOidData;
    pub fn SECOID_SetAlgorithmID(arena: *mut PLArenaPool,
                                 aid: *mut SECAlgorithmID, tag: SECOidTag,
                                 params: *mut SECItem) -> SECStatus;
    pub fn SECOID_CopyAlgorithmID(arena: *mut PLArenaPool,
                                  dest: *mut SECAlgorithmID,
                                  src: *const SECAlgorithmID) -> SECStatus;
    pub fn SECOID_GetAlgorithmTag(aid: *const SECAlgorithmID) -> SECOidTag;
    pub fn SECOID_DestroyAlgorithmID(aid: *mut SECAlgorithmID,
                                     freeit: PRBool);
    pub fn SECOID_CompareAlgorithmID(a: *mut SECAlgorithmID,
                                     b: *mut SECAlgorithmID) -> SECComparison;
    pub fn SECOID_KnownCertExtenOID(extenOid: *mut SECItem) -> PRBool;
    pub fn SECOID_FindOIDTagDescription(tagnum: SECOidTag)
     -> *const ::std::os::raw::c_char;
    pub fn SECOID_AddEntry(src: *const SECOidData) -> SECOidTag;
    pub fn SECOID_Init() -> SECStatus;
    pub fn SECOID_Shutdown() -> SECStatus;
    pub fn SEC_StringToOID(pool: *mut PLArenaPool, to: *mut SECItem,
                           from: *const ::std::os::raw::c_char, len: PRUint32)
     -> SECStatus;
    pub fn UTIL_SetForkState(forked: PRBool);
    pub fn NSS_GetAlgorithmPolicy(tag: SECOidTag, pValue: *mut PRUint32)
     -> SECStatus;
    pub fn NSS_SetAlgorithmPolicy(tag: SECOidTag, setBits: PRUint32,
                                  clearBits: PRUint32) -> SECStatus;
    pub fn LL_MaxInt() -> PRInt64;
    pub fn LL_MinInt() -> PRInt64;
    pub fn LL_Zero() -> PRInt64;
    pub fn LL_MaxUint() -> PRUint64;
    pub fn PR_IntervalNow() -> PRIntervalTime;
    pub fn PR_TicksPerSecond() -> PRUint32;
    pub fn PR_SecondsToInterval(seconds: PRUint32) -> PRIntervalTime;
    pub fn PR_MillisecondsToInterval(milli: PRUint32) -> PRIntervalTime;
    pub fn PR_MicrosecondsToInterval(micro: PRUint32) -> PRIntervalTime;
    pub fn PR_IntervalToSeconds(ticks: PRIntervalTime) -> PRUint32;
    pub fn PR_IntervalToMilliseconds(ticks: PRIntervalTime) -> PRUint32;
    pub fn PR_IntervalToMicroseconds(ticks: PRIntervalTime) -> PRUint32;
    pub fn PR_NewMonitor() -> *mut PRMonitor;
    pub fn PR_DestroyMonitor(mon: *mut PRMonitor);
    pub fn PR_EnterMonitor(mon: *mut PRMonitor);
    pub fn PR_ExitMonitor(mon: *mut PRMonitor) -> PRStatus;
    pub fn PR_Wait(mon: *mut PRMonitor, ticks: PRIntervalTime) -> PRStatus;
    pub fn PR_Notify(mon: *mut PRMonitor) -> PRStatus;
    pub fn PR_NotifyAll(mon: *mut PRMonitor) -> PRStatus;
    pub fn PR_AssertCurrentThreadInMonitor(mon: *mut PRMonitor);
    pub fn PR_NewLock() -> *mut PRLock;
    pub fn PR_DestroyLock(lock: *mut PRLock);
    pub fn PR_Lock(lock: *mut PRLock);
    pub fn PR_Unlock(lock: *mut PRLock) -> PRStatus;
    pub fn PR_AssertCurrentThreadOwnsLock(lock: *mut PRLock);
    pub fn PR_NewCondVar(lock: *mut PRLock) -> *mut PRCondVar;
    pub fn PR_DestroyCondVar(cvar: *mut PRCondVar);
    pub fn PR_WaitCondVar(cvar: *mut PRCondVar, timeout: PRIntervalTime)
     -> PRStatus;
    pub fn PR_NotifyCondVar(cvar: *mut PRCondVar) -> PRStatus;
    pub fn PR_NotifyAllCondVar(cvar: *mut PRCondVar) -> PRStatus;
    pub fn SEC_ASN1DecoderStart(pool: *mut PLArenaPool,
                                dest: *mut ::std::os::raw::c_void,
                                t: *const SEC_ASN1Template)
     -> *mut SEC_ASN1DecoderContext;
    pub fn SEC_ASN1DecoderUpdate(cx: *mut SEC_ASN1DecoderContext,
                                 buf: *const ::std::os::raw::c_char,
                                 len: ::std::os::raw::c_ulong) -> SECStatus;
    pub fn SEC_ASN1DecoderFinish(cx: *mut SEC_ASN1DecoderContext)
     -> SECStatus;
    pub fn SEC_ASN1DecoderAbort(cx: *mut SEC_ASN1DecoderContext,
                                error: ::std::os::raw::c_int);
    pub fn SEC_ASN1DecoderSetFilterProc(cx: *mut SEC_ASN1DecoderContext,
                                        fn_: SEC_ASN1WriteProc,
                                        arg: *mut ::std::os::raw::c_void,
                                        no_store: PRBool);
    pub fn SEC_ASN1DecoderClearFilterProc(cx: *mut SEC_ASN1DecoderContext);
    pub fn SEC_ASN1DecoderSetNotifyProc(cx: *mut SEC_ASN1DecoderContext,
                                        fn_: SEC_ASN1NotifyProc,
                                        arg: *mut ::std::os::raw::c_void);
    pub fn SEC_ASN1DecoderClearNotifyProc(cx: *mut SEC_ASN1DecoderContext);
    pub fn SEC_ASN1Decode(pool: *mut PLArenaPool,
                          dest: *mut ::std::os::raw::c_void,
                          t: *const SEC_ASN1Template,
                          buf: *const ::std::os::raw::c_char,
                          len: ::std::os::raw::c_long) -> SECStatus;
    pub fn SEC_ASN1DecodeItem(pool: *mut PLArenaPool,
                              dest: *mut ::std::os::raw::c_void,
                              t: *const SEC_ASN1Template, src: *const SECItem)
     -> SECStatus;
    pub fn SEC_QuickDERDecodeItem(arena: *mut PLArenaPool,
                                  dest: *mut ::std::os::raw::c_void,
                                  templateEntry: *const SEC_ASN1Template,
                                  src: *const SECItem) -> SECStatus;
    pub fn SEC_ASN1EncoderStart(src: *const ::std::os::raw::c_void,
                                t: *const SEC_ASN1Template,
                                fn_: SEC_ASN1WriteProc,
                                output_arg: *mut ::std::os::raw::c_void)
     -> *mut SEC_ASN1EncoderContext;
    pub fn SEC_ASN1EncoderUpdate(cx: *mut SEC_ASN1EncoderContext,
                                 buf: *const ::std::os::raw::c_char,
                                 len: ::std::os::raw::c_ulong) -> SECStatus;
    pub fn SEC_ASN1EncoderFinish(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderAbort(cx: *mut SEC_ASN1EncoderContext,
                                error: ::std::os::raw::c_int);
    pub fn SEC_ASN1EncoderSetNotifyProc(cx: *mut SEC_ASN1EncoderContext,
                                        fn_: SEC_ASN1NotifyProc,
                                        arg: *mut ::std::os::raw::c_void);
    pub fn SEC_ASN1EncoderClearNotifyProc(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderSetStreaming(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderClearStreaming(cx: *mut SEC_ASN1EncoderContext);
    pub fn sec_ASN1EncoderSetDER(cx: *mut SEC_ASN1EncoderContext);
    pub fn sec_ASN1EncoderClearDER(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderSetTakeFromBuf(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1EncoderClearTakeFromBuf(cx: *mut SEC_ASN1EncoderContext);
    pub fn SEC_ASN1Encode(src: *const ::std::os::raw::c_void,
                          t: *const SEC_ASN1Template,
                          output_proc: SEC_ASN1WriteProc,
                          output_arg: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn SEC_ASN1EncodeItem(pool: *mut PLArenaPool, dest: *mut SECItem,
                              src: *const ::std::os::raw::c_void,
                              t: *const SEC_ASN1Template) -> *mut SECItem;
    pub fn SEC_ASN1EncodeInteger(pool: *mut PLArenaPool, dest: *mut SECItem,
                                 value: ::std::os::raw::c_long)
     -> *mut SECItem;
    pub fn SEC_ASN1EncodeUnsignedInteger(pool: *mut PLArenaPool,
                                         dest: *mut SECItem,
                                         value: ::std::os::raw::c_ulong)
     -> *mut SECItem;
    pub fn SEC_ASN1DecodeInteger(src: *mut SECItem,
                                 value: *mut ::std::os::raw::c_ulong)
     -> SECStatus;
    pub fn SEC_ASN1LengthLength(len: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn SEC_ASN1EncodeLength(buf: *mut ::std::os::raw::c_uchar,
                                value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn SEC_ASN1GetSubtemplate(inTemplate: *const SEC_ASN1Template,
                                  thing: *mut ::std::os::raw::c_void,
                                  encoding: PRBool)
     -> *const SEC_ASN1Template;
    pub fn SEC_ASN1IsTemplateSimple(theTemplate: *const SEC_ASN1Template)
     -> PRBool;
    pub fn NSS_Get_SEC_AnyTemplate(arg: *mut ::std::os::raw::c_void,
                                   enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_BMPStringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_BooleanTemplate(arg: *mut ::std::os::raw::c_void,
                                       enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_BitStringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_GeneralizedTimeTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_IA5StringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_IntegerTemplate(arg: *mut ::std::os::raw::c_void,
                                       enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_NullTemplate(arg: *mut ::std::os::raw::c_void,
                                    enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_ObjectIDTemplate(arg: *mut ::std::os::raw::c_void,
                                        enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_OctetStringTemplate(arg: *mut ::std::os::raw::c_void,
                                           enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_UTCTimeTemplate(arg: *mut ::std::os::raw::c_void,
                                       enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_UTF8StringTemplate(arg: *mut ::std::os::raw::c_void,
                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToAnyTemplate(arg: *mut ::std::os::raw::c_void,
                                            enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToOctetStringTemplate(arg:
                                                        *mut ::std::os::raw::c_void,
                                                    enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SetOfAnyTemplate(arg: *mut ::std::os::raw::c_void,
                                        enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_EnumeratedTemplate(arg: *mut ::std::os::raw::c_void,
                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToEnumeratedTemplate(arg:
                                                       *mut ::std::os::raw::c_void,
                                                   enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SequenceOfAnyTemplate(arg: *mut ::std::os::raw::c_void,
                                             enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SequenceOfObjectIDTemplate(arg:
                                                      *mut ::std::os::raw::c_void,
                                                  enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SkipTemplate(arg: *mut ::std::os::raw::c_void,
                                    enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_UniversalStringTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PrintableStringTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_T61StringTemplate(arg: *mut ::std::os::raw::c_void,
                                         enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_PointerToGeneralizedTimeTemplate(arg:
                                                            *mut ::std::os::raw::c_void,
                                                        enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_PointerToEncryptedPrivateKeyInfoTemplate(arg:
                                                                       *mut ::std::os::raw::c_void,
                                                                   enc:
                                                                       PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_EncryptedPrivateKeyInfoTemplate(arg:
                                                              *mut ::std::os::raw::c_void,
                                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_PrivateKeyInfoTemplate(arg:
                                                     *mut ::std::os::raw::c_void,
                                                 enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_PointerToPrivateKeyInfoTemplate(arg:
                                                              *mut ::std::os::raw::c_void,
                                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_DSAPublicKeyTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_RSAPublicKeyTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SECKEY_RSAPSSParamsTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn PR_Now() -> PRTime;
    pub fn PR_ExplodeTime(usecs: PRTime, params: PRTimeParamFn,
                          exploded: *mut PRExplodedTime);
    pub fn PR_ImplodeTime(exploded: *const PRExplodedTime) -> PRTime;
    pub fn PR_NormalizeTime(exploded: *mut PRExplodedTime,
                            params: PRTimeParamFn);
    pub fn PR_LocalTimeParameters(gmt: *const PRExplodedTime)
     -> PRTimeParameters;
    pub fn PR_GMTParameters(gmt: *const PRExplodedTime) -> PRTimeParameters;
    pub fn PR_USPacificTimeParameters(gmt: *const PRExplodedTime)
     -> PRTimeParameters;
    pub fn PR_ParseTimeStringToExplodedTime(string:
                                                *const ::std::os::raw::c_char,
                                            default_to_gmt: PRBool,
                                            result: *mut PRExplodedTime)
     -> PRStatus;
    pub fn PR_ParseTimeString(string: *const ::std::os::raw::c_char,
                              default_to_gmt: PRBool, result: *mut PRTime)
     -> PRStatus;
    pub fn PR_FormatTime(buf: *mut ::std::os::raw::c_char,
                         buflen: ::std::os::raw::c_int,
                         fmt: *const ::std::os::raw::c_char,
                         time: *const PRExplodedTime) -> PRUint32;
    pub fn PR_FormatTimeUSEnglish(buf: *mut ::std::os::raw::c_char,
                                  bufSize: PRUint32,
                                  format: *const ::std::os::raw::c_char,
                                  time: *const PRExplodedTime) -> PRUint32;
    pub fn readv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                 __count: ::std::os::raw::c_int) -> ssize_t;
    pub fn writev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int) -> ssize_t;
    pub fn preadv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int, __offset: __off_t)
     -> ssize_t;
    pub fn pwritev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                   __count: ::std::os::raw::c_int, __offset: __off_t)
     -> ssize_t;
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr)
     -> *mut cmsghdr;
    pub fn socket(__domain: ::std::os::raw::c_int,
                  __type: ::std::os::raw::c_int,
                  __protocol: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn socketpair(__domain: ::std::os::raw::c_int,
                      __type: ::std::os::raw::c_int,
                      __protocol: ::std::os::raw::c_int,
                      __fds: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn bind(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                __len: socklen_t) -> ::std::os::raw::c_int;
    pub fn getsockname(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn connect(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                   __len: socklen_t) -> ::std::os::raw::c_int;
    pub fn getpeername(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn send(__fd: ::std::os::raw::c_int,
                __buf: *const ::std::os::raw::c_void, __n: size_t,
                __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn recv(__fd: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_void, __n: size_t,
                __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn sendto(__fd: ::std::os::raw::c_int,
                  __buf: *const ::std::os::raw::c_void, __n: size_t,
                  __flags: ::std::os::raw::c_int, __addr: *const sockaddr,
                  __addr_len: socklen_t) -> ssize_t;
    pub fn recvfrom(__fd: ::std::os::raw::c_int,
                    __buf: *mut ::std::os::raw::c_void, __n: size_t,
                    __flags: ::std::os::raw::c_int, __addr: *mut sockaddr,
                    __addr_len: *mut socklen_t) -> ssize_t;
    pub fn sendmsg(__fd: ::std::os::raw::c_int, __message: *const msghdr,
                   __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn recvmsg(__fd: ::std::os::raw::c_int, __message: *mut msghdr,
                   __flags: ::std::os::raw::c_int) -> ssize_t;
    pub fn getsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *mut ::std::os::raw::c_void,
                      __optlen: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn setsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *const ::std::os::raw::c_void,
                      __optlen: socklen_t) -> ::std::os::raw::c_int;
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn accept(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                  __addr_len: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn shutdown(__fd: ::std::os::raw::c_int, __how: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isfdtype(__fd: ::std::os::raw::c_int,
                    __fdtype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ntohl(__netlong: uint32_t) -> uint32_t;
    pub fn ntohs(__netshort: uint16_t) -> uint16_t;
    pub fn htonl(__hostlong: uint32_t) -> uint32_t;
    pub fn htons(__hostshort: uint16_t) -> uint16_t;
    pub fn bindresvport(__sockfd: ::std::os::raw::c_int,
                        __sock_in: *mut sockaddr_in) -> ::std::os::raw::c_int;
    pub fn bindresvport6(__sockfd: ::std::os::raw::c_int,
                         __sock_in: *mut sockaddr_in6)
     -> ::std::os::raw::c_int;
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::os::raw::c_char;
    pub fn inet_pton(__af: ::std::os::raw::c_int,
                     __cp: *const ::std::os::raw::c_char,
                     __buf: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn inet_ntop(__af: ::std::os::raw::c_int,
                     __cp: *const ::std::os::raw::c_void,
                     __buf: *mut ::std::os::raw::c_char, __len: socklen_t)
     -> *const ::std::os::raw::c_char;
    pub fn inet_aton(__cp: *const ::std::os::raw::c_char, __inp: *mut in_addr)
     -> ::std::os::raw::c_int;
    pub fn inet_neta(__net: in_addr_t, __buf: *mut ::std::os::raw::c_char,
                     __len: size_t) -> *mut ::std::os::raw::c_char;
    pub fn inet_net_ntop(__af: ::std::os::raw::c_int,
                         __cp: *const ::std::os::raw::c_void,
                         __bits: ::std::os::raw::c_int,
                         __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn inet_net_pton(__af: ::std::os::raw::c_int,
                         __cp: *const ::std::os::raw::c_char,
                         __buf: *mut ::std::os::raw::c_void, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn inet_nsap_addr(__cp: *const ::std::os::raw::c_char,
                          __buf: *mut ::std::os::raw::c_uchar,
                          __len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_uint;
    pub fn inet_nsap_ntoa(__len: ::std::os::raw::c_int,
                          __cp: *const ::std::os::raw::c_uchar,
                          __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
    pub fn endrpcent();
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut rpcent;
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut rpcent;
    pub fn getrpcent() -> *mut rpcent;
    pub fn getrpcbyname_r(__name: *const ::std::os::raw::c_char,
                          __result_buf: *mut rpcent,
                          __buffer: *mut ::std::os::raw::c_char,
                          __buflen: size_t, __result: *mut *mut rpcent)
     -> ::std::os::raw::c_int;
    pub fn getrpcbynumber_r(__number: ::std::os::raw::c_int,
                            __result_buf: *mut rpcent,
                            __buffer: *mut ::std::os::raw::c_char,
                            __buflen: size_t, __result: *mut *mut rpcent)
     -> ::std::os::raw::c_int;
    pub fn getrpcent_r(__result_buf: *mut rpcent,
                       __buffer: *mut ::std::os::raw::c_char,
                       __buflen: size_t, __result: *mut *mut rpcent)
     -> ::std::os::raw::c_int;
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
    pub fn herror(__str: *const ::std::os::raw::c_char);
    pub fn hstrerror(__err_num: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
    pub fn endhostent();
    pub fn gethostent() -> *mut hostent;
    pub fn gethostbyaddr(__addr: *const ::std::os::raw::c_void,
                         __len: __socklen_t, __type: ::std::os::raw::c_int)
     -> *mut hostent;
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char)
     -> *mut hostent;
    pub fn gethostbyname2(__name: *const ::std::os::raw::c_char,
                          __af: ::std::os::raw::c_int) -> *mut hostent;
    pub fn gethostent_r(__result_buf: *mut hostent,
                        __buf: *mut ::std::os::raw::c_char, __buflen: size_t,
                        __result: *mut *mut hostent,
                        __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn gethostbyaddr_r(__addr: *const ::std::os::raw::c_void,
                           __len: __socklen_t, __type: ::std::os::raw::c_int,
                           __result_buf: *mut hostent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: size_t, __result: *mut *mut hostent,
                           __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn gethostbyname_r(__name: *const ::std::os::raw::c_char,
                           __result_buf: *mut hostent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: size_t, __result: *mut *mut hostent,
                           __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn gethostbyname2_r(__name: *const ::std::os::raw::c_char,
                            __af: ::std::os::raw::c_int,
                            __result_buf: *mut hostent,
                            __buf: *mut ::std::os::raw::c_char,
                            __buflen: size_t, __result: *mut *mut hostent,
                            __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
    pub fn endnetent();
    pub fn getnetent() -> *mut netent;
    pub fn getnetbyaddr(__net: uint32_t, __type: ::std::os::raw::c_int)
     -> *mut netent;
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut netent;
    pub fn getnetent_r(__result_buf: *mut netent,
                       __buf: *mut ::std::os::raw::c_char, __buflen: size_t,
                       __result: *mut *mut netent,
                       __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getnetbyaddr_r(__net: uint32_t, __type: ::std::os::raw::c_int,
                          __result_buf: *mut netent,
                          __buf: *mut ::std::os::raw::c_char,
                          __buflen: size_t, __result: *mut *mut netent,
                          __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getnetbyname_r(__name: *const ::std::os::raw::c_char,
                          __result_buf: *mut netent,
                          __buf: *mut ::std::os::raw::c_char,
                          __buflen: size_t, __result: *mut *mut netent,
                          __h_errnop: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
    pub fn endservent();
    pub fn getservent() -> *mut servent;
    pub fn getservbyname(__name: *const ::std::os::raw::c_char,
                         __proto: *const ::std::os::raw::c_char)
     -> *mut servent;
    pub fn getservbyport(__port: ::std::os::raw::c_int,
                         __proto: *const ::std::os::raw::c_char)
     -> *mut servent;
    pub fn getservent_r(__result_buf: *mut servent,
                        __buf: *mut ::std::os::raw::c_char, __buflen: size_t,
                        __result: *mut *mut servent) -> ::std::os::raw::c_int;
    pub fn getservbyname_r(__name: *const ::std::os::raw::c_char,
                           __proto: *const ::std::os::raw::c_char,
                           __result_buf: *mut servent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: size_t, __result: *mut *mut servent)
     -> ::std::os::raw::c_int;
    pub fn getservbyport_r(__port: ::std::os::raw::c_int,
                           __proto: *const ::std::os::raw::c_char,
                           __result_buf: *mut servent,
                           __buf: *mut ::std::os::raw::c_char,
                           __buflen: size_t, __result: *mut *mut servent)
     -> ::std::os::raw::c_int;
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
    pub fn endprotoent();
    pub fn getprotoent() -> *mut protoent;
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char)
     -> *mut protoent;
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut protoent;
    pub fn getprotoent_r(__result_buf: *mut protoent,
                         __buf: *mut ::std::os::raw::c_char, __buflen: size_t,
                         __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
    pub fn getprotobyname_r(__name: *const ::std::os::raw::c_char,
                            __result_buf: *mut protoent,
                            __buf: *mut ::std::os::raw::c_char,
                            __buflen: size_t, __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
    pub fn getprotobynumber_r(__proto: ::std::os::raw::c_int,
                              __result_buf: *mut protoent,
                              __buf: *mut ::std::os::raw::c_char,
                              __buflen: size_t, __result: *mut *mut protoent)
     -> ::std::os::raw::c_int;
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn endnetgrent();
    pub fn getnetgrent(__hostp: *mut *mut ::std::os::raw::c_char,
                       __userp: *mut *mut ::std::os::raw::c_char,
                       __domainp: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn innetgr(__netgroup: *const ::std::os::raw::c_char,
                   __host: *const ::std::os::raw::c_char,
                   __user: *const ::std::os::raw::c_char,
                   __domain: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getnetgrent_r(__hostp: *mut *mut ::std::os::raw::c_char,
                         __userp: *mut *mut ::std::os::raw::c_char,
                         __domainp: *mut *mut ::std::os::raw::c_char,
                         __buffer: *mut ::std::os::raw::c_char,
                         __buflen: size_t) -> ::std::os::raw::c_int;
    pub fn rcmd(__ahost: *mut *mut ::std::os::raw::c_char,
                __rport: ::std::os::raw::c_ushort,
                __locuser: *const ::std::os::raw::c_char,
                __remuser: *const ::std::os::raw::c_char,
                __cmd: *const ::std::os::raw::c_char,
                __fd2p: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn rcmd_af(__ahost: *mut *mut ::std::os::raw::c_char,
                   __rport: ::std::os::raw::c_ushort,
                   __locuser: *const ::std::os::raw::c_char,
                   __remuser: *const ::std::os::raw::c_char,
                   __cmd: *const ::std::os::raw::c_char,
                   __fd2p: *mut ::std::os::raw::c_int, __af: sa_family_t)
     -> ::std::os::raw::c_int;
    pub fn rexec(__ahost: *mut *mut ::std::os::raw::c_char,
                 __rport: ::std::os::raw::c_int,
                 __name: *const ::std::os::raw::c_char,
                 __pass: *const ::std::os::raw::c_char,
                 __cmd: *const ::std::os::raw::c_char,
                 __fd2p: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn rexec_af(__ahost: *mut *mut ::std::os::raw::c_char,
                    __rport: ::std::os::raw::c_int,
                    __name: *const ::std::os::raw::c_char,
                    __pass: *const ::std::os::raw::c_char,
                    __cmd: *const ::std::os::raw::c_char,
                    __fd2p: *mut ::std::os::raw::c_int, __af: sa_family_t)
     -> ::std::os::raw::c_int;
    pub fn ruserok(__rhost: *const ::std::os::raw::c_char,
                   __suser: ::std::os::raw::c_int,
                   __remuser: *const ::std::os::raw::c_char,
                   __locuser: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn ruserok_af(__rhost: *const ::std::os::raw::c_char,
                      __suser: ::std::os::raw::c_int,
                      __remuser: *const ::std::os::raw::c_char,
                      __locuser: *const ::std::os::raw::c_char,
                      __af: sa_family_t) -> ::std::os::raw::c_int;
    pub fn iruserok(__raddr: uint32_t, __suser: ::std::os::raw::c_int,
                    __remuser: *const ::std::os::raw::c_char,
                    __locuser: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn iruserok_af(__raddr: *const ::std::os::raw::c_void,
                       __suser: ::std::os::raw::c_int,
                       __remuser: *const ::std::os::raw::c_char,
                       __locuser: *const ::std::os::raw::c_char,
                       __af: sa_family_t) -> ::std::os::raw::c_int;
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rresvport_af(__alport: *mut ::std::os::raw::c_int,
                        __af: sa_family_t) -> ::std::os::raw::c_int;
    pub fn getaddrinfo(__name: *const ::std::os::raw::c_char,
                       __service: *const ::std::os::raw::c_char,
                       __req: *const addrinfo, __pai: *mut *mut addrinfo)
     -> ::std::os::raw::c_int;
    pub fn freeaddrinfo(__ai: *mut addrinfo);
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn getnameinfo(__sa: *const sockaddr, __salen: socklen_t,
                       __host: *mut ::std::os::raw::c_char,
                       __hostlen: socklen_t,
                       __serv: *mut ::std::os::raw::c_char,
                       __servlen: socklen_t, __flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn PR_GetDescType(file: *mut PRFileDesc) -> PRDescType;
    pub fn PR_GetSpecialFD(id: PRSpecialFD) -> *mut PRFileDesc;
    pub fn PR_GetUniqueIdentity(layer_name: *const ::std::os::raw::c_char)
     -> PRDescIdentity;
    pub fn PR_GetNameForIdentity(ident: PRDescIdentity)
     -> *const ::std::os::raw::c_char;
    pub fn PR_GetLayersIdentity(fd: *mut PRFileDesc) -> PRDescIdentity;
    pub fn PR_GetIdentitiesLayer(fd_stack: *mut PRFileDesc,
                                 id: PRDescIdentity) -> *mut PRFileDesc;
    pub fn PR_GetDefaultIOMethods() -> *const PRIOMethods;
    pub fn PR_CreateIOLayerStub(ident: PRDescIdentity,
                                methods: *const PRIOMethods)
     -> *mut PRFileDesc;
    pub fn PR_CreateIOLayer(fd: *mut PRFileDesc) -> *mut PRFileDesc;
    pub fn PR_PushIOLayer(fd_stack: *mut PRFileDesc, id: PRDescIdentity,
                          layer: *mut PRFileDesc) -> PRStatus;
    pub fn PR_PopIOLayer(fd_stack: *mut PRFileDesc, id: PRDescIdentity)
     -> *mut PRFileDesc;
    pub fn PR_Open(name: *const ::std::os::raw::c_char, flags: PRIntn,
                   mode: PRIntn) -> *mut PRFileDesc;
    pub fn PR_OpenFile(name: *const ::std::os::raw::c_char, flags: PRIntn,
                       mode: PRIntn) -> *mut PRFileDesc;
    pub fn PR_Close(fd: *mut PRFileDesc) -> PRStatus;
    pub fn PR_Read(fd: *mut PRFileDesc, buf: *mut ::std::os::raw::c_void,
                   amount: PRInt32) -> PRInt32;
    pub fn PR_Write(fd: *mut PRFileDesc, buf: *const ::std::os::raw::c_void,
                    amount: PRInt32) -> PRInt32;
    pub fn PR_Writev(fd: *mut PRFileDesc, iov: *const PRIOVec,
                     iov_size: PRInt32, timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_Delete(name: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_GetFileInfo(fn_: *const ::std::os::raw::c_char,
                          info: *mut PRFileInfo) -> PRStatus;
    pub fn PR_GetFileInfo64(fn_: *const ::std::os::raw::c_char,
                            info: *mut PRFileInfo64) -> PRStatus;
    pub fn PR_GetOpenFileInfo(fd: *mut PRFileDesc, info: *mut PRFileInfo)
     -> PRStatus;
    pub fn PR_GetOpenFileInfo64(fd: *mut PRFileDesc, info: *mut PRFileInfo64)
     -> PRStatus;
    pub fn PR_Rename(from: *const ::std::os::raw::c_char,
                     to: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_Access(name: *const ::std::os::raw::c_char, how: PRAccessHow)
     -> PRStatus;
    pub fn PR_Seek(fd: *mut PRFileDesc, offset: PROffset32,
                   whence: PRSeekWhence) -> PROffset32;
    pub fn PR_Seek64(fd: *mut PRFileDesc, offset: PROffset64,
                     whence: PRSeekWhence) -> PROffset64;
    pub fn PR_Available(fd: *mut PRFileDesc) -> PRInt32;
    pub fn PR_Available64(fd: *mut PRFileDesc) -> PRInt64;
    pub fn PR_Sync(fd: *mut PRFileDesc) -> PRStatus;
    pub fn PR_OpenDir(name: *const ::std::os::raw::c_char) -> *mut PRDir;
    pub fn PR_ReadDir(dir: *mut PRDir, flags: PRDirFlags) -> *mut PRDirEntry;
    pub fn PR_CloseDir(dir: *mut PRDir) -> PRStatus;
    pub fn PR_MkDir(name: *const ::std::os::raw::c_char, mode: PRIntn)
     -> PRStatus;
    pub fn PR_MakeDir(name: *const ::std::os::raw::c_char, mode: PRIntn)
     -> PRStatus;
    pub fn PR_RmDir(name: *const ::std::os::raw::c_char) -> PRStatus;
    pub fn PR_NewUDPSocket() -> *mut PRFileDesc;
    pub fn PR_NewTCPSocket() -> *mut PRFileDesc;
    pub fn PR_OpenUDPSocket(af: PRIntn) -> *mut PRFileDesc;
    pub fn PR_OpenTCPSocket(af: PRIntn) -> *mut PRFileDesc;
    pub fn PR_Connect(fd: *mut PRFileDesc, addr: *const PRNetAddr,
                      timeout: PRIntervalTime) -> PRStatus;
    pub fn PR_ConnectContinue(fd: *mut PRFileDesc, out_flags: PRInt16)
     -> PRStatus;
    pub fn PR_GetConnectStatus(pd: *const PRPollDesc) -> PRStatus;
    pub fn PR_Accept(fd: *mut PRFileDesc, addr: *mut PRNetAddr,
                     timeout: PRIntervalTime) -> *mut PRFileDesc;
    pub fn PR_Bind(fd: *mut PRFileDesc, addr: *const PRNetAddr) -> PRStatus;
    pub fn PR_Listen(fd: *mut PRFileDesc, backlog: PRIntn) -> PRStatus;
    pub fn PR_Shutdown(fd: *mut PRFileDesc, how: PRShutdownHow) -> PRStatus;
    pub fn PR_Recv(fd: *mut PRFileDesc, buf: *mut ::std::os::raw::c_void,
                   amount: PRInt32, flags: PRIntn, timeout: PRIntervalTime)
     -> PRInt32;
    pub fn PR_Send(fd: *mut PRFileDesc, buf: *const ::std::os::raw::c_void,
                   amount: PRInt32, flags: PRIntn, timeout: PRIntervalTime)
     -> PRInt32;
    pub fn PR_RecvFrom(fd: *mut PRFileDesc, buf: *mut ::std::os::raw::c_void,
                       amount: PRInt32, flags: PRIntn, addr: *mut PRNetAddr,
                       timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_SendTo(fd: *mut PRFileDesc, buf: *const ::std::os::raw::c_void,
                     amount: PRInt32, flags: PRIntn, addr: *const PRNetAddr,
                     timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_TransmitFile(networkSocket: *mut PRFileDesc,
                           sourceFile: *mut PRFileDesc,
                           headers: *const ::std::os::raw::c_void,
                           hlen: PRInt32, flags: PRTransmitFileFlags,
                           timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_SendFile(networkSocket: *mut PRFileDesc,
                       sendData: *mut PRSendFileData,
                       flags: PRTransmitFileFlags, timeout: PRIntervalTime)
     -> PRInt32;
    pub fn PR_AcceptRead(listenSock: *mut PRFileDesc,
                         acceptedSock: *mut *mut PRFileDesc,
                         peerAddr: *mut *mut PRNetAddr,
                         buf: *mut ::std::os::raw::c_void, amount: PRInt32,
                         timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_NewTCPSocketPair(fds: *mut *mut PRFileDesc) -> PRStatus;
    pub fn PR_GetSockName(fd: *mut PRFileDesc, addr: *mut PRNetAddr)
     -> PRStatus;
    pub fn PR_GetPeerName(fd: *mut PRFileDesc, addr: *mut PRNetAddr)
     -> PRStatus;
    pub fn PR_GetSocketOption(fd: *mut PRFileDesc,
                              data: *mut PRSocketOptionData) -> PRStatus;
    pub fn PR_SetSocketOption(fd: *mut PRFileDesc,
                              data: *const PRSocketOptionData) -> PRStatus;
    pub fn PR_SetFDInheritable(fd: *mut PRFileDesc, inheritable: PRBool)
     -> PRStatus;
    pub fn PR_GetInheritedFD(name: *const ::std::os::raw::c_char)
     -> *mut PRFileDesc;
    pub fn PR_CreateFileMap(fd: *mut PRFileDesc, size: PRInt64,
                            prot: PRFileMapProtect) -> *mut PRFileMap;
    pub fn PR_GetMemMapAlignment() -> PRInt32;
    pub fn PR_MemMap(fmap: *mut PRFileMap, offset: PROffset64, len: PRUint32)
     -> *mut ::std::os::raw::c_void;
    pub fn PR_MemUnmap(addr: *mut ::std::os::raw::c_void, len: PRUint32)
     -> PRStatus;
    pub fn PR_CloseFileMap(fmap: *mut PRFileMap) -> PRStatus;
    pub fn PR_SyncMemMap(fd: *mut PRFileDesc,
                         addr: *mut ::std::os::raw::c_void, len: PRUint32)
     -> PRStatus;
    pub fn PR_CreatePipe(readPipe: *mut *mut PRFileDesc,
                         writePipe: *mut *mut PRFileDesc) -> PRStatus;
    pub fn PR_Poll(pds: *mut PRPollDesc, npds: PRIntn,
                   timeout: PRIntervalTime) -> PRInt32;
    pub fn PR_NewPollableEvent() -> *mut PRFileDesc;
    pub fn PR_DestroyPollableEvent(event: *mut PRFileDesc) -> PRStatus;
    pub fn PR_SetPollableEvent(event: *mut PRFileDesc) -> PRStatus;
    pub fn PR_WaitForPollableEvent(event: *mut PRFileDesc) -> PRStatus;
    pub fn NSS_Get_CERT_CertificateRequestTemplate(arg:
                                                       *mut ::std::os::raw::c_void,
                                                   enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_CERT_CertificateTemplate(arg: *mut ::std::os::raw::c_void,
                                            enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_CERT_CrlTemplate(arg: *mut ::std::os::raw::c_void,
                                    enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_CERT_IssuerAndSNTemplate(arg: *mut ::std::os::raw::c_void,
                                            enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_CERT_NameTemplate(arg: *mut ::std::os::raw::c_void,
                                     enc: PRBool) -> *const SEC_ASN1Template;
    pub fn NSS_Get_CERT_SequenceOfCertExtensionTemplate(arg:
                                                            *mut ::std::os::raw::c_void,
                                                        enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_CERT_SetOfSignedCrlTemplate(arg:
                                                   *mut ::std::os::raw::c_void,
                                               enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_CERT_SignedDataTemplate(arg: *mut ::std::os::raw::c_void,
                                           enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_CERT_SubjectPublicKeyInfoTemplate(arg:
                                                         *mut ::std::os::raw::c_void,
                                                     enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_SEC_SignedCertificateTemplate(arg:
                                                     *mut ::std::os::raw::c_void,
                                                 enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_CERT_SignedCrlTemplate(arg: *mut ::std::os::raw::c_void,
                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn NSS_Get_CERT_TimeChoiceTemplate(arg: *mut ::std::os::raw::c_void,
                                           enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn CERT_AsciiToName(string: *const ::std::os::raw::c_char)
     -> *mut CERTName;
    pub fn CERT_NameToAscii(name: *mut CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_NameToAsciiInvertible(name: *mut CERTName,
                                      strict: CertStrictnessLevel)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_CopyAVA(arena: *mut PLArenaPool, src: *mut CERTAVA)
     -> *mut CERTAVA;
    pub fn CERT_GetOidString(oid: *const SECItem)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetAVATag(ava: *mut CERTAVA) -> SECOidTag;
    pub fn CERT_CompareAVA(a: *const CERTAVA, b: *const CERTAVA)
     -> SECComparison;
    pub fn CERT_CreateRDN(arena: *mut PLArenaPool, avas: *mut CERTAVA, ...)
     -> *mut CERTRDN;
    pub fn CERT_CopyRDN(arena: *mut PLArenaPool, dest: *mut CERTRDN,
                        src: *mut CERTRDN) -> SECStatus;
    pub fn CERT_AddAVA(arena: *mut PLArenaPool, rdn: *mut CERTRDN,
                       ava: *mut CERTAVA) -> SECStatus;
    pub fn CERT_CompareRDN(a: *const CERTRDN, b: *const CERTRDN)
     -> SECComparison;
    pub fn CERT_CreateName(rdn: *mut CERTRDN, ...) -> *mut CERTName;
    pub fn CERT_CopyName(arena: *mut PLArenaPool, dest: *mut CERTName,
                         src: *const CERTName) -> SECStatus;
    pub fn CERT_DestroyName(name: *mut CERTName);
    pub fn CERT_AddRDN(name: *mut CERTName, rdn: *mut CERTRDN) -> SECStatus;
    pub fn CERT_CompareName(a: *const CERTName, b: *const CERTName)
     -> SECComparison;
    pub fn CERT_FormatName(name: *mut CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_Hexify(i: *mut SECItem, do_colon: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_RFC1485_EscapeAndQuote(dst: *mut ::std::os::raw::c_char,
                                       dstlen: ::std::os::raw::c_int,
                                       src: *mut ::std::os::raw::c_char,
                                       srclen: ::std::os::raw::c_int)
     -> SECStatus;
    pub fn CERT_CreateValidity(notBefore: PRTime, notAfter: PRTime)
     -> *mut CERTValidity;
    pub fn CERT_DestroyValidity(v: *mut CERTValidity);
    pub fn CERT_CopyValidity(arena: *mut PLArenaPool, dest: *mut CERTValidity,
                             src: *mut CERTValidity) -> SECStatus;
    pub fn CERT_GetSlopTime() -> PRInt32;
    pub fn CERT_SetSlopTime(slop: PRInt32) -> SECStatus;
    pub fn CERT_CreateCertificate(serialNumber: ::std::os::raw::c_ulong,
                                  issuer: *mut CERTName,
                                  validity: *mut CERTValidity,
                                  req: *mut CERTCertificateRequest)
     -> *mut CERTCertificate;
    pub fn CERT_DestroyCertificate(cert: *mut CERTCertificate);
    pub fn CERT_DupCertificate(c: *mut CERTCertificate)
     -> *mut CERTCertificate;
    pub fn CERT_CreateCertificateRequest(name: *mut CERTName,
                                         spki: *mut CERTSubjectPublicKeyInfo,
                                         attributes: *mut *mut SECItem)
     -> *mut CERTCertificateRequest;
    pub fn CERT_DestroyCertificateRequest(r: *mut CERTCertificateRequest);
    pub fn CERT_StartCertificateRequestAttributes(req:
                                                      *mut CERTCertificateRequest)
     -> *mut ::std::os::raw::c_void;
    pub fn CERT_FinishCertificateRequestAttributes(req:
                                                       *mut CERTCertificateRequest)
     -> SECStatus;
    pub fn CERT_GetCertificateRequestExtensions(req:
                                                    *mut CERTCertificateRequest,
                                                exts:
                                                    *mut *mut *mut CERTCertExtension)
     -> SECStatus;
    pub fn CERT_ExtractPublicKey(cert: *mut CERTCertificate)
     -> *mut SECKEYPublicKey;
    pub fn CERT_GetCertKeyType(spki: *const CERTSubjectPublicKeyInfo)
     -> KeyType;
    pub fn CERT_InitCertDB(handle: *mut CERTCertDBHandle) -> SECStatus;
    pub fn CERT_GetDBContentVersion(handle: *mut CERTCertDBHandle)
     -> ::std::os::raw::c_int;
    pub fn CERT_SetDefaultCertDB(handle: *mut CERTCertDBHandle);
    pub fn CERT_GetDefaultCertDB() -> *mut CERTCertDBHandle;
    pub fn CERT_GetCertChainFromCert(cert: *mut CERTCertificate, time: PRTime,
                                     usage: SECCertUsage)
     -> *mut CERTCertList;
    pub fn CERT_NewTempCertificate(handle: *mut CERTCertDBHandle,
                                   derCert: *mut SECItem,
                                   nickname: *mut ::std::os::raw::c_char,
                                   isperm: PRBool, copyDER: PRBool)
     -> *mut CERTCertificate;
    pub fn CERT_CreateAVA(arena: *mut PLArenaPool, kind: SECOidTag,
                          valueType: ::std::os::raw::c_int,
                          value: *mut ::std::os::raw::c_char) -> *mut CERTAVA;
    pub fn CERT_NameFromDERCert(derCert: *mut SECItem, derName: *mut SECItem)
     -> SECStatus;
    pub fn CERT_IssuerNameFromDERCert(derCert: *mut SECItem,
                                      derName: *mut SECItem) -> SECStatus;
    pub fn CERT_EncodeGeneralName(genName: *mut CERTGeneralName,
                                  dest: *mut SECItem, arena: *mut PLArenaPool)
     -> *mut SECItem;
    pub fn CERT_DecodeGeneralName(reqArena: *mut PLArenaPool,
                                  encodedName: *mut SECItem,
                                  genName: *mut CERTGeneralName)
     -> *mut CERTGeneralName;
    pub fn CERT_KeyFromDERCert(reqArena: *mut PLArenaPool,
                               derCert: *mut SECItem, key: *mut SECItem)
     -> SECStatus;
    pub fn CERT_KeyFromIssuerAndSN(arena: *mut PLArenaPool,
                                   issuer: *mut SECItem, sn: *mut SECItem,
                                   key: *mut SECItem) -> SECStatus;
    pub fn CERT_SerialNumberFromDERCert(derCert: *mut SECItem,
                                        derName: *mut SECItem) -> SECStatus;
    pub fn CERT_KeyFromDERCrl(arena: *mut PLArenaPool, derCrl: *mut SECItem,
                              key: *mut SECItem) -> SECStatus;
    pub fn CERT_OpenCertDB(handle: *mut CERTCertDBHandle, readOnly: PRBool,
                           namecb: CERTDBNameFunc,
                           cbarg: *mut ::std::os::raw::c_void) -> SECStatus;
    pub fn CERT_OpenCertDBFilename(handle: *mut CERTCertDBHandle,
                                   certdbname: *mut ::std::os::raw::c_char,
                                   readOnly: PRBool) -> SECStatus;
    pub fn CERT_OpenVolatileCertDB(handle: *mut CERTCertDBHandle)
     -> SECStatus;
    pub fn CERT_GetValidDNSPatternsFromCert(cert: *mut CERTCertificate)
     -> *mut CERTCertNicknames;
    pub fn CERT_VerifyCertName(cert: *const CERTCertificate,
                               hostname: *const ::std::os::raw::c_char)
     -> SECStatus;
    pub fn CERT_AddOKDomainName(cert: *mut CERTCertificate,
                                hostname: *const ::std::os::raw::c_char)
     -> SECStatus;
    pub fn CERT_DecodeDERCertificate(derSignedCert: *mut SECItem,
                                     copyDER: PRBool,
                                     nickname: *mut ::std::os::raw::c_char)
     -> *mut CERTCertificate;
    pub fn CERT_DecodeDERCrl(arena: *mut PLArenaPool,
                             derSignedCrl: *mut SECItem,
                             type_: ::std::os::raw::c_int)
     -> *mut CERTSignedCrl;
    pub fn CERT_DecodeDERCrlWithFlags(narena: *mut PLArenaPool,
                                      derSignedCrl: *mut SECItem,
                                      type_: ::std::os::raw::c_int,
                                      options: PRInt32) -> *mut CERTSignedCrl;
    pub fn CERT_CompleteCRLDecodeEntries(crl: *mut CERTSignedCrl)
     -> SECStatus;
    pub fn CERT_ImportCRL(handle: *mut CERTCertDBHandle, derCRL: *mut SECItem,
                          url: *mut ::std::os::raw::c_char,
                          type_: ::std::os::raw::c_int,
                          wincx: *mut ::std::os::raw::c_void)
     -> *mut CERTSignedCrl;
    pub fn CERT_DestroyCrl(crl: *mut CERTSignedCrl);
    pub fn CERT_CRLCacheRefreshIssuer(dbhandle: *mut CERTCertDBHandle,
                                      crlKey: *mut SECItem);
    pub fn CERT_CacheCRL(dbhandle: *mut CERTCertDBHandle,
                         newcrl: *mut SECItem) -> SECStatus;
    pub fn CERT_UncacheCRL(dbhandle: *mut CERTCertDBHandle,
                           oldcrl: *mut SECItem) -> SECStatus;
    pub fn CERT_FindCertByKey(handle: *mut CERTCertDBHandle,
                              key: *mut SECItem) -> *mut CERTCertificate;
    pub fn CERT_FindCertByName(handle: *mut CERTCertDBHandle,
                               name: *mut SECItem) -> *mut CERTCertificate;
    pub fn CERT_FindCertByNameString(handle: *mut CERTCertDBHandle,
                                     name: *mut ::std::os::raw::c_char)
     -> *mut CERTCertificate;
    pub fn CERT_FindCertByKeyID(handle: *mut CERTCertDBHandle,
                                name: *mut SECItem, keyID: *mut SECItem)
     -> *mut CERTCertificate;
    pub fn CERT_FindCertByIssuerAndSN(handle: *mut CERTCertDBHandle,
                                      issuerAndSN: *mut CERTIssuerAndSN)
     -> *mut CERTCertificate;
    pub fn CERT_FindCertBySubjectKeyID(handle: *mut CERTCertDBHandle,
                                       subjKeyID: *mut SECItem)
     -> *mut CERTCertificate;
    pub fn CERT_EncodeSubjectKeyID(arena: *mut PLArenaPool,
                                   srcString: *const SECItem,
                                   encodedValue: *mut SECItem) -> SECStatus;
    pub fn CERT_FindCertByNickname(handle: *mut CERTCertDBHandle,
                                   nickname: *const ::std::os::raw::c_char)
     -> *mut CERTCertificate;
    pub fn CERT_FindCertByDERCert(handle: *mut CERTCertDBHandle,
                                  derCert: *mut SECItem)
     -> *mut CERTCertificate;
    pub fn CERT_FindCertByEmailAddr(handle: *mut CERTCertDBHandle,
                                    emailAddr: *mut ::std::os::raw::c_char)
     -> *mut CERTCertificate;
    pub fn CERT_FindCertByNicknameOrEmailAddr(handle: *mut CERTCertDBHandle,
                                              name:
                                                  *const ::std::os::raw::c_char)
     -> *mut CERTCertificate;
    pub fn CERT_FindCertByNicknameOrEmailAddrForUsage(handle:
                                                          *mut CERTCertDBHandle,
                                                      name:
                                                          *const ::std::os::raw::c_char,
                                                      lookingForUsage:
                                                          SECCertUsage)
     -> *mut CERTCertificate;
    pub fn CERT_FindCertBySPKDigest(handle: *mut CERTCertDBHandle,
                                    spkDigest: *mut SECItem)
     -> *mut CERTCertificate;
    pub fn CERT_FindCertIssuer(cert: *mut CERTCertificate, validTime: PRTime,
                               usage: SECCertUsage) -> *mut CERTCertificate;
    pub fn CERT_CheckCertValidTimes(cert: *const CERTCertificate, t: PRTime,
                                    allowOverride: PRBool)
     -> SECCertTimeValidity;
    pub fn CERT_CertTimesValid(cert: *mut CERTCertificate) -> SECStatus;
    pub fn CERT_GetCertTimes(c: *const CERTCertificate,
                             notBefore: *mut PRTime, notAfter: *mut PRTime)
     -> SECStatus;
    pub fn CERT_GetCertIssuerAndSN(arg1: *mut PLArenaPool,
                                   arg2: *mut CERTCertificate)
     -> *mut CERTIssuerAndSN;
    pub fn CERT_VerifySignedData(sd: *mut CERTSignedData,
                                 cert: *mut CERTCertificate, t: PRTime,
                                 wincx: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_VerifySignedDataWithPublicKeyInfo(sd: *mut CERTSignedData,
                                                  pubKeyInfo:
                                                      *mut CERTSubjectPublicKeyInfo,
                                                  wincx:
                                                      *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_VerifySignedDataWithPublicKey(sd: *const CERTSignedData,
                                              pubKey: *mut SECKEYPublicKey,
                                              wincx:
                                                  *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_VerifyCertificate(handle: *mut CERTCertDBHandle,
                                  cert: *mut CERTCertificate,
                                  checkSig: PRBool,
                                  requiredUsages: SECCertificateUsage,
                                  t: PRTime,
                                  wincx: *mut ::std::os::raw::c_void,
                                  log: *mut CERTVerifyLog,
                                  returnedUsages: *mut SECCertificateUsage)
     -> SECStatus;
    pub fn CERT_VerifyCertificateNow(handle: *mut CERTCertDBHandle,
                                     cert: *mut CERTCertificate,
                                     checkSig: PRBool,
                                     requiredUsages: SECCertificateUsage,
                                     wincx: *mut ::std::os::raw::c_void,
                                     returnedUsages: *mut SECCertificateUsage)
     -> SECStatus;
    pub fn CERT_VerifyCACertForUsage(handle: *mut CERTCertDBHandle,
                                     cert: *mut CERTCertificate,
                                     checkSig: PRBool,
                                     certUsage: SECCertUsage, t: PRTime,
                                     wincx: *mut ::std::os::raw::c_void,
                                     log: *mut CERTVerifyLog) -> SECStatus;
    pub fn CERT_VerifyCert(handle: *mut CERTCertDBHandle,
                           cert: *mut CERTCertificate, checkSig: PRBool,
                           certUsage: SECCertUsage, t: PRTime,
                           wincx: *mut ::std::os::raw::c_void,
                           log: *mut CERTVerifyLog) -> SECStatus;
    pub fn CERT_VerifyCertNow(handle: *mut CERTCertDBHandle,
                              cert: *mut CERTCertificate, checkSig: PRBool,
                              certUsage: SECCertUsage,
                              wincx: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_VerifyCertChain(handle: *mut CERTCertDBHandle,
                                cert: *mut CERTCertificate, checkSig: PRBool,
                                certUsage: SECCertUsage, t: PRTime,
                                wincx: *mut ::std::os::raw::c_void,
                                log: *mut CERTVerifyLog) -> SECStatus;
    pub fn CERT_ConvertAndDecodeCertificate(certstr:
                                                *mut ::std::os::raw::c_char)
     -> *mut CERTCertificate;
    pub fn CERT_DecodeCertFromPackage(certbuf: *mut ::std::os::raw::c_char,
                                      certlen: ::std::os::raw::c_int)
     -> *mut CERTCertificate;
    pub fn CERT_ImportCAChain(certs: *mut SECItem,
                              numcerts: ::std::os::raw::c_int,
                              certUsage: SECCertUsage) -> SECStatus;
    pub fn CERT_ImportCAChainTrusted(certs: *mut SECItem,
                                     numcerts: ::std::os::raw::c_int,
                                     certUsage: SECCertUsage) -> SECStatus;
    pub fn CERT_DecodeCertPackage(certbuf: *mut ::std::os::raw::c_char,
                                  certlen: ::std::os::raw::c_int,
                                  f: CERTImportCertificateFunc,
                                  arg: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_DecodeAVAValue(derAVAValue: *const SECItem) -> *mut SECItem;
    pub fn CERT_GetCertificateEmailAddress(cert: *mut CERTCertificate)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetCertEmailAddress(name: *const CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetFirstEmailAddress(cert: *mut CERTCertificate)
     -> *const ::std::os::raw::c_char;
    pub fn CERT_GetNextEmailAddress(cert: *mut CERTCertificate,
                                    prev: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn CERT_GetCommonName(name: *const CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetCountryName(name: *const CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetLocalityName(name: *const CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetStateName(name: *const CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetOrgName(name: *const CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetOrgUnitName(name: *const CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetDomainComponentName(name: *const CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetCertUid(name: *const CERTName)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetCertTrust(cert: *const CERTCertificate,
                             trust: *mut CERTCertTrust) -> SECStatus;
    pub fn CERT_ChangeCertTrust(handle: *mut CERTCertDBHandle,
                                cert: *mut CERTCertificate,
                                trust: *mut CERTCertTrust) -> SECStatus;
    pub fn CERT_ChangeCertTrustByUsage(certdb: *mut CERTCertDBHandle,
                                       cert: *mut CERTCertificate,
                                       usage: SECCertUsage) -> SECStatus;
    pub fn CERT_StartCertExtensions(cert: *mut CERTCertificate)
     -> *mut ::std::os::raw::c_void;
    pub fn CERT_AddExtension(exthandle: *mut ::std::os::raw::c_void,
                             idtag: ::std::os::raw::c_int,
                             value: *mut SECItem, critical: PRBool,
                             copyData: PRBool) -> SECStatus;
    pub fn CERT_AddExtensionByOID(exthandle: *mut ::std::os::raw::c_void,
                                  oid: *mut SECItem, value: *mut SECItem,
                                  critical: PRBool, copyData: PRBool)
     -> SECStatus;
    pub fn CERT_EncodeAndAddExtension(exthandle: *mut ::std::os::raw::c_void,
                                      idtag: ::std::os::raw::c_int,
                                      value: *mut ::std::os::raw::c_void,
                                      critical: PRBool,
                                      atemplate: *const SEC_ASN1Template)
     -> SECStatus;
    pub fn CERT_EncodeAndAddBitStrExtension(exthandle:
                                                *mut ::std::os::raw::c_void,
                                            idtag: ::std::os::raw::c_int,
                                            value: *mut SECItem,
                                            critical: PRBool) -> SECStatus;
    pub fn CERT_EncodeAltNameExtension(arena: *mut PLArenaPool,
                                       value: *mut CERTGeneralName,
                                       encodedValue: *mut SECItem)
     -> SECStatus;
    pub fn CERT_FinishExtensions(exthandle: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_MergeExtensions(exthandle: *mut ::std::os::raw::c_void,
                                exts: *mut *mut CERTCertExtension)
     -> SECStatus;
    pub fn CERT_GetExtenCriticality(extensions: *mut *mut CERTCertExtension,
                                    tag: ::std::os::raw::c_int,
                                    isCritical: *mut PRBool) -> SECStatus;
    pub fn CERT_DestroyOidSequence(oidSeq: *mut CERTOidSequence);
    pub fn CERT_EncodeBasicConstraintValue(arena: *mut PLArenaPool,
                                           value: *mut CERTBasicConstraints,
                                           encodedValue: *mut SECItem)
     -> SECStatus;
    pub fn CERT_EncodeAuthKeyID(arena: *mut PLArenaPool,
                                value: *mut CERTAuthKeyID,
                                encodedValue: *mut SECItem) -> SECStatus;
    pub fn CERT_EncodeCRLDistributionPoints(arena: *mut PLArenaPool,
                                            value:
                                                *mut CERTCrlDistributionPoints,
                                            derValue: *mut SECItem)
     -> SECStatus;
    pub fn CERT_DecodeBasicConstraintValue(value: *mut CERTBasicConstraints,
                                           encodedValue: *const SECItem)
     -> SECStatus;
    pub fn CERT_DecodeAuthKeyID(arena: *mut PLArenaPool,
                                encodedValue: *const SECItem)
     -> *mut CERTAuthKeyID;
    pub fn CERT_DecodeCRLDistributionPoints(arena: *mut PLArenaPool,
                                            der: *mut SECItem)
     -> *mut CERTCrlDistributionPoints;
    pub fn CERT_GetGeneralNameByType(genNames: *mut CERTGeneralName,
                                     type_: CERTGeneralNameType,
                                     derFormat: PRBool)
     -> *mut ::std::os::raw::c_void;
    pub fn CERT_DecodeOidSequence(seqItem: *const SECItem)
     -> *mut CERTOidSequence;
    pub fn CERT_FindCertExtension(cert: *const CERTCertificate,
                                  tag: ::std::os::raw::c_int,
                                  value: *mut SECItem) -> SECStatus;
    pub fn CERT_FindNSCertTypeExtension(cert: *mut CERTCertificate,
                                        value: *mut SECItem) -> SECStatus;
    pub fn CERT_FindNSStringExtension(cert: *mut CERTCertificate,
                                      oidtag: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_FindCertExtensionByOID(cert: *mut CERTCertificate,
                                       oid: *mut SECItem, value: *mut SECItem)
     -> SECStatus;
    pub fn CERT_FindAuthKeyIDExten(arena: *mut PLArenaPool,
                                   cert: *mut CERTCertificate)
     -> *mut CERTAuthKeyID;
    pub fn CERT_FindBasicConstraintExten(cert: *mut CERTCertificate,
                                         value: *mut CERTBasicConstraints)
     -> SECStatus;
    pub fn CERT_FindCRLDistributionPoints(cert: *mut CERTCertificate)
     -> *mut CERTCrlDistributionPoints;
    pub fn CERT_FindKeyUsageExtension(cert: *mut CERTCertificate,
                                      value: *mut SECItem) -> SECStatus;
    pub fn CERT_FindSubjectKeyIDExtension(cert: *mut CERTCertificate,
                                          retItem: *mut SECItem) -> SECStatus;
    pub fn CERT_CheckCertUsage(cert: *mut CERTCertificate,
                               usage: ::std::os::raw::c_uchar) -> SECStatus;
    pub fn CERT_FindCRLExtensionByOID(crl: *mut CERTCrl, oid: *mut SECItem,
                                      value: *mut SECItem) -> SECStatus;
    pub fn CERT_FindCRLExtension(crl: *mut CERTCrl,
                                 tag: ::std::os::raw::c_int,
                                 value: *mut SECItem) -> SECStatus;
    pub fn CERT_FindInvalidDateExten(crl: *mut CERTCrl, value: *mut PRTime)
     -> SECStatus;
    pub fn CERT_StartCRLExtensions(crl: *mut CERTCrl)
     -> *mut ::std::os::raw::c_void;
    pub fn CERT_StartCRLEntryExtensions(crl: *mut CERTCrl,
                                        entry: *mut CERTCrlEntry)
     -> *mut ::std::os::raw::c_void;
    pub fn CERT_GetCertNicknames(handle: *mut CERTCertDBHandle,
                                 what: ::std::os::raw::c_int,
                                 wincx: *mut ::std::os::raw::c_void)
     -> *mut CERTCertNicknames;
    pub fn CERT_FindCRLNumberExten(arena: *mut PLArenaPool, crl: *mut CERTCrl,
                                   value: *mut SECItem) -> SECStatus;
    pub fn CERT_FindCRLEntryReasonExten(crlEntry: *mut CERTCrlEntry,
                                        value: *mut CERTCRLEntryReasonCode)
     -> SECStatus;
    pub fn CERT_FreeNicknames(nicknames: *mut CERTCertNicknames);
    pub fn CERT_CompareCerts(c1: *const CERTCertificate,
                             c2: *const CERTCertificate) -> PRBool;
    pub fn CERT_CompareCertsForRedirection(c1: *mut CERTCertificate,
                                           c2: *mut CERTCertificate)
     -> PRBool;
    pub fn CERT_GetSSLCACerts(handle: *mut CERTCertDBHandle)
     -> *mut CERTDistNames;
    pub fn CERT_FreeDistNames(names: *mut CERTDistNames);
    pub fn CERT_DupDistNames(orig: *mut CERTDistNames) -> *mut CERTDistNames;
    pub fn CERT_DistNamesFromNicknames(handle: *mut CERTCertDBHandle,
                                       nicknames:
                                           *mut *mut ::std::os::raw::c_char,
                                       nnames: ::std::os::raw::c_int)
     -> *mut CERTDistNames;
    pub fn CERT_DistNamesFromCertList(list: *mut CERTCertList)
     -> *mut CERTDistNames;
    pub fn CERT_CertChainFromCert(cert: *mut CERTCertificate,
                                  usage: SECCertUsage, includeRoot: PRBool)
     -> *mut CERTCertificateList;
    pub fn CERT_CertListFromCert(cert: *mut CERTCertificate)
     -> *mut CERTCertificateList;
    pub fn CERT_DupCertList(oldList: *const CERTCertificateList)
     -> *mut CERTCertificateList;
    pub fn CERT_DestroyCertificateList(list: *mut CERTCertificateList);
    pub fn CERT_IsUserCert(cert: *mut CERTCertificate) -> PRBool;
    pub fn CERT_IsNewer(certa: *mut CERTCertificate,
                        certb: *mut CERTCertificate) -> PRBool;
    pub fn CERT_IsCertRevoked(cert: *mut CERTCertificate) -> PRBool;
    pub fn CERT_DestroyCertArray(certs: *mut *mut CERTCertificate,
                                 ncerts: ::std::os::raw::c_uint);
    pub fn CERT_FixupEmailAddr(emailAddr: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_DecodeTrustString(trust: *mut CERTCertTrust,
                                  trusts: *const ::std::os::raw::c_char)
     -> SECStatus;
    pub fn CERT_EncodeTrustString(trust: *mut CERTCertTrust)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_PrevSubjectCert(cert: *mut CERTCertificate)
     -> *mut CERTCertificate;
    pub fn CERT_NextSubjectCert(cert: *mut CERTCertificate)
     -> *mut CERTCertificate;
    pub fn CERT_ImportCerts(certdb: *mut CERTCertDBHandle,
                            usage: SECCertUsage,
                            ncerts: ::std::os::raw::c_uint,
                            derCerts: *mut *mut SECItem,
                            retCerts: *mut *mut *mut CERTCertificate,
                            keepCerts: PRBool, caOnly: PRBool,
                            nickname: *mut ::std::os::raw::c_char)
     -> SECStatus;
    pub fn CERT_MakeCANickname(cert: *mut CERTCertificate)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_IsCACert(cert: *mut CERTCertificate,
                         rettype: *mut ::std::os::raw::c_uint) -> PRBool;
    pub fn CERT_IsCADERCert(derCert: *mut SECItem,
                            rettype: *mut ::std::os::raw::c_uint) -> PRBool;
    pub fn CERT_IsRootDERCert(derCert: *mut SECItem) -> PRBool;
    pub fn CERT_SaveSMimeProfile(cert: *mut CERTCertificate,
                                 emailProfile: *mut SECItem,
                                 profileTime: *mut SECItem) -> SECStatus;
    pub fn CERT_FindSMimeProfile(cert: *mut CERTCertificate) -> *mut SECItem;
    pub fn CERT_AddNewCerts(handle: *mut CERTCertDBHandle) -> SECStatus;
    pub fn CERT_DecodeCertificatePoliciesExtension(extnValue: *const SECItem)
     -> *mut CERTCertificatePolicies;
    pub fn CERT_DestroyCertificatePoliciesExtension(policies:
                                                        *mut CERTCertificatePolicies);
    pub fn CERT_DecodePolicyMappingsExtension(encodedCertPolicyMaps:
                                                  *mut SECItem)
     -> *mut CERTCertificatePolicyMappings;
    pub fn CERT_DestroyPolicyMappingsExtension(mappings:
                                                   *mut CERTCertificatePolicyMappings)
     -> SECStatus;
    pub fn CERT_DecodePolicyConstraintsExtension(decodedValue:
                                                     *mut CERTCertificatePolicyConstraints,
                                                 encodedValue: *const SECItem)
     -> SECStatus;
    pub fn CERT_DecodeInhibitAnyExtension(decodedValue:
                                              *mut CERTCertificateInhibitAny,
                                          extnValue: *mut SECItem)
     -> SECStatus;
    pub fn CERT_DecodeUserNotice(noticeItem: *mut SECItem)
     -> *mut CERTUserNotice;
    pub fn CERT_DecodeAltNameExtension(reqArena: *mut PLArenaPool,
                                       EncodedAltName: *mut SECItem)
     -> *mut CERTGeneralName;
    pub fn CERT_DecodeNameConstraintsExtension(arena: *mut PLArenaPool,
                                               encodedConstraints:
                                                   *const SECItem)
     -> *mut CERTNameConstraints;
    pub fn CERT_DecodeAuthInfoAccessExtension(reqArena: *mut PLArenaPool,
                                              encodedExtension:
                                                  *const SECItem)
     -> *mut *mut CERTAuthInfoAccess;
    pub fn CERT_DecodePrivKeyUsagePeriodExtension(arena: *mut PLArenaPool,
                                                  extnValue: *mut SECItem)
     -> *mut CERTPrivKeyUsagePeriod;
    pub fn CERT_GetNextGeneralName(current: *mut CERTGeneralName)
     -> *mut CERTGeneralName;
    pub fn CERT_GetPrevGeneralName(current: *mut CERTGeneralName)
     -> *mut CERTGeneralName;
    pub fn CERT_GetImposedNameConstraints(derSubject: *const SECItem,
                                          extensions: *mut SECItem)
     -> SECStatus;
    pub fn CERT_GetNextNameConstraint(current: *mut CERTNameConstraint)
     -> *mut CERTNameConstraint;
    pub fn CERT_GetPrevNameConstraint(current: *mut CERTNameConstraint)
     -> *mut CERTNameConstraint;
    pub fn CERT_DestroyUserNotice(userNotice: *mut CERTUserNotice);
    pub fn CERT_SetCAPolicyStringCallback(cb: CERTPolicyStringCallback,
                                          cbarg: *mut ::std::os::raw::c_void);
    pub fn CERT_GetCertCommentString(cert: *mut CERTCertificate)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GovtApprovedBitSet(cert: *mut CERTCertificate) -> PRBool;
    pub fn CERT_AddPermNickname(cert: *mut CERTCertificate,
                                nickname: *mut ::std::os::raw::c_char)
     -> SECStatus;
    pub fn CERT_MatchUserCert(handle: *mut CERTCertDBHandle,
                              usage: SECCertUsage,
                              nCANames: ::std::os::raw::c_int,
                              caNames: *mut *mut ::std::os::raw::c_char,
                              proto_win: *mut ::std::os::raw::c_void)
     -> *mut CERTCertList;
    pub fn CERT_NewCertList() -> *mut CERTCertList;
    pub fn CERT_DestroyCertList(certs: *mut CERTCertList);
    pub fn CERT_RemoveCertListNode(node: *mut CERTCertListNode);
    pub fn CERT_AddCertToListTail(certs: *mut CERTCertList,
                                  cert: *mut CERTCertificate) -> SECStatus;
    pub fn CERT_AddCertToListHead(certs: *mut CERTCertList,
                                  cert: *mut CERTCertificate) -> SECStatus;
    pub fn CERT_AddCertToListTailWithData(certs: *mut CERTCertList,
                                          cert: *mut CERTCertificate,
                                          appData:
                                              *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_AddCertToListHeadWithData(certs: *mut CERTCertList,
                                          cert: *mut CERTCertificate,
                                          appData:
                                              *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_AddCertToListSorted(certs: *mut CERTCertList,
                                    cert: *mut CERTCertificate,
                                    f: CERTSortCallback,
                                    arg: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_SortCBValidity(certa: *mut CERTCertificate,
                               certb: *mut CERTCertificate,
                               arg: *mut ::std::os::raw::c_void) -> PRBool;
    pub fn CERT_CheckForEvilCert(cert: *mut CERTCertificate) -> SECStatus;
    pub fn CERT_GetCertificateNames(cert: *mut CERTCertificate,
                                    arena: *mut PLArenaPool)
     -> *mut CERTGeneralName;
    pub fn CERT_GetConstrainedCertificateNames(cert: *const CERTCertificate,
                                               arena: *mut PLArenaPool,
                                               includeSubjectCommonName:
                                                   PRBool)
     -> *mut CERTGeneralName;
    pub fn CERT_CreateSubjectCertList(certList: *mut CERTCertList,
                                      handle: *mut CERTCertDBHandle,
                                      name: *const SECItem, sorttime: PRTime,
                                      validOnly: PRBool) -> *mut CERTCertList;
    pub fn CERT_FilterCertListByUsage(certList: *mut CERTCertList,
                                      usage: SECCertUsage, ca: PRBool)
     -> SECStatus;
    pub fn CERT_CheckKeyUsage(cert: *mut CERTCertificate,
                              requiredUsage: ::std::os::raw::c_uint)
     -> SECStatus;
    pub fn CERT_KeyUsageAndTypeForCertUsage(usage: SECCertUsage, ca: PRBool,
                                            retKeyUsage:
                                                *mut ::std::os::raw::c_uint,
                                            retCertType:
                                                *mut ::std::os::raw::c_uint)
     -> SECStatus;
    pub fn CERT_TrustFlagsForCACertUsage(usage: SECCertUsage,
                                         retFlags:
                                             *mut ::std::os::raw::c_uint,
                                         retTrustType: *mut SECTrustType)
     -> SECStatus;
    pub fn CERT_FindUserCertsByUsage(handle: *mut CERTCertDBHandle,
                                     usage: SECCertUsage,
                                     oneCertPerName: PRBool,
                                     validOnly: PRBool,
                                     proto_win: *mut ::std::os::raw::c_void)
     -> *mut CERTCertList;
    pub fn CERT_FindUserCertByUsage(handle: *mut CERTCertDBHandle,
                                    nickname: *const ::std::os::raw::c_char,
                                    usage: SECCertUsage, validOnly: PRBool,
                                    proto_win: *mut ::std::os::raw::c_void)
     -> *mut CERTCertificate;
    pub fn CERT_FilterCertListByCANames(certList: *mut CERTCertList,
                                        nCANames: ::std::os::raw::c_int,
                                        caNames:
                                            *mut *mut ::std::os::raw::c_char,
                                        usage: SECCertUsage) -> SECStatus;
    pub fn CERT_FilterCertListForUserCerts(certList: *mut CERTCertList)
     -> SECStatus;
    pub fn CERT_NicknameStringsFromCertList(certList: *mut CERTCertList,
                                            expiredString:
                                                *mut ::std::os::raw::c_char,
                                            notYetGoodString:
                                                *mut ::std::os::raw::c_char)
     -> *mut CERTCertNicknames;
    pub fn CERT_ExtractNicknameString(namestring: *mut ::std::os::raw::c_char,
                                      expiredString:
                                          *mut ::std::os::raw::c_char,
                                      notYetGoodString:
                                          *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_GetCertNicknameWithValidity(arena: *mut PLArenaPool,
                                            cert: *mut CERTCertificate,
                                            expiredString:
                                                *mut ::std::os::raw::c_char,
                                            notYetGoodString:
                                                *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_DerNameToAscii(dername: *mut SECItem)
     -> *mut ::std::os::raw::c_char;
    pub fn CERT_FindMatchingCert(handle: *mut CERTCertDBHandle,
                                 derName: *mut SECItem, owner: CERTCertOwner,
                                 usage: SECCertUsage, preferTrusted: PRBool,
                                 validTime: PRTime, validOnly: PRBool)
     -> *mut CERTCertificate;
    pub fn CERT_LockDB(handle: *mut CERTCertDBHandle);
    pub fn CERT_UnlockDB(handle: *mut CERTCertDBHandle);
    pub fn CERT_GetStatusConfig(handle: *mut CERTCertDBHandle)
     -> *mut CERTStatusConfig;
    pub fn CERT_SetStatusConfig(handle: *mut CERTCertDBHandle,
                                config: *mut CERTStatusConfig);
    pub fn CERT_LockCertRefCount(cert: *mut CERTCertificate);
    pub fn CERT_UnlockCertRefCount(cert: *mut CERTCertificate);
    pub fn CERT_LockCertTrust(cert: *const CERTCertificate);
    pub fn CERT_UnlockCertTrust(cert: *const CERTCertificate);
    pub fn CERT_GetSubjectPublicKeyDigest(arena: *mut PLArenaPool,
                                          cert: *const CERTCertificate,
                                          digestAlg: SECOidTag,
                                          fill: *mut SECItem) -> *mut SECItem;
    pub fn CERT_GetSubjectNameDigest(arena: *mut PLArenaPool,
                                     cert: *const CERTCertificate,
                                     digestAlg: SECOidTag, fill: *mut SECItem)
     -> *mut SECItem;
    pub fn CERT_CheckCRL(cert: *mut CERTCertificate,
                         issuer: *mut CERTCertificate, dp: *const SECItem,
                         t: PRTime, wincx: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_AddNameConstraint(list: *mut CERTNameConstraint,
                                  constraint: *mut CERTNameConstraint)
     -> *mut CERTNameConstraint;
    pub fn CERT_CopyNameConstraint(arena: *mut PLArenaPool,
                                   dest: *mut CERTNameConstraint,
                                   src: *mut CERTNameConstraint)
     -> *mut CERTNameConstraint;
    pub fn CERT_CheckNameSpace(arena: *mut PLArenaPool,
                               constraints: *const CERTNameConstraints,
                               currentName: *const CERTGeneralName)
     -> SECStatus;
    pub fn CERT_FindNameConstraintsExten(arena: *mut PLArenaPool,
                                         cert: *mut CERTCertificate,
                                         constraints:
                                             *mut *mut CERTNameConstraints)
     -> SECStatus;
    pub fn CERT_NewGeneralName(arena: *mut PLArenaPool,
                               type_: CERTGeneralNameType)
     -> *mut CERTGeneralName;
    pub fn CERT_GetGeneralNameTypeFromString(string:
                                                 *const ::std::os::raw::c_char)
     -> CERTGeneralNameType;
    pub fn CERT_EncodePolicyConstraintsExtension(arena: *mut PLArenaPool,
                                                 constr:
                                                     *mut CERTCertificatePolicyConstraints,
                                                 dest: *mut SECItem)
     -> SECStatus;
    pub fn CERT_EncodeInhibitAnyExtension(arena: *mut PLArenaPool,
                                          inhibitAny:
                                              *mut CERTCertificateInhibitAny,
                                          dest: *mut SECItem) -> SECStatus;
    pub fn CERT_EncodePolicyMappingExtension(arena: *mut PLArenaPool,
                                             maps:
                                                 *mut CERTCertificatePolicyMappings,
                                             dest: *mut SECItem) -> SECStatus;
    pub fn CERT_EncodeInfoAccessExtension(arena: *mut PLArenaPool,
                                          info: *mut *mut CERTAuthInfoAccess,
                                          dest: *mut SECItem) -> SECStatus;
    pub fn CERT_EncodeUserNotice(arena: *mut PLArenaPool,
                                 notice: *mut CERTUserNotice,
                                 dest: *mut SECItem) -> SECStatus;
    pub fn CERT_EncodeDisplayText(arena: *mut PLArenaPool, text: *mut SECItem,
                                  dest: *mut SECItem) -> SECStatus;
    pub fn CERT_EncodeCertPoliciesExtension(arena: *mut PLArenaPool,
                                            info: *mut *mut CERTPolicyInfo,
                                            dest: *mut SECItem) -> SECStatus;
    pub fn CERT_EncodeNoticeReference(arena: *mut PLArenaPool,
                                      reference: *mut CERTNoticeReference,
                                      dest: *mut SECItem) -> SECStatus;
    pub fn CERT_GetPKIXVerifyNistRevocationPolicy()
     -> *const CERTRevocationFlags;
    pub fn CERT_GetClassicOCSPEnabledSoftFailurePolicy()
     -> *const CERTRevocationFlags;
    pub fn CERT_GetClassicOCSPEnabledHardFailurePolicy()
     -> *const CERTRevocationFlags;
    pub fn CERT_GetClassicOCSPDisabledPolicy() -> *const CERTRevocationFlags;
    pub fn CERT_PKIXVerifyCert(cert: *mut CERTCertificate,
                               usages: SECCertificateUsage,
                               paramsIn: *mut CERTValInParam,
                               paramsOut: *mut CERTValOutParam,
                               wincx: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn CERT_SetUsePKIXForValidation(enable: PRBool) -> SECStatus;
    pub fn CERT_GetUsePKIXForValidation() -> PRBool;
    pub fn CERT_AllocCERTRevocationFlags(number_leaf_methods: PRUint32,
                                         number_leaf_pref_methods: PRUint32,
                                         number_chain_methods: PRUint32,
                                         number_chain_pref_methods: PRUint32)
     -> *mut CERTRevocationFlags;
    pub fn CERT_DestroyCERTRevocationFlags(flags: *mut CERTRevocationFlags);
    pub fn SECKEY_DestroySubjectPublicKeyInfo(spki:
                                                  *mut CERTSubjectPublicKeyInfo);
    pub fn SECKEY_CopySubjectPublicKeyInfo(arena: *mut PLArenaPool,
                                           dst: *mut CERTSubjectPublicKeyInfo,
                                           src: *mut CERTSubjectPublicKeyInfo)
     -> SECStatus;
    pub fn SECKEY_UpdateCertPQG(subjectCert: *mut CERTCertificate)
     -> SECStatus;
    pub fn SECKEY_BigIntegerBitLength(number: *const SECItem)
     -> ::std::os::raw::c_uint;
    pub fn SECKEY_PublicKeyStrength(pubk: *const SECKEYPublicKey)
     -> ::std::os::raw::c_uint;
    pub fn SECKEY_PublicKeyStrengthInBits(pubk: *const SECKEYPublicKey)
     -> ::std::os::raw::c_uint;
    pub fn SECKEY_SignatureLen(pubk: *const SECKEYPublicKey)
     -> ::std::os::raw::c_uint;
    pub fn SECKEY_CopyPrivateKey(privKey: *const SECKEYPrivateKey)
     -> *mut SECKEYPrivateKey;
    pub fn SECKEY_CopyPublicKey(pubKey: *const SECKEYPublicKey)
     -> *mut SECKEYPublicKey;
    pub fn SECKEY_ConvertToPublicKey(privateKey: *mut SECKEYPrivateKey)
     -> *mut SECKEYPublicKey;
    pub fn SECKEY_CreateRSAPrivateKey(keySizeInBits: ::std::os::raw::c_int,
                                      pubk: *mut *mut SECKEYPublicKey,
                                      cx: *mut ::std::os::raw::c_void)
     -> *mut SECKEYPrivateKey;
    pub fn SECKEY_CreateDHPrivateKey(param: *mut SECKEYDHParams,
                                     pubk: *mut *mut SECKEYPublicKey,
                                     cx: *mut ::std::os::raw::c_void)
     -> *mut SECKEYPrivateKey;
    pub fn SECKEY_CreateECPrivateKey(param: *mut SECKEYECParams,
                                     pubk: *mut *mut SECKEYPublicKey,
                                     cx: *mut ::std::os::raw::c_void)
     -> *mut SECKEYPrivateKey;
    pub fn SECKEY_CreateSubjectPublicKeyInfo(k: *const SECKEYPublicKey)
     -> *mut CERTSubjectPublicKeyInfo;
    pub fn SECKEY_ConvertAndDecodePublicKeyAndChallenge(pkacstr:
                                                            *mut ::std::os::raw::c_char,
                                                        challenge:
                                                            *mut ::std::os::raw::c_char,
                                                        cx:
                                                            *mut ::std::os::raw::c_void)
     -> *mut CERTSubjectPublicKeyInfo;
    pub fn SECKEY_EncodeDERSubjectPublicKeyInfo(pubk: *const SECKEYPublicKey)
     -> *mut SECItem;
    pub fn SECKEY_DecodeDERSubjectPublicKeyInfo(spkider: *const SECItem)
     -> *mut CERTSubjectPublicKeyInfo;
    pub fn SECKEY_ConvertAndDecodeSubjectPublicKeyInfo(spkistr:
                                                           *const ::std::os::raw::c_char)
     -> *mut CERTSubjectPublicKeyInfo;
    pub fn SECKEY_ExtractPublicKey(arg1: *const CERTSubjectPublicKeyInfo)
     -> *mut SECKEYPublicKey;
    pub fn SECKEY_DestroyPrivateKey(key: *mut SECKEYPrivateKey);
    pub fn SECKEY_DestroyPublicKey(key: *mut SECKEYPublicKey);
    pub fn SECKEY_DestroyPrivateKeyInfo(pvk: *mut SECKEYPrivateKeyInfo,
                                        freeit: PRBool);
    pub fn SECKEY_DestroyEncryptedPrivateKeyInfo(epki:
                                                     *mut SECKEYEncryptedPrivateKeyInfo,
                                                 freeit: PRBool);
    pub fn SECKEY_CopyPrivateKeyInfo(poolp: *mut PLArenaPool,
                                     to: *mut SECKEYPrivateKeyInfo,
                                     from: *const SECKEYPrivateKeyInfo)
     -> SECStatus;
    pub fn SECKEY_CacheStaticFlags(key: *mut SECKEYPrivateKey) -> SECStatus;
    pub fn SECKEY_CopyEncryptedPrivateKeyInfo(poolp: *mut PLArenaPool,
                                              to:
                                                  *mut SECKEYEncryptedPrivateKeyInfo,
                                              from:
                                                  *const SECKEYEncryptedPrivateKeyInfo)
     -> SECStatus;
    pub fn SECKEY_GetPrivateKeyType(privKey: *const SECKEYPrivateKey)
     -> KeyType;
    pub fn SECKEY_GetPublicKeyType(pubKey: *const SECKEYPublicKey) -> KeyType;
    pub fn SECKEY_ImportDERPublicKey(derKey: *const SECItem,
                                     type_: CK_KEY_TYPE)
     -> *mut SECKEYPublicKey;
    pub fn SECKEY_NewPrivateKeyList() -> *mut SECKEYPrivateKeyList;
    pub fn SECKEY_DestroyPrivateKeyList(keys: *mut SECKEYPrivateKeyList);
    pub fn SECKEY_RemovePrivateKeyListNode(node:
                                               *mut SECKEYPrivateKeyListNode);
    pub fn SECKEY_AddPrivateKeyToListTail(list: *mut SECKEYPrivateKeyList,
                                          key: *mut SECKEYPrivateKey)
     -> SECStatus;
    pub fn SECKEY_NewPublicKeyList() -> *mut SECKEYPublicKeyList;
    pub fn SECKEY_DestroyPublicKeyList(keys: *mut SECKEYPublicKeyList);
    pub fn SECKEY_RemovePublicKeyListNode(node: *mut SECKEYPublicKeyListNode);
    pub fn SECKEY_AddPublicKeyToListTail(list: *mut SECKEYPublicKeyList,
                                         key: *mut SECKEYPublicKey)
     -> SECStatus;
    pub fn SECKEY_ECParamsToKeySize(params: *const SECItem)
     -> ::std::os::raw::c_int;
    pub fn SECKEY_ECParamsToBasePointOrderLen(params: *const SECItem)
     -> ::std::os::raw::c_int;
    pub fn SECKEY_GetECCOid(params: *const SECKEYECParams) -> SECOidTag;
    pub fn SEC_PKCS7ContentType(cinfo: *mut SEC_PKCS7ContentInfo)
     -> SECOidTag;
    pub fn SEC_PKCS7DestroyContentInfo(contentInfo:
                                           *mut SEC_PKCS7ContentInfo);
    pub fn SEC_PKCS7CopyContentInfo(contentInfo: *mut SEC_PKCS7ContentInfo)
     -> *mut SEC_PKCS7ContentInfo;
    pub fn SEC_PKCS7GetContent(cinfo: *mut SEC_PKCS7ContentInfo)
     -> *mut SECItem;
    pub fn SEC_PKCS7DecoderStart(callback: SEC_PKCS7DecoderContentCallback,
                                 callback_arg: *mut ::std::os::raw::c_void,
                                 pwfn: SECKEYGetPasswordKey,
                                 pwfn_arg: *mut ::std::os::raw::c_void,
                                 decrypt_key_cb:
                                     SEC_PKCS7GetDecryptKeyCallback,
                                 decrypt_key_cb_arg:
                                     *mut ::std::os::raw::c_void,
                                 decrypt_allowed_cb:
                                     SEC_PKCS7DecryptionAllowedCallback)
     -> *mut SEC_PKCS7DecoderContext;
    pub fn SEC_PKCS7DecoderUpdate(p7dcx: *mut SEC_PKCS7DecoderContext,
                                  buf: *const ::std::os::raw::c_char,
                                  len: ::std::os::raw::c_ulong) -> SECStatus;
    pub fn SEC_PKCS7DecoderFinish(p7dcx: *mut SEC_PKCS7DecoderContext)
     -> *mut SEC_PKCS7ContentInfo;
    pub fn SEC_PKCS7DecoderAbort(p7dcx: *mut SEC_PKCS7DecoderContext,
                                 error: ::std::os::raw::c_int);
    pub fn SEC_PKCS7DecodeItem(p7item: *mut SECItem,
                               cb: SEC_PKCS7DecoderContentCallback,
                               cb_arg: *mut ::std::os::raw::c_void,
                               pwfn: SECKEYGetPasswordKey,
                               pwfn_arg: *mut ::std::os::raw::c_void,
                               decrypt_key_cb: SEC_PKCS7GetDecryptKeyCallback,
                               decrypt_key_cb_arg:
                                   *mut ::std::os::raw::c_void,
                               decrypt_allowed_cb:
                                   SEC_PKCS7DecryptionAllowedCallback)
     -> *mut SEC_PKCS7ContentInfo;
    pub fn SEC_PKCS7ContainsCertsOrCrls(cinfo: *mut SEC_PKCS7ContentInfo)
     -> PRBool;
    pub fn SEC_PKCS7IsContentEmpty(cinfo: *mut SEC_PKCS7ContentInfo,
                                   minLen: ::std::os::raw::c_uint) -> PRBool;
    pub fn SEC_PKCS7ContentIsEncrypted(cinfo: *mut SEC_PKCS7ContentInfo)
     -> PRBool;
    pub fn SEC_PKCS7ContentIsSigned(cinfo: *mut SEC_PKCS7ContentInfo)
     -> PRBool;
    pub fn SEC_PKCS7VerifySignature(cinfo: *mut SEC_PKCS7ContentInfo,
                                    certusage: SECCertUsage,
                                    keepcerts: PRBool) -> PRBool;
    pub fn SEC_PKCS7VerifyDetachedSignature(cinfo: *mut SEC_PKCS7ContentInfo,
                                            certusage: SECCertUsage,
                                            detached_digest: *const SECItem,
                                            digest_type: HASH_HashType,
                                            keepcerts: PRBool) -> PRBool;
    pub fn SEC_PKCS7VerifyDetachedSignatureAtTime(cinfo:
                                                      *mut SEC_PKCS7ContentInfo,
                                                  certusage: SECCertUsage,
                                                  detached_digest:
                                                      *const SECItem,
                                                  digest_type: HASH_HashType,
                                                  keepcerts: PRBool,
                                                  atTime: PRTime) -> PRBool;
    pub fn SEC_PKCS7GetSignerCommonName(cinfo: *mut SEC_PKCS7ContentInfo)
     -> *mut ::std::os::raw::c_char;
    pub fn SEC_PKCS7GetSignerEmailAddress(cinfo: *mut SEC_PKCS7ContentInfo)
     -> *mut ::std::os::raw::c_char;
    pub fn SEC_PKCS7GetSigningTime(cinfo: *mut SEC_PKCS7ContentInfo)
     -> *mut SECItem;
    pub fn SEC_PKCS7CreateSignedData(cert: *mut CERTCertificate,
                                     certusage: SECCertUsage,
                                     certdb: *mut CERTCertDBHandle,
                                     digestalg: SECOidTag,
                                     digest: *mut SECItem,
                                     pwfn: SECKEYGetPasswordKey,
                                     pwfn_arg: *mut ::std::os::raw::c_void)
     -> *mut SEC_PKCS7ContentInfo;
    pub fn SEC_PKCS7CreateCertsOnly(cert: *mut CERTCertificate,
                                    include_chain: PRBool,
                                    certdb: *mut CERTCertDBHandle)
     -> *mut SEC_PKCS7ContentInfo;
    pub fn SEC_PKCS7CreateEnvelopedData(cert: *mut CERTCertificate,
                                        certusage: SECCertUsage,
                                        certdb: *mut CERTCertDBHandle,
                                        encalg: SECOidTag,
                                        keysize: ::std::os::raw::c_int,
                                        pwfn: SECKEYGetPasswordKey,
                                        pwfn_arg: *mut ::std::os::raw::c_void)
     -> *mut SEC_PKCS7ContentInfo;
    pub fn SEC_PKCS7CreateData() -> *mut SEC_PKCS7ContentInfo;
    pub fn SEC_PKCS7CreateEncryptedData(algorithm: SECOidTag,
                                        keysize: ::std::os::raw::c_int,
                                        pwfn: SECKEYGetPasswordKey,
                                        pwfn_arg: *mut ::std::os::raw::c_void)
     -> *mut SEC_PKCS7ContentInfo;
    pub fn SEC_PKCS7AddSignedAttribute(cinfo: *mut SEC_PKCS7ContentInfo,
                                       oidtag: SECOidTag, value: *mut SECItem)
     -> SECStatus;
    pub fn SEC_PKCS7AddCertChain(cinfo: *mut SEC_PKCS7ContentInfo,
                                 cert: *mut CERTCertificate,
                                 certdb: *mut CERTCertDBHandle) -> SECStatus;
    pub fn SEC_PKCS7AddCertificate(cinfo: *mut SEC_PKCS7ContentInfo,
                                   cert: *mut CERTCertificate) -> SECStatus;
    pub fn SEC_PKCS7AddRecipient(cinfo: *mut SEC_PKCS7ContentInfo,
                                 cert: *mut CERTCertificate,
                                 certusage: SECCertUsage,
                                 certdb: *mut CERTCertDBHandle) -> SECStatus;
    pub fn SEC_PKCS7AddSigningTime(cinfo: *mut SEC_PKCS7ContentInfo)
     -> SECStatus;
    pub fn SEC_PKCS7AddSymmetricCapabilities(cinfo: *mut SEC_PKCS7ContentInfo)
     -> SECStatus;
    pub fn SEC_PKCS7IncludeCertChain(cinfo: *mut SEC_PKCS7ContentInfo,
                                     certdb: *mut CERTCertDBHandle)
     -> SECStatus;
    pub fn SEC_PKCS7SetContent(cinfo: *mut SEC_PKCS7ContentInfo,
                               buf: *const ::std::os::raw::c_char,
                               len: ::std::os::raw::c_ulong) -> SECStatus;
    pub fn SEC_PKCS7Encode(cinfo: *mut SEC_PKCS7ContentInfo,
                           outputfn: SEC_PKCS7EncoderOutputCallback,
                           outputarg: *mut ::std::os::raw::c_void,
                           bulkkey: *mut PK11SymKey,
                           pwfn: SECKEYGetPasswordKey,
                           pwfnarg: *mut ::std::os::raw::c_void) -> SECStatus;
    pub fn SEC_PKCS7EncodeItem(pool: *mut PLArenaPool, dest: *mut SECItem,
                               cinfo: *mut SEC_PKCS7ContentInfo,
                               bulkkey: *mut PK11SymKey,
                               pwfn: SECKEYGetPasswordKey,
                               pwfnarg: *mut ::std::os::raw::c_void)
     -> *mut SECItem;
    pub fn SEC_PKCS7PrepareForEncode(cinfo: *mut SEC_PKCS7ContentInfo,
                                     bulkkey: *mut PK11SymKey,
                                     pwfn: SECKEYGetPasswordKey,
                                     pwfnarg: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn SEC_PKCS7EncoderStart(cinfo: *mut SEC_PKCS7ContentInfo,
                                 outputfn: SEC_PKCS7EncoderOutputCallback,
                                 outputarg: *mut ::std::os::raw::c_void,
                                 bulkkey: *mut PK11SymKey)
     -> *mut SEC_PKCS7EncoderContext;
    pub fn SEC_PKCS7EncoderUpdate(p7ecx: *mut SEC_PKCS7EncoderContext,
                                  buf: *const ::std::os::raw::c_char,
                                  len: ::std::os::raw::c_ulong) -> SECStatus;
    pub fn SEC_PKCS7EncoderFinish(p7ecx: *mut SEC_PKCS7EncoderContext,
                                  pwfn: SECKEYGetPasswordKey,
                                  pwfnarg: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn SEC_PKCS7EncoderAbort(p7dcx: *mut SEC_PKCS7EncoderContext,
                                 error: ::std::os::raw::c_int);
    pub fn SEC_PKCS7GetEncryptionAlgorithm(cinfo: *mut SEC_PKCS7ContentInfo)
     -> *mut SECAlgorithmID;
    pub fn SEC_PKCS7EncryptContents(poolp: *mut PLArenaPool,
                                    cinfo: *mut SEC_PKCS7ContentInfo,
                                    key: *mut SECItem,
                                    wincx: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn SEC_PKCS7DecryptContents(poolp: *mut PLArenaPool,
                                    cinfo: *mut SEC_PKCS7ContentInfo,
                                    key: *mut SECItem,
                                    wincx: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn SEC_PKCS7GetCertificateList(cinfo: *mut SEC_PKCS7ContentInfo)
     -> *mut *mut SECItem;
    pub fn SEC_PKCS7GetKeyLength(cinfo: *mut SEC_PKCS7ContentInfo)
     -> ::std::os::raw::c_int;
    pub fn NSS_Get_sgn_DigestInfoTemplate(arg: *mut ::std::os::raw::c_void,
                                          enc: PRBool)
     -> *const SEC_ASN1Template;
    pub fn SGN_CreateDigestInfo(algorithm: SECOidTag,
                                sig: *const ::std::os::raw::c_uchar,
                                sigLen: ::std::os::raw::c_uint)
     -> *mut SGNDigestInfo;
    pub fn SGN_DestroyDigestInfo(info: *mut SGNDigestInfo);
    pub fn SGN_EncodeDigestInfo(poolp: *mut PLArenaPool, dest: *mut SECItem,
                                diginfo: *mut SGNDigestInfo) -> *mut SECItem;
    pub fn SGN_DecodeDigestInfo(didata: *mut SECItem) -> *mut SGNDigestInfo;
    pub fn SGN_CopyDigestInfo(poolp: *mut PLArenaPool, a: *mut SGNDigestInfo,
                              b: *mut SGNDigestInfo) -> SECStatus;
    pub fn SGN_CompareDigestInfo(a: *mut SGNDigestInfo, b: *mut SGNDigestInfo)
     -> SECComparison;
    pub fn C_Initialize(pInitArgs: CK_VOID_PTR) -> CK_RV;
    pub fn C_Finalize(pReserved: CK_VOID_PTR) -> CK_RV;
    pub fn C_GetInfo(pInfo: CK_INFO_PTR) -> CK_RV;
    pub fn C_GetFunctionList(ppFunctionList: CK_FUNCTION_LIST_PTR_PTR)
     -> CK_RV;
    pub fn C_GetSlotList(tokenPresent: CK_BBOOL, pSlotList: CK_SLOT_ID_PTR,
                         pulCount: CK_ULONG_PTR) -> CK_RV;
    pub fn C_GetSlotInfo(slotID: CK_SLOT_ID, pInfo: CK_SLOT_INFO_PTR)
     -> CK_RV;
    pub fn C_GetTokenInfo(slotID: CK_SLOT_ID, pInfo: CK_TOKEN_INFO_PTR)
     -> CK_RV;
    pub fn C_GetMechanismList(slotID: CK_SLOT_ID,
                              pMechanismList: CK_MECHANISM_TYPE_PTR,
                              pulCount: CK_ULONG_PTR) -> CK_RV;
    pub fn C_GetMechanismInfo(slotID: CK_SLOT_ID, type_: CK_MECHANISM_TYPE,
                              pInfo: CK_MECHANISM_INFO_PTR) -> CK_RV;
    pub fn C_InitToken(slotID: CK_SLOT_ID, pPin: CK_UTF8CHAR_PTR,
                       ulPinLen: CK_ULONG, pLabel: CK_UTF8CHAR_PTR) -> CK_RV;
    pub fn C_InitPIN(hSession: CK_SESSION_HANDLE, pPin: CK_UTF8CHAR_PTR,
                     ulPinLen: CK_ULONG) -> CK_RV;
    pub fn C_SetPIN(hSession: CK_SESSION_HANDLE, pOldPin: CK_UTF8CHAR_PTR,
                    ulOldLen: CK_ULONG, pNewPin: CK_UTF8CHAR_PTR,
                    ulNewLen: CK_ULONG) -> CK_RV;
    pub fn C_OpenSession(slotID: CK_SLOT_ID, flags: CK_FLAGS,
                         pApplication: CK_VOID_PTR, Notify: CK_NOTIFY,
                         phSession: CK_SESSION_HANDLE_PTR) -> CK_RV;
    pub fn C_CloseSession(hSession: CK_SESSION_HANDLE) -> CK_RV;
    pub fn C_CloseAllSessions(slotID: CK_SLOT_ID) -> CK_RV;
    pub fn C_GetSessionInfo(hSession: CK_SESSION_HANDLE,
                            pInfo: CK_SESSION_INFO_PTR) -> CK_RV;
    pub fn C_GetOperationState(hSession: CK_SESSION_HANDLE,
                               pOperationState: CK_BYTE_PTR,
                               pulOperationStateLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_SetOperationState(hSession: CK_SESSION_HANDLE,
                               pOperationState: CK_BYTE_PTR,
                               ulOperationStateLen: CK_ULONG,
                               hEncryptionKey: CK_OBJECT_HANDLE,
                               hAuthenticationKey: CK_OBJECT_HANDLE) -> CK_RV;
    pub fn C_Login(hSession: CK_SESSION_HANDLE, userType: CK_USER_TYPE,
                   pPin: CK_UTF8CHAR_PTR, ulPinLen: CK_ULONG) -> CK_RV;
    pub fn C_Logout(hSession: CK_SESSION_HANDLE) -> CK_RV;
    pub fn C_CreateObject(hSession: CK_SESSION_HANDLE,
                          pTemplate: CK_ATTRIBUTE_PTR, ulCount: CK_ULONG,
                          phObject: CK_OBJECT_HANDLE_PTR) -> CK_RV;
    pub fn C_CopyObject(hSession: CK_SESSION_HANDLE,
                        hObject: CK_OBJECT_HANDLE,
                        pTemplate: CK_ATTRIBUTE_PTR, ulCount: CK_ULONG,
                        phNewObject: CK_OBJECT_HANDLE_PTR) -> CK_RV;
    pub fn C_DestroyObject(hSession: CK_SESSION_HANDLE,
                           hObject: CK_OBJECT_HANDLE) -> CK_RV;
    pub fn C_GetObjectSize(hSession: CK_SESSION_HANDLE,
                           hObject: CK_OBJECT_HANDLE, pulSize: CK_ULONG_PTR)
     -> CK_RV;
    pub fn C_GetAttributeValue(hSession: CK_SESSION_HANDLE,
                               hObject: CK_OBJECT_HANDLE,
                               pTemplate: CK_ATTRIBUTE_PTR, ulCount: CK_ULONG)
     -> CK_RV;
    pub fn C_SetAttributeValue(hSession: CK_SESSION_HANDLE,
                               hObject: CK_OBJECT_HANDLE,
                               pTemplate: CK_ATTRIBUTE_PTR, ulCount: CK_ULONG)
     -> CK_RV;
    pub fn C_FindObjectsInit(hSession: CK_SESSION_HANDLE,
                             pTemplate: CK_ATTRIBUTE_PTR, ulCount: CK_ULONG)
     -> CK_RV;
    pub fn C_FindObjects(hSession: CK_SESSION_HANDLE,
                         phObject: CK_OBJECT_HANDLE_PTR,
                         ulMaxObjectCount: CK_ULONG,
                         pulObjectCount: CK_ULONG_PTR) -> CK_RV;
    pub fn C_FindObjectsFinal(hSession: CK_SESSION_HANDLE) -> CK_RV;
    pub fn C_EncryptInit(hSession: CK_SESSION_HANDLE,
                         pMechanism: CK_MECHANISM_PTR, hKey: CK_OBJECT_HANDLE)
     -> CK_RV;
    pub fn C_Encrypt(hSession: CK_SESSION_HANDLE, pData: CK_BYTE_PTR,
                     ulDataLen: CK_ULONG, pEncryptedData: CK_BYTE_PTR,
                     pulEncryptedDataLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_EncryptUpdate(hSession: CK_SESSION_HANDLE, pPart: CK_BYTE_PTR,
                           ulPartLen: CK_ULONG, pEncryptedPart: CK_BYTE_PTR,
                           pulEncryptedPartLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_EncryptFinal(hSession: CK_SESSION_HANDLE,
                          pLastEncryptedPart: CK_BYTE_PTR,
                          pulLastEncryptedPartLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_DecryptInit(hSession: CK_SESSION_HANDLE,
                         pMechanism: CK_MECHANISM_PTR, hKey: CK_OBJECT_HANDLE)
     -> CK_RV;
    pub fn C_Decrypt(hSession: CK_SESSION_HANDLE, pEncryptedData: CK_BYTE_PTR,
                     ulEncryptedDataLen: CK_ULONG, pData: CK_BYTE_PTR,
                     pulDataLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_DecryptUpdate(hSession: CK_SESSION_HANDLE,
                           pEncryptedPart: CK_BYTE_PTR,
                           ulEncryptedPartLen: CK_ULONG, pPart: CK_BYTE_PTR,
                           pulPartLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_DecryptFinal(hSession: CK_SESSION_HANDLE, pLastPart: CK_BYTE_PTR,
                          pulLastPartLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_DigestInit(hSession: CK_SESSION_HANDLE,
                        pMechanism: CK_MECHANISM_PTR) -> CK_RV;
    pub fn C_Digest(hSession: CK_SESSION_HANDLE, pData: CK_BYTE_PTR,
                    ulDataLen: CK_ULONG, pDigest: CK_BYTE_PTR,
                    pulDigestLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_DigestUpdate(hSession: CK_SESSION_HANDLE, pPart: CK_BYTE_PTR,
                          ulPartLen: CK_ULONG) -> CK_RV;
    pub fn C_DigestKey(hSession: CK_SESSION_HANDLE, hKey: CK_OBJECT_HANDLE)
     -> CK_RV;
    pub fn C_DigestFinal(hSession: CK_SESSION_HANDLE, pDigest: CK_BYTE_PTR,
                         pulDigestLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_SignInit(hSession: CK_SESSION_HANDLE,
                      pMechanism: CK_MECHANISM_PTR, hKey: CK_OBJECT_HANDLE)
     -> CK_RV;
    pub fn C_Sign(hSession: CK_SESSION_HANDLE, pData: CK_BYTE_PTR,
                  ulDataLen: CK_ULONG, pSignature: CK_BYTE_PTR,
                  pulSignatureLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_SignUpdate(hSession: CK_SESSION_HANDLE, pPart: CK_BYTE_PTR,
                        ulPartLen: CK_ULONG) -> CK_RV;
    pub fn C_SignFinal(hSession: CK_SESSION_HANDLE, pSignature: CK_BYTE_PTR,
                       pulSignatureLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_SignRecoverInit(hSession: CK_SESSION_HANDLE,
                             pMechanism: CK_MECHANISM_PTR,
                             hKey: CK_OBJECT_HANDLE) -> CK_RV;
    pub fn C_SignRecover(hSession: CK_SESSION_HANDLE, pData: CK_BYTE_PTR,
                         ulDataLen: CK_ULONG, pSignature: CK_BYTE_PTR,
                         pulSignatureLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_VerifyInit(hSession: CK_SESSION_HANDLE,
                        pMechanism: CK_MECHANISM_PTR, hKey: CK_OBJECT_HANDLE)
     -> CK_RV;
    pub fn C_Verify(hSession: CK_SESSION_HANDLE, pData: CK_BYTE_PTR,
                    ulDataLen: CK_ULONG, pSignature: CK_BYTE_PTR,
                    ulSignatureLen: CK_ULONG) -> CK_RV;
    pub fn C_VerifyUpdate(hSession: CK_SESSION_HANDLE, pPart: CK_BYTE_PTR,
                          ulPartLen: CK_ULONG) -> CK_RV;
    pub fn C_VerifyFinal(hSession: CK_SESSION_HANDLE, pSignature: CK_BYTE_PTR,
                         ulSignatureLen: CK_ULONG) -> CK_RV;
    pub fn C_VerifyRecoverInit(hSession: CK_SESSION_HANDLE,
                               pMechanism: CK_MECHANISM_PTR,
                               hKey: CK_OBJECT_HANDLE) -> CK_RV;
    pub fn C_VerifyRecover(hSession: CK_SESSION_HANDLE,
                           pSignature: CK_BYTE_PTR, ulSignatureLen: CK_ULONG,
                           pData: CK_BYTE_PTR, pulDataLen: CK_ULONG_PTR)
     -> CK_RV;
    pub fn C_DigestEncryptUpdate(hSession: CK_SESSION_HANDLE,
                                 pPart: CK_BYTE_PTR, ulPartLen: CK_ULONG,
                                 pEncryptedPart: CK_BYTE_PTR,
                                 pulEncryptedPartLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_DecryptDigestUpdate(hSession: CK_SESSION_HANDLE,
                                 pEncryptedPart: CK_BYTE_PTR,
                                 ulEncryptedPartLen: CK_ULONG,
                                 pPart: CK_BYTE_PTR, pulPartLen: CK_ULONG_PTR)
     -> CK_RV;
    pub fn C_SignEncryptUpdate(hSession: CK_SESSION_HANDLE,
                               pPart: CK_BYTE_PTR, ulPartLen: CK_ULONG,
                               pEncryptedPart: CK_BYTE_PTR,
                               pulEncryptedPartLen: CK_ULONG_PTR) -> CK_RV;
    pub fn C_DecryptVerifyUpdate(hSession: CK_SESSION_HANDLE,
                                 pEncryptedPart: CK_BYTE_PTR,
                                 ulEncryptedPartLen: CK_ULONG,
                                 pPart: CK_BYTE_PTR, pulPartLen: CK_ULONG_PTR)
     -> CK_RV;
    pub fn C_GenerateKey(hSession: CK_SESSION_HANDLE,
                         pMechanism: CK_MECHANISM_PTR,
                         pTemplate: CK_ATTRIBUTE_PTR, ulCount: CK_ULONG,
                         phKey: CK_OBJECT_HANDLE_PTR) -> CK_RV;
    pub fn C_GenerateKeyPair(hSession: CK_SESSION_HANDLE,
                             pMechanism: CK_MECHANISM_PTR,
                             pPublicKeyTemplate: CK_ATTRIBUTE_PTR,
                             ulPublicKeyAttributeCount: CK_ULONG,
                             pPrivateKeyTemplate: CK_ATTRIBUTE_PTR,
                             ulPrivateKeyAttributeCount: CK_ULONG,
                             phPublicKey: CK_OBJECT_HANDLE_PTR,
                             phPrivateKey: CK_OBJECT_HANDLE_PTR) -> CK_RV;
    pub fn C_WrapKey(hSession: CK_SESSION_HANDLE,
                     pMechanism: CK_MECHANISM_PTR,
                     hWrappingKey: CK_OBJECT_HANDLE, hKey: CK_OBJECT_HANDLE,
                     pWrappedKey: CK_BYTE_PTR, pulWrappedKeyLen: CK_ULONG_PTR)
     -> CK_RV;
    pub fn C_UnwrapKey(hSession: CK_SESSION_HANDLE,
                       pMechanism: CK_MECHANISM_PTR,
                       hUnwrappingKey: CK_OBJECT_HANDLE,
                       pWrappedKey: CK_BYTE_PTR, ulWrappedKeyLen: CK_ULONG,
                       pTemplate: CK_ATTRIBUTE_PTR,
                       ulAttributeCount: CK_ULONG,
                       phKey: CK_OBJECT_HANDLE_PTR) -> CK_RV;
    pub fn C_DeriveKey(hSession: CK_SESSION_HANDLE,
                       pMechanism: CK_MECHANISM_PTR,
                       hBaseKey: CK_OBJECT_HANDLE,
                       pTemplate: CK_ATTRIBUTE_PTR,
                       ulAttributeCount: CK_ULONG,
                       phKey: CK_OBJECT_HANDLE_PTR) -> CK_RV;
    pub fn C_SeedRandom(hSession: CK_SESSION_HANDLE, pSeed: CK_BYTE_PTR,
                        ulSeedLen: CK_ULONG) -> CK_RV;
    pub fn C_GenerateRandom(hSession: CK_SESSION_HANDLE,
                            RandomData: CK_BYTE_PTR, ulRandomLen: CK_ULONG)
     -> CK_RV;
    pub fn C_GetFunctionStatus(hSession: CK_SESSION_HANDLE) -> CK_RV;
    pub fn C_CancelFunction(hSession: CK_SESSION_HANDLE) -> CK_RV;
    pub fn C_WaitForSlotEvent(flags: CK_FLAGS, pSlot: CK_SLOT_ID_PTR,
                              pRserved: CK_VOID_PTR) -> CK_RV;
    pub fn SEC_PKCS12CreatePubKeyEncryptedSafe(p12ctxt:
                                                   *mut SEC_PKCS12ExportContext,
                                               certDb: *mut CERTCertDBHandle,
                                               signer: *mut CERTCertificate,
                                               recipients:
                                                   *mut *mut CERTCertificate,
                                               algorithm: SECOidTag,
                                               keysize: ::std::os::raw::c_int)
     -> *mut SEC_PKCS12SafeInfo;
    pub fn SEC_PKCS12CreatePasswordPrivSafe(p12ctxt:
                                                *mut SEC_PKCS12ExportContext,
                                            pwitem: *mut SECItem,
                                            privAlg: SECOidTag)
     -> *mut SEC_PKCS12SafeInfo;
    pub fn SEC_PKCS12CreateUnencryptedSafe(p12ctxt:
                                               *mut SEC_PKCS12ExportContext)
     -> *mut SEC_PKCS12SafeInfo;
    pub fn SEC_PKCS12AddPasswordIntegrity(p12ctxt:
                                              *mut SEC_PKCS12ExportContext,
                                          pwitem: *mut SECItem,
                                          integAlg: SECOidTag) -> SECStatus;
    pub fn SEC_PKCS12AddPublicKeyIntegrity(p12ctxt:
                                               *mut SEC_PKCS12ExportContext,
                                           cert: *mut CERTCertificate,
                                           certDb: *mut CERTCertDBHandle,
                                           algorithm: SECOidTag,
                                           keySize: ::std::os::raw::c_int)
     -> SECStatus;
    pub fn SEC_PKCS12CreateExportContext(pwfn: SECKEYGetPasswordKey,
                                         pwfnarg: *mut ::std::os::raw::c_void,
                                         slot: *mut PK11SlotInfo,
                                         wincx: *mut ::std::os::raw::c_void)
     -> *mut SEC_PKCS12ExportContext;
    pub fn SEC_PKCS12AddCert(p12ctxt: *mut SEC_PKCS12ExportContext,
                             safe: *mut SEC_PKCS12SafeInfo,
                             nestedDest: *mut ::std::os::raw::c_void,
                             cert: *mut CERTCertificate,
                             certDb: *mut CERTCertDBHandle,
                             keyId: *mut SECItem, includeCertChain: PRBool)
     -> SECStatus;
    pub fn SEC_PKCS12AddKeyForCert(p12ctxt: *mut SEC_PKCS12ExportContext,
                                   safe: *mut SEC_PKCS12SafeInfo,
                                   nestedDest: *mut ::std::os::raw::c_void,
                                   cert: *mut CERTCertificate,
                                   shroudKey: PRBool, algorithm: SECOidTag,
                                   pwitem: *mut SECItem, keyId: *mut SECItem,
                                   nickName: *mut SECItem) -> SECStatus;
    pub fn SEC_PKCS12AddCertOrChainAndKey(p12ctxt:
                                              *mut SEC_PKCS12ExportContext,
                                          certSafe:
                                              *mut ::std::os::raw::c_void,
                                          certNestedDest:
                                              *mut ::std::os::raw::c_void,
                                          cert: *mut CERTCertificate,
                                          certDb: *mut CERTCertDBHandle,
                                          keySafe:
                                              *mut ::std::os::raw::c_void,
                                          keyNestedDest:
                                              *mut ::std::os::raw::c_void,
                                          shroudKey: PRBool,
                                          pwitem: *mut SECItem,
                                          algorithm: SECOidTag,
                                          includeCertChain: PRBool)
     -> SECStatus;
    pub fn SEC_PKCS12AddCertAndKey(p12ctxt: *mut SEC_PKCS12ExportContext,
                                   certSafe: *mut ::std::os::raw::c_void,
                                   certNestedDest:
                                       *mut ::std::os::raw::c_void,
                                   cert: *mut CERTCertificate,
                                   certDb: *mut CERTCertDBHandle,
                                   keySafe: *mut ::std::os::raw::c_void,
                                   keyNestedDest: *mut ::std::os::raw::c_void,
                                   shroudKey: PRBool, pwitem: *mut SECItem,
                                   algorithm: SECOidTag) -> SECStatus;
    pub fn SEC_PKCS12CreateNestedSafeContents(p12ctxt:
                                                  *mut SEC_PKCS12ExportContext,
                                              baseSafe:
                                                  *mut ::std::os::raw::c_void,
                                              nestedDest:
                                                  *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn SEC_PKCS12Encode(p12exp: *mut SEC_PKCS12ExportContext,
                            output: SEC_PKCS12EncoderOutputCallback,
                            outputarg: *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn SEC_PKCS12DestroyExportContext(p12exp:
                                              *mut SEC_PKCS12ExportContext);
    pub fn SEC_PKCS12DecoderStart(pwitem: *mut SECItem,
                                  slot: *mut PK11SlotInfo,
                                  wincx: *mut ::std::os::raw::c_void,
                                  dOpen: digestOpenFn, dClose: digestCloseFn,
                                  dRead: digestIOFn, dWrite: digestIOFn,
                                  dArg: *mut ::std::os::raw::c_void)
     -> *mut SEC_PKCS12DecoderContext;
    pub fn SEC_PKCS12DecoderSetTargetTokenCAs(p12dcx:
                                                  *mut SEC_PKCS12DecoderContext,
                                              tokenCAs:
                                                  SECPKCS12TargetTokenCAs)
     -> SECStatus;
    pub fn SEC_PKCS12DecoderUpdate(p12dcx: *mut SEC_PKCS12DecoderContext,
                                   data: *mut ::std::os::raw::c_uchar,
                                   len: ::std::os::raw::c_ulong) -> SECStatus;
    pub fn SEC_PKCS12DecoderFinish(p12dcx: *mut SEC_PKCS12DecoderContext);
    pub fn SEC_PKCS12DecoderVerify(p12dcx: *mut SEC_PKCS12DecoderContext)
     -> SECStatus;
    pub fn SEC_PKCS12DecoderValidateBags(p12dcx:
                                             *mut SEC_PKCS12DecoderContext,
                                         nicknameCb:
                                             SEC_PKCS12NicknameCollisionCallback)
     -> SECStatus;
    pub fn SEC_PKCS12DecoderRenameCertNicknames(p12dcx:
                                                    *mut SEC_PKCS12DecoderContext,
                                                nicknameCb:
                                                    SEC_PKCS12NicknameRenameCallback,
                                                arg:
                                                    *mut ::std::os::raw::c_void)
     -> SECStatus;
    pub fn SEC_PKCS12DecoderImportBags(p12dcx: *mut SEC_PKCS12DecoderContext)
     -> SECStatus;
    pub fn SEC_PKCS12DecoderGetCerts(p12dcx: *mut SEC_PKCS12DecoderContext)
     -> *mut CERTCertList;
    pub fn SEC_PKCS12DecoderIterateInit(p12dcx: *mut SEC_PKCS12DecoderContext)
     -> SECStatus;
    pub fn SEC_PKCS12DecoderIterateNext(p12dcx: *mut SEC_PKCS12DecoderContext,
                                        ipp:
                                            *mut *const SEC_PKCS12DecoderItem)
     -> SECStatus;
    pub fn SEC_PKCS12PutPFX(der_pfx: *mut SECItem, pwitem: *mut SECItem,
                            ncCall: SEC_PKCS12NicknameCollisionCallback,
                            slot: *mut PK11SlotInfo,
                            wincx: *mut ::std::os::raw::c_void) -> SECStatus;
    pub fn SEC_PKCS12ValidData(buf: *mut ::std::os::raw::c_char,
                               bufLen: ::std::os::raw::c_int,
                               totalLength: ::std::os::raw::c_long) -> PRBool;
}
